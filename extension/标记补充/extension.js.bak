game.import("extension", function (lib, game, ui, get, ai, _status) {
    window.xixiguagua = {
        name: "标记补充",
        url: lib.assetURL + "extension/标记补充",
        huanfu: {
            name: "../../../标记补充/animation/huanfu",
        },//国战亮将             
        SSZBB_dizhu_jineng: {
            name: "../../../标记补充/animation/SSZBB_dizhu_jineng",
            speed: 1.2,
        },//地主金光        
        SS_PaijuTubiao_Hujia: {
            name: "../../../标记补充/animation/SS_PaijuTubiao_Hujia",
            speed: 1,
        },//获得护甲和失去护甲        
        aar_longxingzhixiang: {
            name: "../../../标记补充/animation/aar_longxingzhixiang",
            speed: 1,
        },//伤害牌龙头
        diankuangtulu: {
            name: "../../../标记补充/animation/diankuangtulu",
            speed: 2,
        },//癫狂屠戮
        wanjunqushou: {
            name: "../../../标记补充/animation/wanjunqushou",
        },//无双
        Xmiaoshouhuichun: {
            name: "../../../标记补充/animation/Xmiaoshouhuichun",
        },//妙手回春
        Xyishugaochao: {
            name: "../../../标记补充/animation/Xyishugaochao",
        },//医术高超
        effect_loseHp: {
            name: "../../../标记补充/animation/effect_loseHp",
            speed: 2, 
        },//失去体力
        mianshang: {
            name: "../../../标记补充/animation/mianshang",
            speed: 2, 
        },//免伤
        shuzi: {
            name: "../../../标记补充/animation/shuzi",
            speed: 1.5,
        },//伤害数字
        effect_jiu: {
            name: "../../../标记补充/animation/effect_jiu",
            speed: 1.5,
        },//酒
        effect_tao: {
            name: "../../../标记补充/animation/effect_tao",
            speed: 1.5,
        },//桃
        sha: {
            name: "../../../标记补充/animation/sha",
            speed: 1.5,
        },//杀
        effect_shan: {
            name: "../../../标记补充/animation/effect_shan",
            speed: 1.5,
        },//闪
        effect_wuzhongshengyou: {
            name: "../../../标记补充/animation/effect_wuzhongshengyou",
            speed: 1.5,
        },//无中生有
        effect_wugufengdeng: {
            name: "../../../标记补充/animation/effect_wugufengdeng",
            speed: 1.5,
        },//五谷
        effect_nanmanruqin: {
            name: "../../../标记补充/animation/effect_nanmanruqin",
        },//南蛮入侵
        taoyuanjieyi: {
            name: "../../../标记补充/animation/taoyuanjieyi",
        },//桃园结义
        SS_lebusishu: {
            name: "../../../标记补充/animation/SS_lebusishu",
        },//乐不思蜀
        SZN_bingliangcunduan: {
            name: "../../../标记补充/animation/SZN_bingliangcunduan",
        },//兵粮寸断
        wuzhongshengyou: {
            name: "../../../标记补充/animation/wuzhongshengyou",
        },//无中生有_新增
        jiedaosharen: {
            name: "../../../标记补充/animation/jiedaosharen",
            speed: 2,
        },//借刀杀人
        huoqiu_zhanchangbeijing: {
            name: "../../../标记补充/animation/huoqiu_zhanchangbeijing",
            speed: 3,
        },//火攻
        shandian: {
            name: "../../../标记补充/animation/shandian",
            speed: 2.5,
        },//闪电
        fulei: {
            name: "../../../标记补充/animation/fulei",
        },//浮雷
        shuiyanqijun: {
            name: "../../../标记补充/animation/shuiyanqijun",
        },//水淹七军
        huoshaolianying: {
            name: "../../../标记补充/animation/huoshaolianying",
            speed: 3,
        },//火烧连营
        diaohulishan: {
            name: "../../../标记补充/animation/diaohulishan",
        },//调虎离山
        kaihua: {
            name: "../../../标记补充/animation/kaihua",
            speed: 3,
        },//树上开花
        effect_caochuanjiejian: {
            name: "../../../标记补充/animation/effect_caochuanjiejian", 
        },//草船借箭
        zhulutianxia: {
            name: "../../../标记补充/animation/zhulutianxia", 
            speed: 0.72,
        },//逐鹿天下
        wangmeizhike: {
            name: "../../../标记补充/animation/wangmeizhike", 
            speed: 1.5,
        },//望梅止渴
        fudichouxin: {
            name: "../../../标记补充/animation/fudichouxin",
            speed: 1.5,
        },//釜底抽薪
        qizheng: {
            name: "../../../标记补充/animation/qizheng", 
            speed: 1.5,
        },//奇正相生
        meirenji: {
            name: "../../../标记补充/animation/meirenji", 
        },//美人计
        xiaolicangdao: {
            name: "../../../标记补充/animation/xiaolicangdao", 
        },//笑里藏刀
        effect_wanjianqifa_full: {
            name: "../../../标记补充/animation/effect_wanjianqifa_full", 
            speed: 1.5,
        },//万箭齐发
        SSZBB_DDZ_eff_juedou: {
            name: "../../../标记补充/animation/SSZBB_DDZ_eff_juedou",
        },//决斗
        effect_wuxiekeji: {
            name: "../../../标记补充/animation/effect_wuxiekeji",
        },//无懈可击
        
        zbwq: {
            name: "../../../标记补充/animation/zbwq",            
        },
        zb: {
            name: "../../../标记补充/animation/zb",        
        },
        zbfym: {
            name: "../../../标记补充/animation/zbfym",            
        },
        zbjgm: {
            name: "../../../标记补充/animation/zbjgm",            
        },
        zbbw: {
            name: "../../../标记补充/animation/zbbw",            
        },
        
        dutao: {
            name: "../../../标记补充/animation/dutao",
            speed: 1.5,
        },//毒桃
        su: {
            name: "../../../标记补充/animation/su",
        },//酥
        shidu: {
            name: "../../../标记补充/animation/shidu",
        },//施毒
        bagua: {
            name: "../../../标记补充/animation/bagua",
            speed: 1.5,
        },//八门金锁
        huangjin: {
            name: "../../../标记补充/animation/huangjin",
        },//黄巾起义
        neijian: {
            name: "../../../标记补充/animation/neijian",
            speed: 1.15,
        },//主内对决01
        neijian2: {
            name: "../../../标记补充/animation/neijian2",
            speed: 1.15,
        },//主内对决02
        effect_wenheluanwu: {
            name: "../../../标记补充/animation/effect_wenheluanwu",
        },//文和乱武
        effect_haolingtianxia: {
            name: "../../../标记补充/animation/effect_haolingtianxia",
        },//号令天下
        effect_kefuzhongyuan: {
            name: "../../../标记补充/animation/effect_kefuzhongyuan",
        },//克复中原
        effect_guguoanbang: {
            name: "../../../标记补充/animation/effect_guguoanbang",
        },//固国安帮
        SF_jiesuan_eff_zczgshengli: {
            name: "../../../标记补充/animation/SF_jiesuan_eff_zczgshengli",
        },//十周年主公结算        
        SF_jiesuan_eff_fanzeishengli: {
            name: "../../../标记补充/animation/SF_jiesuan_eff_fanzeishengli",
        },//十周年反贼结算
        SF_jiesuan_eff_neijianshengli: {
            name: "../../../标记补充/animation/SF_jiesuan_eff_neijianshengli",
        },//十周年内奸结算
        Xshengli: {
            name: "../../../标记补充/animation/Xshengli",
        },//胜利
        Xnoshengli: {
            name: "../../../标记补充/animation/Xnoshengli",
        },//失败和平局
        XXshengli: {
            name: "../../../标记补充/animation/XXshengli",
            speed: 0.4, 
        },//手杀胜利
        XXshibai: {
            name: "../../../标记补充/animation/XXshibai",
            speed: 0.4, 
        },//手杀失败
        XXpingju: {
            name: "../../../标记补充/animation/XXpingju",
            speed: 0.4, 
        },//手杀平局
        arr_0_gaipan: {
            name: "../../../标记补充/animation/arr_0_gaipan",
        },//改判
        arr_1_gaipan: {
            name: "../../../标记补充/animation/arr_1_gaipan",
        },//改判
        arr_2_gaipan: {
            name: "../../../标记补充/animation/arr_2_gaipan",
        },//改判
        arr_3_gaipan: {
            name: "../../../标记补充/animation/arr_3_gaipan",
        },//改判
        SS_eff_xianqu: {
            name: "../../../标记补充/animation/SS_eff_xianqu",
        },//先驱
        SSZBB_PJN_yexinjia: {
            name: "../../../标记补充/animation/SSZBB_PJN_yexinjia",
        },//野心家
        SS_eff_yinyangyu: {
            name: "../../../标记补充/animation/SS_eff_yinyangyu",
        },//阴阳鱼
        SS_eff_zhulianbihe: {
            name: "../../../标记补充/animation/SS_eff_zhulianbihe",
        },//珠联璧合        
        jianguo: {
            name: "../../../标记补充/animation/jianguo",
        },//建国
        aozhan: {
            name: "../../../标记补充/animation/aozhan",
        },//鏖战
        aozhan_huo: {
            name: "../../../标记补充/animation/aozhan_huo",
        },//鏖战背景
        shoushajisha: {
            name: "../../../标记补充/animation/shoushajisha",
            speed: 1, 
        },//手杀击杀

        shoupo: {
            name: "../../../标记补充/animation/shoupo",           
        },//首破
        lianpo: {
            name: "../../../标记补充/animation/lianpo",           
        },//连破
        sanpo: {
            name: "../../../标记补充/animation/sanpo",           
        },//三破
        sipo: {
            name: "../../../标记补充/animation/sipo",           
        },//四破
        wupo: {
            name: "../../../标记补充/animation/wupo",           
        },//五破
        liupo: {
            name: "../../../标记补充/animation/liupo",           
        },//六破
        qipo: {
            name: "../../../标记补充/animation/qipo",           
        },//七破

        erlianzhan: {
            name: "../../../标记补充/animation/erlianzhan",
        },//二连斩
        sanlianzhan: {
            name: "../../../标记补充/animation/sanlianzhan",
        },//三连斩
        silianzhan: {
            name: "../../../标记补充/animation/silianzhan",
        },//四连斩
        wulianzhan: {
            name: "../../../标记补充/animation/wulianzhan",
        },//五连斩
        liulianzhan: {
            name: "../../../标记补充/animation/liulianzhan",
        },//六连斩
        qilianzhan: {
            name: "../../../标记补充/animation/qilianzhan",
        },//七连斩
        Xjiuwo: {
            name: "../../../标记补充/animation/Xjiuwo",
            loop: true,
        },//手杀救我
        jiubuff: {
            name: "../../../标记补充/animation/jiubuff",
        },//酒buff
        huihekaishi: {
            name: "../../../标记补充/animation/huihekaishi",
        },//回合开始       
        saoguang: {
            name: "../../../标记补充/animation/saoguang",
            speed: 2,
        },//扫光  
        shunshouqianyang: {
            name: "../../../标记补充/animation/shunshouqianyang",
            speed: 1.5, 
        },//顺手牵羊
        effect_guohechaiqiao: {
            name: "../../../标记补充/animation/effect_guohechaiqiao",
        },//过河拆桥
        chenzhu: {
            name: "../../../标记补充/animation/chenzhu",
            loop: true,
        },//城主
        weimingzhong: {
            name: "../../../标记补充/animation/weimingzhong",
        },//🐏袭
        shimingjishibai: {
            name: "../../../标记补充/animation/shimingjishibai",
        },//使命失败
        qingyushibai: {
            name: "../../../标记补充/animation/qingyushibai",
        },//清玉失败
        mibeishibai: {
            name: "../../../标记补充/animation/mibeishibai",
        },//密备失败
        kuanshi: {
            name: "../../../标记补充/animation/kuanshi",
        },//宽释
        chuhaishibai: {
            name: "../../../标记补充/animation/chuhaishibai",
        },//除害失败
        mouyi: {
            name: "../../../标记补充/animation/mouyi",
        },//谋奕 
        chengchi: {
            name: "../../../标记补充/animation/chengchi",
        },//守邺 
        fuzi: {
            name: "../../../标记补充/animation/fuzi",
            speed: 1.5,
        },//斧子
        dao: {
            name: "../../../标记补充/animation/dao",
            speed: 1.5,
        },//刀
        jian: {
            name: "../../../标记补充/animation/jian",
            speed: 1.5,
        },//剑        
        baoji: {
            name: "../../../标记补充/animation/baoji",
            speed: 1,
        },//暴击
        huoshouji: {
            name: "../../../标记补充/animation/huoshouji",
            speed: 1,
        },//火受击
        leishouji: {
            name: "../../../标记补充/animation/leishouji",
            speed: 1,
        },//雷受击        
        wanjian: {
            name: "../../../标记补充/animation/wanjian",
            speed: 1.5,
        }, //万剑受击
        nanman: {
            name: "../../../标记补充/animation/nanman",
            speed: 1.5,
        }, //南蛮受击
        huogong: {
            name: "../../../标记补充/animation/SSZBB_DDZ_eff_huogong",
            speed: 1.5,
        }, //火攻受击
        juedou: {
            name: "../../../标记补充/animation/aar_juedoushouji",
            speed: 1.5,
        }, //决斗受击
        bxyr_shidu: {
            name: "../../../标记补充/animation/shidu_shouji",
            speed: 1.5,
        }, //施毒受击
    };
    return {
        name: "标记补充",
        content: function (config, pack) {
            //引入css
            lib.init.css(lib.assetURL + 'extension/标记补充', 'extension');
            lib.init.css(lib.assetURL + 'extension/标记补充', 'mark');
            //特效部分
            if (config.doudizhu_guanqiuxiaoguo) {
                //飞扬跋扈特效
                lib.skill._xigua_feiyanbahu_ = {
                    trigger: {
                        global: "gameStart",
                    },
                    silent: true,
                    forced: true,
                    charlotte: true,
                    content: function () {
                  //  player.addSkill('qiangwu');
                        setTimeout(function () {
                            if (player.identity == 'zhu' && lib.config.mode == 'doudizhu' && game.me == player) {
                                //自己跋扈
                                var zibahu = ui.create.div('.zibahu', player);
                                var fubahu = ui.create.div('.fubahu', zibahu);
                                ui.create.div('.fubahux', fubahu);
                                //自己飞扬
                                var zifeiyan = ui.create.div('.zifeiyan', player);
                                var fufeiyan = ui.create.div('.fufeiyan', zifeiyan);
                                ui.create.div('.fufeiyanx', fufeiyan);
                                game.playAudio('../extension/标记补充/audio/doudizhu_specialSpell.mp3');
                                setTimeout(function () {
                                    dcdAnim.loadSpine(xixiguagua.SSZBB_dizhu_jineng.name, "skel", function () {
                                        dcdAnim.playSpine(xixiguagua.SSZBB_dizhu_jineng, { speed: 0.8, scale: 0.8, x: [0, 0.89], y: [0, 0.96], parent: player });
                                    });
                                    ui.create.div('.dizhukuang', player);
                                }, 1510);
                            }
                            if (player.identity == 'zhu' && lib.config.mode == 'doudizhu' && game.me != player) {
                                //ai跋扈
                                var aizibahu = ui.create.div('.aizibahu', player);
                                var aifubahu = ui.create.div('.aifubahu', aizibahu);
                                ui.create.div('.aifubahux', aifubahu);
                                //ai飞扬
                                var aizifeiyan = ui.create.div('.aizifeiyan', player);
                                var aifufeiyan = ui.create.div('.aifufeiyan', aizifeiyan);
                                ui.create.div('.aifufeiyanx', aifufeiyan);
                                game.playAudio('../extension/标记补充/audio/doudizhu_specialSpell.mp3');
                                setTimeout(function () {
                                    dcdAnim.loadSpine(xixiguagua.SSZBB_dizhu_jineng.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.SSZBB_dizhu_jineng, { speed: 0.8, scale: 0.8, x: [0, 0.89], y: [0, 0.96], parent: player });
                                    });
                                    ui.create.div('.dizhukuang', player);
                                }, 1510);
                            }
                        }, 2000);
                        var pp = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].randomGet();
                        var xx = ['国服', '省', '区', '市', '街道', '村', '乡', '镇', '县'];
                        xx = xx.randomGets(1).sort();
                        var xxx = ['第一', '第二', '第三', '第四', '第五', '第六'];
                        xxx = xxx.randomGets(1).sort();
                        //官阶特效                                    
                        ui.create.div('.offical_icon_' + pp, player);
                        ui.create.div('.offical_icon_guang', player);
                        //国服标志
                        if (lib.config.mode != 'guozhan') {
                            var guofudiyi = ui.create.div('.guofudiyi' + pp, player);
                            if (pp == 1 || pp == 2 || pp == 3) {
                                guofudiyi.innerHTML = xx + xxx + get.translation(player);
                            }
                        }
                      if (lib.config.mode == 'doudizhu' || lib.config.mode == 'versus' && get.config('versus_mode') == 'two') {
                      if(player==game.me){
                      var  targets=player.getEnemies();
                       for (var i of targets) {                   
                        var bg = ui.create.div('.direnbiaozhi_bg',i);
                        ui.create.div('.direnbiaozhi',bg);
                        var drbzwz = ui.create.div('.direnwenzi',bg);         
                    //    drbzwz.innerHTML='敌人';                   
                        }
                        }
                        }
                        
                    },
                };
            };
            if (config.huajiatexiao) {
                //获得护甲特效
                lib.element.content.changeHujia = function () {
                    player.hujia += num;
                    if (num > 0) {
                        game.log(player, '获得了' + get.cnNumber(num) + '点护甲');
                        dcdAnim.loadSpine(xixiguagua.SS_PaijuTubiao_Hujia.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.SS_PaijuTubiao_Hujia, { action: "play", speed: 0.5, scale: 1, x: [0, 0.91], y: [0, 0.49], parent: player });
                        });
                    }
                    if (player.hujia <= 0) {
                        player.hujia = 0;
                        if (num < 0) { event.trigger('clearHujia') };
                    }
                    player.update();
                },
                    //失去护甲特效
                    lib.skill._shiqihujia_ = {
                        trigger: {
                            player: "damageBegin4",
                        },
                        silent: true,
                        charlotte: true,
                        forced: true,
                        content: function () {
                            if (player.hujia > 0) {
      dcdAnim.loadSpine(xixiguagua.SS_PaijuTubiao_Hujia.name, "skel", function () {
      dcdAnim.playSpine(xixiguagua.SS_PaijuTubiao_Hujia, { action: "play1", speed: 0.5, scale: 1, x: 120, y: 90, parent: player });});
                if (!trigger.nature) {
                decadeUI.animation.playSpine({ name: 'effect_shoujidonghua', speed: 0.6 }, { scale: 0.7, parent: player });
                }
                if (trigger.nature == 'fire') {
                decadeUI.animation.playSpine({ name: 'huo_daojianfu', action: 'play3', speed: 0.6 }, { scale: 0.6, parent: player });
                }
                if (trigger.nature == 'thunder') {
                decadeUI.animation.playSpine({ name: 'lei_daojianfu', action: 'play3', speed: 0.6 }, { scale: 0.6, parent: player });
                }
                if(trigger.num>1){
                decadeUI.animation.playSpine({ name:'baoji',  speed:0.4}, {scale: 0.6,x:[0,0.55],parent: player});//暴击特效
                }
                    // 护甲音效        
                 if(player.hujia > 0&&trigger.num==1&&!trigger.nature){
                game.playAudio('../extension/标记补充/audio/raw_hit_shield_normal.mp3');}
                 if(player.hujia > 0&&trigger.num>1&&!trigger.nature){
                game.playAudio('../extension/标记补充/audio/raw_hit_shield_normal2.mp3');}      
                if(player.hujia > 0&&trigger.num==1&&trigger.nature == 'fire'){
                game.playAudio('../extension/标记补充/audio/raw_hit_shield_huo.mp3');}      
                if(player.hujia > 0&&trigger.num>1&&trigger.nature == 'fire'){
                game.playAudio('../extension/标记补充/audio/raw_hit_shield_huo2.mp3');}
                if(player.hujia > 0&&trigger.num==1&&trigger.nature == 'thunder'){
                game.playAudio('../extension/标记补充/audio/raw_hit_shield_lei.mp3');}            
                if(player.hujia > 0&&trigger.num>1&&trigger.nature == 'thunder'){
                game.playAudio('../extension/标记补充/audio/raw_hit_shield_lei2.mp3');}                            
                }                
                        },
                    };
                //指示线伤害牌特效
                lib.skill._shanghaipaishiyongtexiao_ = {
                    trigger: {
                        player: 'useCardBegin',
                    },
                    priority: 100,
                    firstDo: true,
                    charlotte: true,
                    forced: true,
                    popup: false,
                    audio: false,
                    content: function () {
                        if (get.tag(trigger.card, 'damage')) {
                            if (player != game.me) {
                                dcdAnim.loadSpine(xixiguagua.aar_longxingzhixiang.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.aar_longxingzhixiang, { speed: 0.5, scale: 0.6, parent: player });
                                });
                            }
                            if (player == game.me) {
                                dcdAnim.loadSpine(xixiguagua.aar_longxingzhixiang.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.aar_longxingzhixiang, { speed: 0.4, scale: 0.6, x: [0, -3.5], y: [0, 1], parent: player });
                                });
                            }
                        }
                    },
                }
                //整肃修改
                lib.skill.zhengsu = {
                    trigger: { player: 'phaseDiscardEnd' },
                    forced: true,
                    charlotte: true,
                    filter: function (event, player) {
                        return (player.storage.zhengsu_leijin || player.storage.zhengsu_bianzhen || player.storage.zhengsu_mingzhi);
                    },
                    content: function () {
                        player.chooseDrawRecover(2, '整肃奖励：摸两张牌或回复1点体力');
                    },
                    subSkill: {
                        leijin: {
                            mark: true,
                            trigger: { player: 'useCard1' },
                            lastDo: true,
                            charlotte: true,
                            forced: true,
                            popup: false,
                            init: function (player) {
                                var zsbgxx = document.querySelector('.zhengsubeijing');
                                var zsbggg = document.querySelector('.zhengsubeijingx');
                                if (!zsbgxx) {
                                    player.storage.zhengsu_leijingua = ui.create.div('.zhengsubeijing', ui.arena);
                                    player.storage.zhengsu_leijingua.innerHTML = '发起者为' + get.translation(player) + '<br>还需出3张牌' + '<br>出牌点数递增';
                                    player.storage.zhengsu_leijingua2 = true;
                                } else if (!zsbggg) {
                                    player.storage.zhengsu_leijingua = ui.create.div('.zhengsubeijingx', ui.arena);
                                    player.storage.zhengsu_leijingua.innerHTML = '发起者为' + get.translation(player) + '<br>还需出3张牌' + '<br>出牌点数递增';
                                    player.storage.zhengsu_leijingua3 = true;
                                } else {
                                    player.storage.zhengsu_leijingua = ui.create.div('.zhengsubeijingg', ui.arena);
                                    player.storage.zhengsu_leijingua.innerHTML = '发起者为' + get.translation(player) + '<br>还需出3张牌' + '<br>出牌点数递增';
                                }
                            },
                            onremove: function (player) {
                                var zsbgxx = document.querySelector('.zhengsubeijing');
                                var zsbggg = document.querySelector('.zhengsubeijingx');
                                var zsbgxg = document.querySelector('.zhengsubeijingg');
                                if (zsbgxx) { zsbgxx.parentNode.removeChild(zsbgxx); }
                                if (zsbggg) { zsbggg.parentNode.removeChild(zsbggg); }
                                if (zsbgxg) { zsbgxg.parentNode.removeChild(zsbgxg); }
                                delete player.storage.zhengsu_leijin_markcount;
                                delete player.storage.zhengsu_leijingua2;
                                delete player.storage.zhengsu_leijingua3;
                                delete player.storage.zhengsu_leijin;
                            },
                            filter: function (event, player) {
                                return player.isPhaseUsing() && player.storage.zhengsu_leijin !== false;
                            },
                            content: function () {
                                var list = player.getHistory('useCard', function (evt) {
                                    return evt.isPhaseUsing(player);
                                });
                                var goon = true;
                                for (var i = 0; i < list.length; i++) {
                                    var num = get.number(list[i].card);
                                    if (typeof num != 'number') {
                                        goon = false;
                                        break;
                                    }
                                    if (i > 0) {
                                        var num2 = get.number(list[i - 1].card);
                                        if (typeof num2 != 'number' || num2 >= num) {
                                            goon = false;
                                            break;
                                        }
                                    }
                                    if (goon == true && list.length <= 2) {
                                        player.storage.zhengsu_leijingua.innerHTML = '发起者为' + get.translation(player) + '<br>还需出' + (3 - list.length) + '张牌' + '<br>出牌点数大于' + get.number(list[i].card);
                                    } else if (goon == true && list.length > 2) {
                                        player.storage.zhengsu_leijingua.innerHTML = '发起者为' + get.translation(player) + '<br>出牌点数大于' + get.number(list[i].card);
                                    }
                                }
                                if (!goon) {
                                    game.broadcastAll(function (player) {
                                        player.storage.zhengsu_leijin = false;
                                        if (player.marks.zhengsu_leijin) player.marks.zhengsu_leijin.firstChild.innerHTML = '整肃 失败';
                                        delete player.storage.zhengsu_leijin_markcount;
                                        if (player.storage.zhengsu_leijingua2) {
                                            var zsbgxx = document.querySelector('.zhengsubeijing');
                                            if (zsbgxx) { zsbgxx.parentNode.removeChild(zsbgxx); }
                                        } else if (player.storage.zhengsu_leijingua3) {
                                            var zsbggg = document.querySelector('.zhengsubeijingx');
                                            if (zsbggg) { zsbggg.parentNode.removeChild(zsbggg); }
                                        } else {
                                            var zsbgxg = document.querySelector('.zhengsubeijingg');
                                            if (zsbgxg) { zsbgxg.parentNode.removeChild(zsbgxg); }
                                        }
                                    }, player);
                                }
                                else {
                                    if (list.length > 2) {
                                        player.storage.zhengsu_leijin = true;
                                        //if(player.name==)						
                                        // game.broadcastAll(function(player,num){
                                        // //	if(player.marks.zhengsu_leijin) player.marks.zhengsu_leijin.firstChild.innerHTML='整肃 成功';        
                                        // player.storage.zhengsu_leijin=true;
                                        // player.storage.zhengsu_leijin_markcount=num;
                                        // },player,num);
                                    }
                                    // else game.broadcastAll(function(player,num){
                                    // player.storage.zhengsu_leijin_markcount=num;
                                    // },player,num);
                                }
                                // player.markSkill('zhengsu_leijin');
                            },
                            marktext: '整肃 擂进',
                            intro: {
                                name: '整肃 擂进',
                                content: '<li>条件：回合内所有于出牌阶段使用的牌点数递增且不少于三张。',
                            },
                        },
                        bianzhen: {
                            mark: true,
                            trigger: { player: 'useCard1' },
                            firstDo: true,
                            charlotte: true,
                            forced: true,
                            popup: false,
                            init: function (player) {
                                var zsbgxx = document.querySelector('.zhengsubeijing');
                                var zsbggg = document.querySelector('.zhengsubeijingx');
                                if (!zsbgxx) {
                                    player.storage.zhengsu_bianzhengua = ui.create.div('.zhengsubeijing', ui.arena);
                                    player.storage.zhengsu_bianzhengua.innerHTML = '发起者为' + get.translation(player) + '<br>还需出2张牌' + '<br>出牌花色相同';
                                    player.storage.zhengsu_bianzhengua2 = true;
                                } else if (!zsbggg) {
                                    player.storage.zhengsu_bianzhengua = ui.create.div('.zhengsubeijingx', ui.arena);
                                    player.storage.zhengsu_bianzhengua.innerHTML = '发起者为' + get.translation(player) + '<br>还需出2张牌' + '<br>出牌花色相同';
                                    player.storage.zhengsu_bianzhengua3 = true;
                                } else {
                                    player.storage.zhengsu_bianzhengua = ui.create.div('.zhengsubeijingg', ui.arena);
                                    player.storage.zhengsu_bianzhengua.innerHTML = '发起者为' + get.translation(player) + '<br>还需出2张牌' + '<br>出牌花色相同';
                                }
                            },
                            onremove: function (player) {
                                var zsbgxx = document.querySelector('.zhengsubeijing');
                                var zsbggg = document.querySelector('.zhengsubeijingx');
                                var zsbgxg = document.querySelector('.zhengsubeijingg');
                                if (zsbgxx) { zsbgxx.parentNode.removeChild(zsbgxx); }
                                if (zsbggg) { zsbggg.parentNode.removeChild(zsbggg); }
                                if (zsbgxg) { zsbgxg.parentNode.removeChild(zsbgxg); }
                                delete player.storage.zhengsu_bianzhen;
                                delete player.storage.zhengsu_bianzhengua2;
                                delete player.storage.zhengsu_bianzhengua3;
                            },
                            filter: function (event, player) {
                                return player.isPhaseUsing() && player.storage.zhengsu_bianzhen !== false;
                            },
                            content: function () {
                                var list = player.getHistory('useCard', function (evt) {
                                    return evt.isPhaseUsing();
                                });
                   var goon = true, suit = get.suit(list[0].card, false);
            if(get.translation(suit)=="♥️"){str="<span style='color:red;-webkit-text-stroke: 0.6px white;text-shadow:0 0 5px white;width:10px;'>♥</span>️️";}
            if(get.translation(suit)=="♠️️"){str="<span style='color:black;-webkit-text-stroke: 0.6px white;text-shadow:0 0 5px white;width:10px;'>♠️</span>️️";}
            if(get.translation(suit)=="♣️"){str="<span style='color:black;-webkit-text-stroke: 0.6px white;text-shadow:0 0 5px white;width:10px;'>♣️</span>️️";}
            if(get.translation(suit)=="♦️"){str="<span style='color:red;-webkit-text-stroke: 0.6px white;text-shadow:0 0 5px white;width:10px;'>♦️</span>️️";}
                                if (goon == true && list.length <= 1) {
                                    player.storage.zhengsu_bianzhengua.innerHTML = '发起者为' + get.translation(player) + '<br>还需出' + (2 - list.length) + '张牌' + '<br>出牌花色为' + str;
                                } else if (goon == true && list.length > 1) {
                                    player.storage.zhengsu_bianzhengua.innerHTML = '发起者为' + get.translation(player) + '<br>出牌花色为' + str;
                                }
                                if (suit == 'none') {
                                    goon = false;
                                }
                                else {
                                    for (var i = 1; i < list.length; i++) {
                                        if (get.suit(list[i]) != suit) {
                                            goon = false;
                                            break;
                                        }                               
                                        if (goon == true && list.length <= 1) {
                                            player.storage.zhengsu_bianzhengua.innerHTML = '发起者为' + get.translation(player) + '<br>还需出' + (2 - list.length) + '张牌' + '<br>出牌花色为' + str;/*get.translation(get.suit(list[i]));*/
                                        } else if (goon == true && list.length > 1) {
                                            player.storage.zhengsu_bianzhengua.innerHTML = '发起者为' + get.translation(player) + '<br>出牌花色为' +str;/* get.translation(get.suit(list[i]));*/
                                        }                            
                                    }
                                }
                                if (!goon) {
                                    game.broadcastAll(function (player) {
                                        player.storage.zhengsu_bianzhen = false;
                                        if (player.marks.zhengsu_bianzhen) player.marks.zhengsu_bianzhen.firstChild.innerHTML = '整肃 失败';
                                        if (player.storage.zhengsu_bianzhengua2) {
                                            var zsbgxx = document.querySelector('.zhengsubeijing');
                                            if (zsbgxx) { zsbgxx.parentNode.removeChild(zsbgxx); }
                                        } else if (player.storage.zhengsu_bianzhengua3) {
                                            var zsbggg = document.querySelector('.zhengsubeijingx');
                                            if (zsbggg) { zsbggg.parentNode.removeChild(zsbggg); }
                                        } else {
                                            var zsbgxg = document.querySelector('.zhengsubeijingg');
                                            if (zsbgxg) { zsbgxg.parentNode.removeChild(zsbgxg); }
                                        }
                                    }, player);
                                }
                                else {
                                    if (list.length > 1) {
                                        player.storage.zhengsu_bianzhen = true;
                                    }
                                }
                            },
                            marktext: '整肃 变阵',
                            intro: {
                                name: '整肃 变阵',
                                content: '<li>条件：回合内所有于出牌阶段使用的牌花色相同且不少于两张。',
                            },
                        },
                        mingzhi: {
                            mark: true,
                            trigger: { player: 'loseAfter' },
                            firstDo: true,
                            charlotte: true,
                            forced: true,
                            popup: false,
                            init: function (player) {
                                var zsbgxx = document.querySelector('.zhengsubeijing');
                                var zsbggg = document.querySelector('.zhengsubeijingx');
                                if (!zsbgxx) {
                                    player.storage.zhengsu_mingzhigua = ui.create.div('.zhengsubeijing', ui.arena);
                                    player.storage.zhengsu_mingzhigua.innerHTML = '发起者为' + get.translation(player) + '<br>需弃置2张牌' + '<br>弃置花色不同';
                                    player.storage.zhengsu_mingzhigua2 = true;
                                } else if (!zsbggg) {
                                    player.storage.zhengsu_mingzhigua = ui.create.div('.zhengsubeijingx', ui.arena);
                                    player.storage.zhengsu_mingzhigua.innerHTML = '发起者为' + get.translation(player) + '<br>需弃置2张牌' + '<br>弃置花色不同';
                                    player.storage.zhengsu_mingzhigua3 = true;
                                } else {
                                    player.storage.zhengsu_mingzhigua = ui.create.div('.zhengsubeijingg', ui.arena);
                                    player.storage.zhengsu_mingzhigua.innerHTML = '发起者为' + get.translation(player) + '<br>需弃置2张牌' + '<br>弃置花色不同';
                                }
                            },
                            onremove: function (player) {
                                var zsbgxx = document.querySelector('.zhengsubeijing');
                                var zsbggg = document.querySelector('.zhengsubeijingx');
                                var zsbgxg = document.querySelector('.zhengsubeijingg');
                                if (zsbgxx) { zsbgxx.parentNode.removeChild(zsbgxx); }
                                if (zsbggg) { zsbggg.parentNode.removeChild(zsbggg); }
                                if (zsbgxg) { zsbgxg.parentNode.removeChild(zsbgxg); }
                                delete player.storage.zhengsu_mingzhi_list;
                                delete player.storage.zhengsu_mingzhi;
                                delete player.storage.zhengsu_mingzhi_markcount;
                                delete player.storage.zhengsu_mingzhigua2;
                                delete player.storage.zhengsu_mingzhigua3;
                            },
                            filter: function (event, player) {
                                if (player.storage.zhengsu_mingzhi === false || event.type != 'discard') return false;
                                var evt = event.getParent('phaseDiscard');
                                return evt && evt.player == player;
                            },
                            content: function () {
                                var goon = true, list = [];
                                player.getHistory('lose', function (event) {
                                    if (!goon || event.type != 'discard') return false;
                                    var evt = event.getParent('phaseDiscard');
                                    if (evt && evt.player == player) {
                                        for (var i of event.cards2) {
                                            var suit = get.suit(i, player);
                                            if (list.contains(suit)) {
                                                goon = false;
                                                break;
                                            }
                                            else list.push(suit);
                                        }
                                    }
                                });
                                if (!goon) {
                                    game.broadcastAll(function (player) {
                                        player.storage.zhengsu_mingzhi = false;
                                        if (player.marks.zhengsu_mingzhi) player.marks.zhengsu_mingzhi.firstChild.innerHTML = '整肃 失败';
                                        if (player.storage.zhengsu_mingzhigua2) {
                                            var zsbgxx = document.querySelector('.zhengsubeijing');
                                            if (zsbgxx) { zsbgxx.parentNode.removeChild(zsbgxx); }
                                        } else if (player.storage.zhengsu_mingzhigua3) {
                                            var zsbggg = document.querySelector('.zhengsubeijingx');
                                            if (zsbggg) { zsbggg.parentNode.removeChild(zsbggg); }
                                        } else {
                                            var zsbgxg = document.querySelector('.zhengsubeijingg');
                                            if (zsbgxg) { zsbgxg.parentNode.removeChild(zsbgxg); }
                                        }
                                        delete player.storage.zhengsu_mingzhi_list;
                                    }, player);
                                }
                                else {
                                    if (list.length > 1) {
                                        game.broadcastAll(function (player, list) {
                                            if (player.marks.zhengsu_mingzhi) player.marks.zhengsu_mingzhi.firstChild.innerHTML = '整肃 成功';
                                            player.storage.zhengsu_mingzhi = true;
                                            player.storage.zhengsu_mingzhi_list = list;
                                            player.storage.zhengsu_mingzhi_markcount = list.length;
                                        }, player, list);
                                    }
                                    else game.broadcastAll(function (player, list) {
                                        player.storage.zhengsu_mingzhi_list = list;
                                        player.storage.zhengsu_mingzhi_markcount = list.length;
                                    }, player, list);
                                }
                                player.markSkill('zhengsu_mingzhi');
                            },
                            marktext: '整肃 鸣止',
                            intro: {
                                name: '整肃 鸣止',
                                content: '<li>条件：回合内所有于弃牌阶段弃置的牌花色均不相同且不少于两张。',
                            },
                        },
                    },
                };
                
                //张琪英改判特效
                lib.skill.zhenyi_spade = {
                    trigger: {
                        global: "judge",
                    },
                    direct: true,
                    filter: function (event, player) {
                        return player.hasMark('xinfu_falu_spade');
                    },
                    content: function () {
                        "step 0"
                        var str = get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                            get.translation(trigger.player.judging[0]) + '，是否发动【真仪】，弃置「紫薇♠」标记并修改判定结果？';
                        player.chooseControl('spade', 'heart', 'diamond', 'club', 'cancel2').set('prompt', str).set('ai', function () {
                            var judging = _status.event.judging;
                            var trigger = _status.event.getTrigger();
                            var res1 = trigger.judge(judging);
                            var list = lib.suit.slice(0);
                            var attitude = get.attitude(player, trigger.player);
                            if (attitude == 0) return 0;
                            var getj = function (suit) {
                                return trigger.judge({
                                    name: get.name(judging),
                                    nature: get.nature(judging),
                                    suit: suit,
                                    number: 5,
                                })
                            };
                            list.sort(function (a, b) {
                                return (getj(b) - getj(a)) * get.sgn(attitude);
                            });
                            if ((getj(list[0]) - res1) * attitude > 0) return list[0];
                            return 'cancel2';
                        }).set('judging', trigger.player.judging[0]);
                        "step 1"
                        if (result.control != 'cancel2') {
                            //decadeUI.animation.playSpine({ name: 'arr_' + result.index + '_gaipan', speed: 0.8, }, { scale: 0.8, x: [0, 0.5], });
                            dcdAnim.loadSpine(xixiguagua['arr_' + result.index + '_gaipan'].name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua['arr_' + result.index + '_gaipan'], {  speed: 0.8, scale: 0.8, x: [0, 0.5] });
                            });
                            game.playAudio('../extension/标记补充/audio/ziweigaipan.mp3');
                            game.delay(2.5);
                            game.log(result.index);
                            player.addExpose(0.25);
                            player.removeMark('xinfu_falu_spade');
                            player.unmarkSkill('xinfu_falu_spade1');
                            player.logSkill('xinfu_zhenyi', trigger.player);
                            player.popup(result.control);
                            game.log(player, '将判定结果改为了', '#y' + get.translation(result.control + 2) + 5);
                            trigger.fixedResult = {
                                suit: result.control,
                                color: get.color({ suit: result.control }),
                                number: 5,
                            };
                        }
                    },
                    ai: {
                        rejudge: true,
                        tag: {
                            rejudge: 1,
                        },
                        expose: 0.5,
                    },
                };
                //小乔红颜
                lib.skill.xinhongyan = {
                    audio: 2,
                    mod: {
                        suit: function (card, suit) {
                            if (suit == 'spade') return 'heart';
                        },
                    },
                    trigger: {
                        global: "judge",
                    },
                    direct: true,
                    filter: function (event, player) {
                        if (event.fixedResult && event.fixedResult.suit) return event.fixedResult.suit == 'heart';
                        return get.suit(event.player.judging[0], event.player) == 'heart';
                    },
                    content: function () {
                        "step 0"
                        var str = '红颜：' + get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                            get.translation(trigger.player.judging[0]) + '，请将其改为一种花色';
                        player.chooseControl('spade', 'heart', 'diamond', 'club').set('prompt', str).set('ai', function () {
                            var judging = _status.event.judging;
                            var trigger = _status.event.getTrigger();
                            var res1 = trigger.judge(judging);
                            var list = lib.suit.slice(0);
                            var attitude = get.attitude(player, trigger.player);
                            if (attitude == 0) return 0;
                            var getj = function (suit) {
                                return trigger.judge({
                                    name: get.name(judging),
                                    nature: get.nature(judging),
                                    suit: suit,
                                    number: get.number(judging),
                                })
                            };
                            list.sort(function (a, b) {
                                return (getj(b) - getj(a)) * get.sgn(attitude);
                            });
                            return list[0];
                        }).set('judging', trigger.player.judging[0]);
                        "step 1"
                        if (result.control != 'cancel2') {
                            player.addExpose(0.25);
                            player.popup(result.control);
                            game.log(player, '将判定结果改为了', '#y' + get.translation(result.control + 2));
                          //  decadeUI.animation.playSpine({ name: 'arr_' + result.index + '_gaipan', speed: 0.8, }, { scale: 0.8, x: [0, 0.5], });
                            dcdAnim.loadSpine(xixiguagua['arr_' + result.index + '_gaipan'].name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua['arr_' + result.index + '_gaipan'], {  speed: 0.8, scale: 0.8, x: [0, 0.5] });                            
                            });
                            game.playAudio('../extension/标记补充/audio/ziweigaipan.mp3');
                            game.delay(2.5);
                            if (!trigger.fixedResult) trigger.fixedResult = {};
                            trigger.fixedResult.suit = result.control;
                            trigger.fixedResult.color = get.color({ suit: result.control });
                        }
                    },
                    ai: {
                        rejudge: true,
                        tag: {
                            rejudge: 0.4,
                        },
                        expose: 0.5,
                    },
                };
            };//其他修改尾巴
            /*-------------------------------------------------------*/
            //国战美化
            if (lib.config.mode == 'guozhan' && config.guozhanmeihua) {
                //分离先驱野心家标记
                lib.element.player.$showCharacter = function (num, log) {
                    var showYe = false;
                    if (num == 0 && !this.isUnseen(0)) {
                        return;
                    }
                    if (num == 1 && !this.isUnseen(1)) {
                        return;
                    }
                    if (!this.isUnseen(2)) {
                        return;
                    }
                    game.addVideo('showCharacter', this, num);
                    if (this.identity == 'unknown' || ((num == 0 || num == 2) && lib.character[this.name1][1] == 'ye')) {
                        this.group = this.getGuozhanGroup(num);
                        this._group = this.group;
                        if ((num == 0 || num == 2) && lib.character[this.name1][1] == 'ye') {
                            this.identity = 'ye';
                            if (!this._ye) {
                                this._ye = true;
                                showYe = true;
                            }
                        }
                        else if (get.is.jun(this.name1) && this.isAlive()) {
                            this.identity = this.group;
                        }
                        else if (this.wontYe(this.group)) {
                            this.identity = this.group;
                        }
                        else {
                            this.identity = 'ye';
                        }
                        this.setIdentity(this.identity);
                        this.ai.shown = 1;
                        this.node.identity.classList.remove('guessing');

                        if (_status.clickingidentity && _status.clickingidentity[0] == this) {
                            for (var i = 0; i < _status.clickingidentity[1].length; i++) {
                                _status.clickingidentity[1][i].delete();
                                _status.clickingidentity[1][i].style.transform = '';
                            }
                            delete _status.clickingidentity;
                        }
                        game.addVideo('setIdentity', this, this.identity);
                    }
                    var skills;
                    switch (num) {
                        case 0:
                            if (log !== false) game.log(this, '展示了主将', '#b' + this.name1);
                            this.name = this.name1;
                            skills = lib.character[this.name][3];
                            this.sex = lib.character[this.name][0];
                            this.classList.remove('unseen');
                            decadeUI.animation.playSpine({ name: 'huanfu', speed: 0.8, }, { scale: 0.5, parent: this });                            
                            break;
                        case 1:
                            if (log !== false) game.log(this, '展示了副将', '#b' + this.name2);
                            skills = lib.character[this.name2][3];
                            if (this.sex == 'unknown') this.sex = lib.character[this.name2][0];
                            if (this.name.indexOf('unknown') == 0) this.name = this.name2;
                            this.classList.remove('unseen2');
                            decadeUI.animation.playSpine({ name: 'huanfu', speed: 0.8, }, { scale: 0.5, parent: this });                                                   
                            break;
                        case 2:
                            if (log !== false) game.log(this, '展示了主将', '#b' + this.name1, '、副将', '#b' + this.name2);
                            this.name = this.name1;
                            skills = lib.character[this.name][3].concat(lib.character[this.name2][3]);
                            this.sex = lib.character[this.name][0];
                            this.classList.remove('unseen');
                            this.classList.remove('unseen2');
                            decadeUI.animation.playSpine({ name: 'huanfu', speed: 0.8, }, { scale: 0.5, parent: this });                            
                            break;
                    }
                    game.broadcast(function (player, name, sex, num, identity, group) {
                        player.identityShown = true;
                        player.group = group;
                        player.name = name;
                        player.sex = sex;
                        player.node.identity.classList.remove('guessing');
                        switch (num) {
                            case 0: player.classList.remove('unseen'); break;
                            case 1: player.classList.remove('unseen2'); break;
                            case 2: player.classList.remove('unseen'); player.classList.remove('unseen2'); break;
                        }
                        player.ai.shown = 1;
                        player.identity = identity;
                        player.setIdentity(identity);
                        if (_status.clickingidentity && _status.clickingidentity[0] == player) {
                            for (var i = 0; i < _status.clickingidentity[1].length; i++) {
                                _status.clickingidentity[1][i].delete();
                                _status.clickingidentity[1][i].style.transform = '';
                            }
                            delete _status.clickingidentity;
                        }
                    }, this, this.name, this.sex, num, this.identity, this.group);
                    this.identityShown = true;
                    for (var i = 0; i < skills.length; i++) {
                        this.hiddenSkills.remove(skills[i]);
                        this.addSkill(skills[i]);
                    }
                    this.checkConflict();
                    if (!this.viceChanged) {
                        var initdraw = get.config('initshow_draw');
                        if (_status.connectMode) initdraw = lib.configOL.initshow_draw;
                        if (!_status.initshown && !_status.overing && initdraw != 'off' && this.isAlive() && _status.mode != 'mingjiang') {
                            this.popup('首亮');
                            if (initdraw == 'draw') {
                                game.log(this, '首先明置武将，得到奖励');
                                game.log(this, '摸了两张牌');
                                this.draw(2).log = false;
                            }
                            else {
                                this.addMark('xianqu_mark', 1, false);
                                //获得先驱标记
                                if (game.me == this) {
                                    if (!window.gzbjbg) {
                                        window.gzbjbg = ui.create.div('.biaojibeijing', ui.arena);
                                    }
                                    ui.create.div('.xianqubiaoji', window.gzbjbg);
                                } else { ui.create.div('.xianqubiaojiai', this); }
                            }
                            _status.initshown = true;
                        }
                        if (!this.isUnseen(2) && !this._mingzhied) {
                            this._mingzhied = true;
                            if (this.singleHp) {
                                this.doubleDraw();
                            }
                            if (this.perfectPair()) {
                                var next = game.createEvent('guozhanDraw');
                                next.player = this;
                                next.setContent('zhulian');
                            }
                        }
                        if (showYe) {
                            this.addMark('yexinjia_mark', 1, false);
                            //获得野心家标记
                            if (game.me == this) {
                                if (!window.gzbjbg) {
                                    window.gzbjbg = ui.create.div('.biaojibeijing', ui.arena);
                                }
                                ui.create.div('.yexinjiabiaoji', window.gzbjbg);
                            } else {
                                ui.create.div('.aiyexinjiabiaoji', this);
                            }

                        }
                    }
                    game.tryResult();
                },
                    //国战分离调虎离山
                    lib.skill.diaohulishan = {
                        trigger: { player: ['damageBegin3', 'loseHpBefore', 'recoverBefore'] },
                        forced: true,
                        popup: false,
                        init: function (player) {
                            var dhls = ui.create.div('.diaohulishanbeijing', player);
                        },
                        onremove: function (player) {
                            var scdhls = document.querySelector('.diaohulishanbeijing');
                            if (scdhls) { scdhls.parentNode.removeChild(scdhls); }
                        },
                        content: function () {
                            trigger.cancel();
                        },
                        mod: {
                            cardEnabled: function () {
                                return false;
                            },
                            cardSavable: function () {
                                return false;
                            },
                            targetEnabled: function () {
                                return false;
                            },
                        },
                        group: 'undist',
                        ai: {
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'recover') || get.tag(card, 'damage')) return 'zeroplayertarget';
                                },
                            },
                        },
                    };
                //分离阴阳鱼标记
                lib.element.content.doubleDraw = function () {
                    if (!player.hasMark('yinyang_mark')) player.addMark('yinyang_mark', 1, false);
                    if (game.me == player) {
                        if (!window.gzbjbg) {
                            window.gzbjbg = ui.create.div('.biaojibeijing', ui.arena);
                        }
                        ui.create.div('.yingyanyubiaoji', window.gzbjbg);
                    } else {
                        ui.create.div('.aiyingyanyubiaoji', player);
                    }
                };
                //分离珠联璧合标记
                lib.element.content.zhulian = function () {
                    player.popup('珠联璧合');
                    if (!player.hasMark('zhulianbihe_mark')) {
                        player.addMark('zhulianbihe_mark', 1, false);
                        if (game.me == player) {
                            if (!window.gzbjbg) {
                                window.gzbjbg = ui.create.div('.biaojibeijing', ui.arena);
                            }
                            ui.create.div('.zhulianbihebiaoji', window.gzbjbg);
                        } else {
                            ui.create.div('.aizhulianbihebiaoji', player);
                        }
                    }
                };
                //国战标记技能
                lib.skill._guozhan_marks = {
                    ruleSkill: true,
                    enable: 'phaseUse',
                    filter: function (event, player) {
                        return player.hasMark('yexinjia_mark') || player.hasMark('xianqu_mark') || player.hasMark('yinyang_mark') || player.hasMark('zhulianbihe_mark');
                    },
                    chooseButton: {
                        dialog: function (event, player) {
                            return ui.create.dialog('###国战标记###弃置一枚对应的标记，发动其对应的效果');
                        },
                        chooseControl: function (event, player) {
                            var list = [], bool = player.hasMark('yexinjia_mark');
                            if (bool || player.hasMark('xianqu_mark')) list.push('先驱');
                            if (bool || player.hasMark('zhulianbihe_mark')) {
                                list.push('珠联(摸牌)');
                                if (event.filterCard({ name: 'tao', isCard: true }, player, event)) list.push('珠联(桃)');
                            }
                            if (bool || player.hasMark('yinyang_mark')) list.push('阴阳鱼');
                            list.push('cancel2');
                            return list;
                        },
                        check: function () {
                            var player = _status.event.player, bool = player.hasMark('yexinjia_mark');
                            if ((bool || player.hasMark('xianqu_mark')) && (4 - player.countCards('h')) > 1) return '先驱';
                            if (bool || player.hasMark('zhulianbihe_mark')) {
                                if (_status.event.getParent().filterCard({ name: 'tao', isCard: true }, player, event) && get.effect_use(player, { name: 'tao' }, player) > 0) return '珠联(桃)';
                                if (player.getHandcardLimit() - player.countCards('h') > 1 && !game.hasPlayer(function (current) {
                                    return current != player && current.isFriendOf(player) && current.hp + current.countCards('h', 'shan') <= 2;
                                })) return '珠联(摸牌)';
                            }
                            if (player.hasMark('yinyang_mark') && player.getHandcardLimit() - player.countCards('h') > 0) return '阴阳鱼';
                            return 'cancel2';
                        },
                        backup: function (result, player) {
                            switch (result.control) {
                                case '珠联(桃)': return get.copy(lib.skill._zhulianbihe_mark_tao);
                                case '珠联(摸牌)': return {
                                    content: function () {
                                        if (player.hasMark('zhulianbihe_mark')) {
                                            if (game.me == player) {
                                                var zlbh = document.querySelector('.zhulianbihebiaoji');
                                                if (zlbh) { zlbh.parentNode.removeChild(zlbh); }
                                            } else {
                                                var aizlbh = document.querySelector('.aizhulianbihebiaoji');
                                                if (aizlbh) { aizlbh.parentNode.removeChild(aizlbh); }
                                            }
                                        } else if (player.hasMark('yexinjia_mark') && player.hasMark('zhulianbihe_mark') < 1) {
                                            if (game.me == player) {
                                                var yxjx = document.querySelector('.yexinjiabiaoji');
                                                if (yxjx) { yxjx.parentNode.removeChild(yxjx); }
                                            } else {
                                                var aiyxjx = document.querySelector('.aiyexinjiabiaoji');
                                                if (aiyxjx) { aiyxjx.parentNode.removeChild(aiyxjx); }
                                            }
                                        }
                                        player.draw(2);
                                        player.removeMark(player.hasMark('zhulianbihe_mark') ? 'zhulianbihe_mark' : 'yexinjia_mark', 1);
                                        if (game.me == player && player.hasMark('yexinjia_mark') < 1 && player.hasMark('xianqu_mark') < 1 && player.hasMark('yinyang_mark') < 1 && player.hasMark('zhulianbihe_mark') < 1) {
                                            window.gzbjbg.remove();
                                            window.gzbjbg = null;
                                        }
                                    },
                                };
                                case '阴阳鱼': return {
                                    content: function () {
                                        if (player.hasMark('yinyang_mark')) {
                                            if (game.me == player) {
                                                var yyy = document.querySelector('.yingyanyubiaoji');
                                                if (yyy) { yyy.parentNode.removeChild(yyy); }
                                            } else {
                                                var aiyyy = document.querySelector('.aiyingyanyubiaoji');
                                                if (aiyyy) { aiyyy.parentNode.removeChild(aiyyy); }
                                            }
                                        } else if (player.hasMark('yexinjia_mark') && player.hasMark('yinyang_mark') < 1) {
                                            if (game.me == player) {
                                                var yxjx = document.querySelector('.yexinjiabiaoji');
                                                if (yxjx) { yxjx.parentNode.removeChild(yxjx); }
                                            } else {
                                                var aiyxjx = document.querySelector('.aiyexinjiabiaoji');
                                                if (aiyxjx) { aiyxjx.parentNode.removeChild(aiyxjx); }
                                            }
                                        }
                                        player.draw();
                                        player.removeMark(player.hasMark('yinyang_mark') ? 'yinyang_mark' : 'yexinjia_mark', 1);
                                        if (game.me == player && player.hasMark('yexinjia_mark') < 1 && player.hasMark('xianqu_mark') < 1 && player.hasMark('yinyang_mark') < 1 && player.hasMark('zhulianbihe_mark') < 1) {
                                            window.gzbjbg.remove();
                                            window.gzbjbg = null;
                                        }
                                    }
                                };
                                case '先驱': return { content: lib.skill.xianqu_mark.content };
                            }
                        },
                    },
                    ai: {
                        order: 1,
                        result: {
                            player: 1,
                        },
                    },
                };
                //先驱
                lib.skill.xianqu_mark = {
                    // intro:{
                    // content:"◇出牌阶段，你可以弃置此标记，然后将手牌摸至四张并观看一名其他角色的一张武将牌。",
                    // },
                    content: function () {
                        "step 0"
                        if (player.hasMark('xianqu_mark')) {
                            if (game.me == player) {
                                var xq = document.querySelector('.xianqubiaoji');
                                if (xq) { xq.parentNode.removeChild(xq); }
                            } else {
                                var aixq = document.querySelector('.xianqubiaojiai');
                                if (aixq) { aixq.parentNode.removeChild(aixq); }
                            }
                        } else if (player.hasMark('yexinjia_mark') && player.hasMark('xianqu_mark') < 1) {
                            if (game.me == player) {
                                var yxjx = document.querySelector('.yexinjiabiaoji');
                                if (yxjx) { yxjx.parentNode.removeChild(yxjx); }
                            } else {
                                var aiyxjx = document.querySelector('.aiyexinjiabiaoji');
                                if (aiyxjx) { aiyxjx.parentNode.removeChild(aiyxjx); }
                            }
                        }
                        player.removeMark(player.hasMark('xianqu_mark') ? 'xianqu_mark' : 'yexinjia_mark', 1);
                        if (game.me == player && player.hasMark('yexinjia_mark') < 1 && player.hasMark('xianqu_mark') < 1 && player.hasMark('yinyang_mark') < 1 && player.hasMark('zhulianbihe_mark') < 1) {
                            window.gzbjbg.remove();
                            window.gzbjbg = null;
                        }
                        var num = 4 - player.countCards('h');
                        if (num) player.draw(num);
                        "step 1"
                        if (game.hasPlayer(function (current) {
                            return current != player && current.isUnseen(2);
                        })) player.chooseTarget('是否观看一名其他角色的一张暗置武将牌？', function (card, player, target) {
                            return target != player && target.isUnseen(2);
                        }).set('ai', function (target) {
                            if (target.isUnseen()) {
                                var next = _status.event.player.getNext();
                                if (target != next) return 10;
                                return 9;
                            }
                            return -get.attitude(_status.event.player, target);
                        });
                        else event.finish();
                        "step 2"
                        if (result.bool) {
                            event.target = result.targets[0];
                            player.line(event.target, 'green');
                            var controls = [];
                            if (event.target.isUnseen(0)) controls.push('主将');
                            if (event.target.isUnseen(1)) controls.push('副将');
                            if (controls.length > 1) {
                                player.chooseControl(controls);
                            }
                            if (controls.length == 0) event.finish();
                        }
                        else {
                            player.removeSkill('xianqu_mark');
                            event.finish();
                        }
                        "step 3"
                        if (result.control) {
                            if (result.control == '主将') {
                                player.viewCharacter(event.target, 0);
                            }
                            else {
                                player.viewCharacter(event.target, 1);
                            }
                        }
                        else if (target.isUnseen(0)) {
                            player.viewCharacter(event.target, 0);
                        }
                        else {
                            player.viewCharacter(event.target, 1);
                        }
                    },
                };
                lib.skill.zhulianbihe_mark = {};
                lib.skill.yinyang_mark = {};
                lib.skill.yexinjia_mark = {};
                lib.translate._guozhan_marks_backup = '标记';
                lib.translate._guozhan_marks = '标记';
                //珠联璧合回血
                lib.skill._zhulianbihe_mark_tao = {
                    ruleSkill: true,
                    enable: "chooseToUse",
                    filter: function (event, player) {
                        return event.type != 'phase' && (player.hasMark('zhulianbihe_mark') || player.hasMark('yexinjia_mark'));
                    },
                    viewAsFilter: function (player) {
                        return player.hasMark('zhulianbihe_mark') || player.hasMark('yexinjia_mark');
                    },
                    viewAs: {
                        name: "tao",
                        isCard: true,
                    },
                    filterCard: function () { return false },
                    selectCard: -1,
                    precontent: function () {
                        if (player.hasMark('zhulianbihe_mark')) {
                            if (game.me == player) {
                                var zlbhx = document.querySelector('.zhulianbihebiaoji');
                                if (zlbhx) { zlbhx.parentNode.removeChild(zlbhx); }
                            } else {
                                var aizlbhx = document.querySelector('.aizhulianbihebiaoji');
                                if (aizlbhx) { aizlbhx.parentNode.removeChild(aizlbhx); }
                            }
                        }
                        else if (player.hasMark('yexinjia_mark') && player.hasMark('zhulianbihe_mark') < 1) {
                            if (game.me == player) {
                                var yxjx = document.querySelector('.yexinjiabiaoji');
                                if (yxjx) { yxjx.parentNode.removeChild(yxjx); }
                            } else {
                                var aiyxjx = document.querySelector('.aiyexinjiabiaoji');
                                if (aiyxjx) { aiyxjx.parentNode.removeChild(aiyxjx); }
                            }
                        }
                        player.removeMark(player.hasMark('zhulianbihe_mark') ? 'zhulianbihe_mark' : 'yexinjia_mark', 1);
                        if (game.me == player && player.hasMark('yexinjia_mark') < 1 && player.hasMark('xianqu_mark') < 1 && player.hasMark('yinyang_mark') < 1 && player.hasMark('zhulianbihe_mark') < 1) {
                            window.gzbjbg.remove();
                            window.gzbjbg = null;
                        }
                    },
                };
                //阴阳鱼手牌上限		
                lib.skill._yinyang_mark_add = {
                    ruleSkill: true,
                    trigger: {
                        player: "phaseDiscardBegin",
                    },
                    filter: function (event, player) {
                        return (player.hasMark('yinyang_mark') || player.hasMark('yexinjia_mark')) && player.needsToDiscard();
                    },
                    prompt: function (event, player) {
                        return '是否弃置一枚【' + (player.hasMark('yinyang_mark') ? '阴阳鱼' : '野心家') + '】标记，使本回合的手牌上限+2？';
                    },
                    content: function () {
                        if (player.hasMark('yinyang_mark')) {
                            if (game.me == player) {
                                var yyyx = document.querySelector('.yingyanyubiaoji');
                                if (yyyx) { yyyx.parentNode.removeChild(yyyx); }
                            } else {
                                var aiyyyx = document.querySelector('.aiyingyanyubiaoji');
                                if (aiyyyx) { aiyyyx.parentNode.removeChild(aiyyyx); }
                            }
                        }
                        else if (player.hasMark('yexinjia_mark') && player.hasMark('yinyang_mark') < 1) {
                            if (game.me == player) {
                                var yxjx = document.querySelector('.yexinjiabiaoji');
                                if (yxjx) { yxjx.parentNode.removeChild(yxjx); }
                            } else {
                                var aiyxjx = document.querySelector('.aiyexinjiabiaoji');
                                if (aiyxjx) { aiyxjx.parentNode.removeChild(aiyxjx); }
                            }
                        }
                        player.addTempSkill('yinyang_add', 'phaseAfter');
                        player.removeMark(player.hasMark('yinyang_mark') ? 'yinyang_mark' : 'yexinjia_mark', 1);
                        if (game.me == player && player.hasMark('yexinjia_mark') < 1 && player.hasMark('xianqu_mark') < 1 && player.hasMark('yinyang_mark') < 1 && player.hasMark('zhulianbihe_mark') < 1) {
                            window.gzbjbg.remove();
                            window.gzbjbg = null;
                        }
                    },
                };
                //国战死亡失去标记		
                lib.skill._guozhan_diebiaoji_ = {
                    trigger: { player: 'dieAfter' },
                    forced: true,
                    silent: true,
                    forceDie: true,
                    content: function () {
                        if (game.me == player) {
                            var yyy = document.querySelector('.yingyanyubiaoji');
                            if (yyy) { yyy.parentNode.removeChild(yyy); }
                            var zlbh = document.querySelector('.zhulianbihebiaoji');
                            if (zlbh) { zlbh.parentNode.removeChild(zlbh); }
                            var xq = document.querySelector('.xianqubiaoji');
                            if (xq) { xq.parentNode.removeChild(xq); }
                            var yxj = document.querySelector('.yexinjiabiaoji');
                            if (yxj) { yxj.parentNode.removeChild(yxj); }
                            if (window.gzbjbg) {
                                window.gzbjbg.remove();
                                window.gzbjbg = null;
                            }
                        }/*else{
        var aiyyy=document.querySelector('.aiyingyanyubiaoji');		
        if (aiyyy) {aiyyy.parentNode.removeChild(aiyyy);}
        var aizlbh=document.querySelector('.aizhulianbihebiaoji');		
        if (aizlbh) {aizlbh.parentNode.removeChild(aizlbh);}
        var aixq=document.querySelector('.xianqubiaojiai');		
        if (aixq) {aixq.parentNode.removeChild(aixq);}
        var aiyxj=document.querySelector('.aiyexinjiabiaoji');		
        if (aiyxj) {aiyxj.parentNode.removeChild(aiyxj);}        
        }*/
                    },
                };
                //国战阵法
                lib.skill._guozhan_duiweibiaoji_gua_ = {
                    trigger: { global: ['showCharacterAfter', 'dieAfter', 'phaseZhunbeiAfter'] },
                    forced: true,
                    silent: true,
                    filter: function (event, player) {
                        return lib.config.mode == 'guozhan';
                    },
                    content: function () {
                        var shang = get.translation(player.getPrevious().group);
                        var xia = get.translation(player.getNext().group);
                        var ziji = get.translation(player.group);
                        if ((xia == ziji && xia != '未知' && ziji != '未知') || (shang == ziji && shang != '未知' && ziji != '未知')) {
                            if (ziji == '魏') { ui.create.div('.guozhanweidui', player); }
                            if (ziji == '蜀') { ui.create.div('.guozhanshudui', player); }
                            if (ziji == '吴') { ui.create.div('.guozhanwudui', player); }
                            if (ziji == '群') { ui.create.div('.guozhanqundui', player); }
                            if (ziji == '晋') { ui.create.div('.guozhanjindui', player); }
                        }
                        //围
                        if (shang == xia && shang != ziji && xia != ziji && shang != '未知' && xia != '未知' && player.getPrevious() != player.getNext()) {
                            ui.create.div('.guozhanwei', player);
                        }
                    },
                };
                //删除阵法
                lib.skill._guozhan_duiweibiaoji_gua_gua_ = {
                    trigger: { global: ['showCharacterEnd', 'dieEnd', 'phaseZhunbeiEnd'] },
                    forced: true,
                    silent: true,
                    forceDie: true,
                    filter: function (event, player) {
                        return lib.config.mode == 'guozhan';
                    },
                    content: function () {
                        var shang = get.translation(player.getPrevious().group);
                        var xia = get.translation(player.getNext().group);
                        var ziji = get.translation(player.group);
                        //if(xia!=ziji&&xia!='未知'&&ziji!='未知'&&shang!=ziji&&shang!='未知'){     
                        for (var i = 0; i < 3; i++) {
                            var scweidui = document.querySelector('.guozhanweidui');
                            if (scweidui) { scweidui.parentNode.removeChild(scweidui); }
                            var scwudui = document.querySelector('.guozhanwudui');
                            if (scwudui) { scwudui.parentNode.removeChild(scwudui); }
                            var scshudui = document.querySelector('.guozhanshudui');
                            if (scshudui) { scshudui.parentNode.removeChild(scshudui); }
                            var scqundui = document.querySelector('.guozhanqundui');
                            if (scqundui) { scqundui.parentNode.removeChild(scqundui); }
                            var scjindui = document.querySelector('.guozhanjindui');
                            if (scjindui) { scjindui.parentNode.removeChild(scjindui); }
                        }
                        // }           
                        // if(shang!=xia && shang!=ziji && xia!=ziji && shang!='未知' && xia!='未知'){
                        for (var i = 0; i < 3; i++) {
                            var scwei = document.querySelector('.guozhanwei');
                            if (scwei) { scwei.parentNode.removeChild(scwei); }
                        }
                        //  }        
                    },
                };
                //军令特效     
                lib.translate.junling = '\0';
                lib.element.content.chooseJunlingFor = function () {
                    'step 0'
                    var list = ['junling1', 'junling2', 'junling3', 'junling4', 'junling5', 'junling6'];
                    list = list.randomGets(2).sort();
                    var dialog = ui.create.dialog('<b><font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>军令<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', [list, 'vcard']);
                    dialog.classList.add('fullheight');
                    for (var i = 0; i < list.length; i++) {
                        var dd = dialog.querySelector('[data-card-name="' + list[i] + '"]');
                        dd.setBackgroundImage('extension/标记补充/group/junling_front.png');
                        dd.style.width = '130px';
                        dd.style.height = '230px';
                        dd.style.top = '30px';
                        dd.classList.add('none');
                    }
                    if (game.me == player) {
                        setTimeout(function () {
                            for (var i = 0; i < list.length; i++) {
                                var dd = dialog.querySelector('[data-card-name="' + list[i] + '"]');
                                dd.setBackgroundImage('none');
                            }
                            decadeUI.animation.playSpine({ name: 'SSZBB_PJN_junling', speed: 0.7, }, { scale: 0.75, x: [0, 0.55], y: [0, 0.58] });
                            decadeUI.animation.playSpine({ name: 'SSZBB_PJN_junling', speed: 0.7, }, { scale: 0.75, x: [0, 0.45], y: [0, 0.58] });
                        },1000);
                        setTimeout(function () {
                            for (var i = 0; i < list.length; i++) {
                                var dd = dialog.querySelector('[data-card-name="' + list[i] + '"]');
                                dd.setBackgroundImage('extension/标记补充/group/' + list[i] + '.png');
                                dd.style.width = '130px';
                                dd.style.height = '245px';
                                dd.style.top = '25px';
                            }
                        }, 1600);
                    }
                    player.chooseButton(1, dialog, true).set('ai', function (button) {
                        return get.junlingEffect(_status.event.player, button.link[2], _status.event.getParent().target, [], _status.event.player);
                    });
                    'step 1'
                    event.result = {
                        junling: result.links[0][2],
                        targets: [],
                    };
                    if (result.links[0][2] == 'junling1') player.chooseTarget('选择一名角色，做为若该军令被执行，受到伤害的角色', true).set('ai', function (_target) {
                        return get.damageEffect(_target, target, player);
                    });
                    'step 2'
                    if (result.targets.length) {
                        player.line(result.targets, 'green');
                        event.result.targets = result.targets;
                    }
                };
                //建国特效        
                lib.game.showYexings = function () {
                    if (_status.showYexings) return;
                    _status.showYexings = true;
                    var next = game.createEvent('showYexings', false);
                    next.setContent(function () {
                        'step 0'
                        event.targets = game.filterPlayer(function (current) {
                            return lib.character[current.name1][1] == 'ye';
                        }).sortBySeat(_status.currentPhase);
                        event.targets2 = [];
                        'step 1'
                        var target = targets.shift();
                        event.target = target;
                        target.chooseBool('是否【暴露野心】，展示主将并继续战斗？', '若选择“否”，则视为本局游戏失败');
                        'step 2'
                        if (result.bool) {
                            event.targets2.push(target);
                            //	target.$fullscreenpop('暴露野心','thunder');
                            game.log(target, '暴露了野心');
                            target.showCharacter(0);
                            //	game.delay(2);
                            if (targets.length) event.goto(1);
                            else if (game.players.length < 3) {
                                delete _status.showYexings;
                                event.finish();
                            }
                        }
                        else {
                            if (targets.length) event.goto(1);
                            else {
                                var winner = game.findPlayer(function (current) {
                                    return lib.character[current.name1][1] != 'ye';
                                });
                                if (winner) {
                                    game.broadcastAll(function (id) {
                                        game.winner_id = id;
                                    }, winner.playerid);
                                    game.checkResult();
                                }
                                delete _status.showYexings;
                                event.finish();
                            }
                        }
                        'step 3'
                        var source = event.targets2.shift();
                        event.source = source;
                        var targets = game.filterPlayer(function (current) {
                            return current.identity != 'ye' && current != source && !get.is.jun(current) && !event.targets2.contains(current) && !current.storage.yexinjia_friend;
                        }).sortBySeat(source);
                        if (!targets.length) {
                            delete _status.showYexings;
                            event.finish();
                        }
                        else {
                            event.targets = targets;
                            source.chooseBool('是否发起【拉拢人心】？', '令所有其他不为君主/暴露野心家的角色依次选择是否与你结盟。第一个选择加入的人将势力和胜利条件改为与你相同');
                        }
                        'step 4'
                        if (!result.bool) {
                            if (event.targets2.length) event.goto(3);
                            return;
                        }
                        'step 5'
                        var target = targets.shift();
                        event.target = target;
                        source.line(target, 'green');
                        target.chooseBool('是否响应' + get.translation(source) + '发起的【拉拢人心】？', '将势力改为野心家，且视为和该角色阵营相同').set('ai', function () {
                            if (game.players.length < 4) return true;
                            if (game.players.length < 5) return Math.random() < 0.5;
                            return Math.random() < 0.3;
                        });
                        'step 6'
                        if (result.bool) {
                            target.chat('加入');
                            var list = ['qin', 'qi', 'chu', 'yan', 'zhao', 'han', 'jing', 'hang', 'xia', 'shang', 'zhou', 'liang'];
                            var dialog = ui.create.dialog('<b><font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>请选择国籍<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', [list, 'vcard']);
                            source.chooseButton(1, dialog).set('ai', () => (list.randomGet()));
                            for (var i = 0; i < list.length; i++) {
                                var dd = dialog.querySelector('[data-card-name="' + list[i] + '"]');
                                dd.setBackgroundImage('extension/标记补充/group/' + list[i] + 'x.png');
                                dd.style.width = '130px';
                                dd.style.height = '130px';
                                dd.style['border-radius'] = '100%';
                                dd.style['background-size'] = "100% 100%";
                                dd.style.margin = '15px';
                                dd.classList.add('none');
                            }
                        }
                        else {
                            target.chat('拒绝');
                            game.delay(1.5);
                            if (targets.length) event.goto(5);
                            else event.goto(8);
                        }
                        'step 7'
                        game.broadcastAll(function (player, target, text) {
                            player.identity = 'ye';
                            source.setIdentity(text, 'ye');
                            player.setIdentity(text, 'ye');
                            player.storage.yexinjia_friend = target;
                        }, target, source, result.links[0][2]);
                        //_status.yexinjia_list.remove(result.control);
                        target.markSkill('yexinjia_friend');
                        source.removeMark('yexinjia_mark', 1);
                        target.drawTo(4);
                        target.recover();
                        'step 8'
                        if (event.targets2.length) { event.goto(3); }
                        else {
                            delete _status.showYexings;
                            //decadeUI.animation.playSpine({ name: 'jianguo', speed: 1, }, { scale: 1 });
                            dcdAnim.loadSpine(xixiguagua.jianguo.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.jianguo, { speed: 1, scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/yexinjia.mp3');
                            game.delay(4);
                            if (game.me == source) {
                                var yxjxx = document.querySelector('.yexinjiabiaoji');
                                if (yxjxx) { yxjxx.parentNode.removeChild(yxjxx); }
                            } else {
                                var aiyxjxx = document.querySelector('.aiyexinjiabiaoji');
                                if (aiyxjxx) { aiyxjxx.parentNode.removeChild(aiyxjxx); }
                            }
                            if (game.me == source && source.hasMark('yexinjia_mark') < 1 && source.hasMark('xianqu_mark') < 1 && source.hasMark('yinyang_mark') < 1 && source.hasMark('zhulianbihe_mark') < 1) {
                                window.gzbjbg.remove();
                                window.gzbjbg = null;
                            }
                        }
                    });
                };
                //鏖战模式
                lib.skill._aozhan_judge = {
                    trigger: {
                        player: "phaseBefore",
                    },
                    forced: true,
                    priority: 22,
                    filter: function (event, player) {
                        if (get.mode() != 'guozhan') return false;
                        if (_status.connectMode && !lib.configOL.aozhan) return false;
                        else if (!_status.connectMode && !get.config('aozhan')) return false;
                        if (_status._aozhan) return false;
                        if (game.players.length > 4) return false;
                        if (game.players.length > 3 && game.players.length + game.dead.length <= 7) return false;
                        for (var i = 0; i < game.players.length; i++) {
                            for (var j = i + 1; j < game.players.length; j++) {
                                if (game.players[i].isFriendOf(game.players[j])) return false;
                            }
                        }
                        return true;
                    },
                    content: function () {
                        //decadeUI.animation.playSpine({ name: 'aozhan', speed: 1, }, { scale: 1.2 });
                        dcdAnim.loadSpine(xixiguagua.aozhan.name, "skel", function () {
                        dcdAnim.playSpine(xixiguagua.aozhan, { speed: 1, scale: 1.2 });
                        });
                        game.playAudio('../extension/标记补充/audio/aozhan.mp3');
                        //decadeUI.animation.playSpine({ name: 'aozhan_huo', speed: 0.9, loop: true, }, { scale: 0.95 });
                        dcdAnim.loadSpine(xixiguagua.aozhan_huo.name, "skel", function () {
                        xixiguagua.aozhan_huo.loop=true;
                        dcdAnim.playSpine(xixiguagua.aozhan_huo, { speed: 0.9, scale: 0.95 });
                        });
                        game.delay(2.5);
                        var color = get.groupnature(player.group, "raw");
                        if (player.isUnseen()) color = 'fire';
                        //	player.$fullscreenpop('鏖战模式',color); 
                        game.broadcastAll(function () {
                            _status._aozhan = true;
                            ui.aozhan = ui.create.div('.touchinfo.left', ui.window);
                            //	ui.aozhan.innerHTML='鏖战模式';
                            if (ui.time3) ui.time3.style.display = 'none';
                            ui.aozhanInfo = ui.create.system('鏖战模式', null, true);
                            lib.setPopped(ui.aozhanInfo, function () {
                                var uiintro = ui.create.dialog('hidden');
                                uiintro.add('鏖战模式');
                                var list = [
                                    '当游戏中仅剩四名或更少角色时（七人以下游戏时改为三名或更少），若此时全场没有超过一名势力相同的角色，则从一个新的回合开始，游戏进入鏖战模式直至游戏结束。',
                                    '在鏖战模式下，任何角色均不是非转化的【桃】的合法目标。【桃】可以被当做【杀】或【闪】使用或打出。',
                                    '进入鏖战模式后，即使之后有两名或者更多势力相同的角色出现，仍然不会取消鏖战模式。'
                                ];
                                var intro = '<ul style="text-align:left;margin-top:0;width:450px">';
                                for (var i = 0; i < list.length; i++) {
                                    intro += '<li>' + list[i];
                                }
                                intro += '</ul>'
                                uiintro.add('<div class="text center">' + intro + '</div>');
                                var ul = uiintro.querySelector('ul');
                                if (ul) {
                                    ul.style.width = '180px';
                                }
                                uiintro.add(ui.create.div('.placeholder'));
                                return uiintro;
                            }, 250);
                            game.playBackgroundMusic();
                        });
                        game.countPlayer(function (current) { current.addSkill('aozhan') });
                    },
                };

            };//国战美化尾
            //2v2布局
            if (config.ervermaihua && lib.config.mode == 'versus' && get.config('versus_mode') == 'two') {
                // JavaScript source code
                lib.game.chooseCharacterTwo = function () {
                    var next = game.createEvent('chooseCharacter', false);
                    next.showConfig = true;
                    next.setContent(function () {
                        'step 0'
                        ui.arena.classList.add('choose-character');
                        for (var i in lib.skill) {
                            if (lib.skill[i].changeSeat) {
                                lib.skill[i] = {};
                                if (lib.translate[i + '_info']) {
                                    lib.translate[i + '_info'] = '此模式下不可用';
                                }
                            }
                        }//不是重点
                        var bool = Math.random() < 0.5;
                        var bool2 = Math.random() < 0.5;
                        var ref = game.players[0];
                        //side用于判断敌方友方，友方会是false，敌方true
                        ref.side = bool;
                        ref.next.side = bool2;
                        ref.next.next.side = !bool;
                        ref.previous.side = !bool2;
                        //第一个选择，进入模式时随机确定一号位
                        var firstChoose = game.players.randomGet();
                        //
                        if (firstChoose.next.side == firstChoose.side) {
                            firstChoose = firstChoose.next;
                        }
                        //显示四个人的号位
                        _status.firstAct = firstChoose;
                        for (var i = 0; i < 4; i++) {
                            firstChoose.node.name.innerHTML = get.verticalStr(get.cnNumber(i + 1, true) + '号位');//选将时武将上的号位显示
                            firstChoose = firstChoose.next;
                        }
                        //根据side判断友方敌方
                        for (var i = 0; i < game.players.length; i++) {
                            if (game.players[i].side == game.me.side) {
                                game.players[i].node.identity.firstChild.innerHTML = '友';
                            }
                            else {
                                game.players[i].node.identity.firstChild.innerHTML = '敌';
                            }
                            game.players[i].node.identity.dataset.color = game.players[i].side + 'zhu';
                        }
                        //22选将框分配
                        var list = [];
                        var list4 = [];
                        for (i in lib.characterReplace) {
                            var ix = lib.characterReplace[i];
                            for (var j = 0; j < ix.length; j++) {
                                if (lib.filter.characterDisabled(ix[j])) ix.splice(j--, 1);
                            }
                            if (ix.length) {
                                list.push(i);
                                list4.addArray(ix);
                            }
                        }
                        for (i in lib.character) {
                            if (!list4.contains(i) && !lib.filter.characterDisabled(i)) {
                                list.push(i);
                                list4.push(i);
                            }
                        }
                        var choose = [];
                        event.list = list;
                        _status.characterlist = list4;
                        var one = _status.firstAct;
                        //手动修改进入时的布局
                        var xia = game.me.next;
                        var xxia = game.me.next.next;
                        var shang = game.me.previous;
                        if (game.me == _status.firstAct) {//主一号位
                            xia.style.right = '250px';
                            xia.style.top = '20px';
                            xia.style.left = 'auto';
                            xxia.style.right = '400px';
                            xxia.style.top = '20px';
                            xxia.style.left = 'auto';
                            ui.create.div('.game_friend_gua', shang);
                            ui.create.div('.game_friend_gua', game.me);
                            ui.create.div('.game_enemy_gua', xia);
                            ui.create.div('.game_enemy_gua', xxia);
                            var cksp = ui.create.div('.chakanshoupai', shang);
                            cksp.onclick = function () {
                                if (shang.getCards('h').length > 0) {
                                    var popuperContainer = ui.create.div('.popup-container', ui.window);
                                    var shoupai = ui.create.dialog('<font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>队友手牌<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=position:relative;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', shang.getCards('h'));
                                    popuperContainer.addEventListener('click', event => {
                                        popuperContainer.delete(200);
                                        shoupai.delete(200);
                                    });
                                }
                            }
                        }
                        else if (game.me.previous == _status.firstAct) {//主二号位
                            xia.style.right = '20px';
                            xia.style.top = '130px';
                            xia.style.left = 'auto';
                            xxia.style.left = '180px';
                            xxia.style.top = '50px';
                            xxia.style.right = 'auto';
                            ui.create.div('.game_friend_gua', xia);
                            ui.create.div('.game_friend_gua', game.me);
                            ui.create.div('.game_enemy_gua', shang);
                            ui.create.div('.game_enemy_gua', xxia);
                            var cksp = ui.create.div('.chakanshoupaix', xia);
                            cksp.onclick = function () {
                                if (xia.getCards('h').length > 0) {
                                    var popuperContainer = ui.create.div('.popup-container', ui.window);
                                    var shoupai = ui.create.dialog('<font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>队友手牌<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=position:relative;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', xia.getCards('h'));
                                    popuperContainer.addEventListener('click', event => {
                                        popuperContainer.delete(200);
                                        shoupai.delete(200);
                                    });
                                }
                            }
                        }
                        else if (game.me.next == _status.firstAct) {//主视角四号位
                            xia.style.right = '20px';
                            xia.style.top = '130px';
                            xia.style.left = 'auto';
                            xxia.style.left = '180px';
                            xxia.style.top = '50px';
                            xxia.style.right = 'auto';
                            ui.create.div('.game_friend_gua', xia);
                            ui.create.div('.game_friend_gua', game.me);
                            ui.create.div('.game_enemy_gua', shang);
                            ui.create.div('.game_enemy_gua', xxia);
                            var cksp = ui.create.div('.chakanshoupaix', xia);
                            cksp.onclick = function () {
                                if (xia.getCards('h').length > 0) {
                                    var popuperContainer = ui.create.div('.popup-container', ui.window);
                                    var shoupai = ui.create.dialog('<font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>队友手牌<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=position:relative;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', xia.getCards('h'));
                                    popuperContainer.addEventListener('click', event => {
                                        popuperContainer.delete(200);
                                        shoupai.delete(200);
                                    });
                                }
                            }
                        }
                        else if (game.me.next.next == _status.firstAct) {//主视角三号位
                            xia.style.right = '250px';
                            xia.style.top = '20px';
                            xia.style.left = 'auto';
                            xxia.style.right = '400px';
                            xxia.style.top = '20px';
                            xxia.style.left = 'auto';
                            ui.create.div('.game_friend_gua', shang);
                            ui.create.div('.game_friend_gua', game.me);
                            ui.create.div('.game_enemy_gua', xia);
                            ui.create.div('.game_enemy_gua', xxia);
                            var cksp = ui.create.div('.chakanshoupai', shang);
                            cksp.onclick = function () {
                                if (shang.getCards('h').length > 0) {
                                    var popuperContainer = ui.create.div('.popup-container', ui.window);
                                    var shoupai = ui.create.dialog('<font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>队友手牌<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=position:relative;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', shang.getCards('h'));
                                    popuperContainer.addEventListener('click', event => {
                                        popuperContainer.delete(200);
                                        shoupai.delete(200);
                                    });
                                }
                            }
                        }

                        //选座位
                        var addSetting = function (dialog) {
                            dialog.add('选择座位').classList.add('add-setting');
                            var seats = document.createElement('table');
                            seats.classList.add('add-setting');
                            seats.style.margin = '0';
                            seats.style.width = '100%';
                            seats.style.position = 'relative';
                            for (var i = 1; i <= game.players.length; i++) {
                                var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                td.innerHTML = get.cnNumber(i, true);
                                td.link = i - 1;
                                seats.appendChild(td);
                                if (get.distance(_status.firstAct, game.me, 'absolute') === i - 1) {
                                    td.classList.add('bluebg');
                                }
                                td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {
                                    if (_status.dragged) return;
                                    if (_status.justdragged) return;
                                    if (get.distance(_status.firstAct, game.me, 'absolute') == this.link) return;
                                    var current = this.parentNode.querySelector('.bluebg');
                                    if (current) {
                                        current.classList.remove('bluebg');
                                    }
                                    this.classList.add('bluebg');
                                    /* */
                                    _status.firstAct = game.me;
                                    /* */
                                    for (var i = 0; i < this.link; i++) {
                                        _status.firstAct = _status.firstAct.previous;
                                    }//确定第一名行动的人
                                    var firstChoose = _status.firstAct;
                                    firstChoose.next.side = !firstChoose.side;
                                    firstChoose.next.next.side = !firstChoose.side;
                                    firstChoose.previous.side = firstChoose.side;
                                    //选座位之后分配身份，友友敌敌
                                    for (var i = 0; i < game.players.length; i++) {
                                        if (game.players[i].side == game.me.side) {
                                            game.players[i].node.identity.firstChild.innerHTML = '友';
                                        }
                                        else {
                                            game.players[i].node.identity.firstChild.innerHTML = '敌';
                                        }
                                        game.players[i].node.identity.dataset.color = game.players[i].side + 'zhu';
                                    }
                                    for (var i = 0; i < 4; i++) {
                                        firstChoose.node.name.innerHTML = get.verticalStr(get.cnNumber(i + 1, true) + '号位');
                                        firstChoose = firstChoose.next;
                                    }
                                    var one = _status.firstAct;//没有用
                                    //再次修改自由选择位置之后的布局
                                    var xia = game.me.next;
                                    var xxia = game.me.next.next;
                                    var shang = game.me.previous;
                                    var shoupaixx = document.querySelector('.chakanshoupai');
                                    if (shoupaixx) { shoupaixx.parentNode.removeChild(shoupaixx); }
                                    var shoupaixxx = document.querySelector('.chakanshoupaix');
                                    if (shoupaixxx) { shoupaixxx.parentNode.removeChild(shoupaixxx); }
                                    for (var i = 0; i < 5; i++) {
                                        var huduixxx = document.querySelector('.game_friend_gua');
                                        if (huduixxx) { huduixxx.parentNode.removeChild(huduixxx); }
                                        var longduixxx = document.querySelector('.game_enemy_gua');
                                        if (longduixxx) { longduixxx.parentNode.removeChild(longduixxx); }
                                    }
                                    if (game.me == _status.firstAct) {//主一号位
                                        xia.style.right = '250px';
                                        xia.style.top = '20px';
                                        xia.style.left = 'auto';
                                        xxia.style.right = '400px';
                                        xxia.style.top = '20px';
                                        xxia.style.left = 'auto';
                                        ui.create.div('.game_friend_gua', shang);
                                        ui.create.div('.game_friend_gua', game.me);
                                        ui.create.div('.game_enemy_gua', xia);
                                        ui.create.div('.game_enemy_gua', xxia);
                                        var cksp = ui.create.div('.chakanshoupai', shang);
                                        cksp.onclick = function () {
                                            if (shang.getCards('h').length > 0) {
                                                var popuperContainer = ui.create.div('.popup-container', ui.window);
                                                var shoupai = ui.create.dialog('<font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>队友手牌<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=position:relative;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', shang.getCards('h'));
                                                popuperContainer.addEventListener('click', event => {
                                                    popuperContainer.delete(200);
                                                    shoupai.delete(200);
                                                });
                                            }
                                        }
                                    }
                                    else if (game.me.previous == _status.firstAct) {//主二号位
                                        xia.style.right = '20px';
                                        xia.style.top = '130px';
                                        xia.style.left = 'auto';
                                        xxia.style.left = '180px';
                                        xxia.style.top = '50px';
                                        xxia.style.right = 'auto';
                                        ui.create.div('.game_friend_gua', xia);
                                        ui.create.div('.game_friend_gua', game.me);
                                        ui.create.div('.game_enemy_gua', shang);
                                        ui.create.div('.game_enemy_gua', xxia);
                                        var cksp = ui.create.div('.chakanshoupaix', xia);
                                        cksp.onclick = function () {
                                            if (xia.getCards('h').length > 0) {
                                                var popuperContainer = ui.create.div('.popup-container', ui.window);
                                                var shoupai = ui.create.dialog('<font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>队友手牌<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=position:relative;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', xia.getCards('h'));
                                                popuperContainer.addEventListener('click', event => {
                                                    popuperContainer.delete(200);
                                                    shoupai.delete(200);
                                                });
                                            }
                                        }
                                    }
                                    else if (game.me.next == _status.firstAct) {//主视角四号位
                                        xia.style.right = '20px';
                                        xia.style.top = '130px';
                                        xia.style.left = 'auto';
                                        xxia.style.left = '180px';
                                        xxia.style.top = '50px';
                                        xxia.style.right = 'auto';
                                        ui.create.div('.game_friend_gua', xia);
                                        ui.create.div('.game_friend_gua', game.me);
                                        ui.create.div('.game_enemy_gua', shang);
                                        ui.create.div('.game_enemy_gua', xxia);
                                        var cksp = ui.create.div('.chakanshoupaix', xia);
                                        cksp.onclick = function () {
                                            if (xia.getCards('h').length > 0) {
                                                var popuperContainer = ui.create.div('.popup-container', ui.window);
                                                var shoupai = ui.create.dialog('<font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>队友手牌<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=position:relative;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', xia.getCards('h'));
                                                popuperContainer.addEventListener('click', event => {
                                                    popuperContainer.delete(200);
                                                    shoupai.delete(200);
                                                });
                                            }
                                        }
                                    }
                                    else if (game.me.next.next == _status.firstAct) {//主视角三号位
                                        xia.style.right = '250px';
                                        xia.style.top = '20px';
                                        xia.style.left = 'auto';
                                        xxia.style.right = '400px';
                                        xxia.style.top = '20px';
                                        xxia.style.left = 'auto';
                                        ui.create.div('.game_friend_gua', shang);
                                        ui.create.div('.game_friend_gua', game.me);
                                        ui.create.div('.game_enemy_gua', xia);
                                        ui.create.div('.game_enemy_gua', xxia);
                                        var cksp = ui.create.div('.chakanshoupai', shang);
                                        cksp.onclick = function () {
                                            if (shang.getCards('h').length > 0) {
                                                var popuperContainer = ui.create.div('.popup-container', ui.window);
                                                var shoupai = ui.create.dialog('<font color=\"#f1d977\",font size=5px,font family=HYZLSJ,font weight=bolder,top=-10px,>队友手牌<img src=' + lib.assetURL + 'extension/标记补充/image/' + 'arrow.png' + ' style=position:relative;width:30px;height:25px;margin-bottom:-5px;left:2px;/>', shang.getCards('h'));
                                                popuperContainer.addEventListener('click', event => {
                                                    popuperContainer.delete(200);
                                                    shoupai.delete(200);
                                                });
                                            }
                                        }
                                    }

                                });
                            }
                            dialog.content.appendChild(seats);
                            //不清楚
                            if (game.me == game.zhu) {
                                seats.previousSibling.style.display = 'none';
                                seats.style.display = 'none';
                            }

                            dialog.add(ui.create.div('.placeholder.add-setting'));
                            dialog.add(ui.create.div('.placeholder.add-setting'));
                            if (get.is.phoneLayout()) dialog.add(ui.create.div('.placeholder.add-setting'));
                        };
                        //下面的功能暂且不修改
                        var removeSetting = function () {
                            var dialog = _status.event.dialog;
                            if (dialog) {
                                dialog.style.height = '';
                                delete dialog._scrollset;
                                var list = Array.from(dialog.querySelectorAll('.add-setting'));
                                while (list.length) {
                                    list.shift().remove();
                                }
                                ui.update();
                            }
                        };
                        event.addSetting = addSetting;
                        event.removeSetting = removeSetting;

                        var characterChoice;
                        if (_status.brawl && _status.brawl.chooseCharacter) {
                            characterChoice = _status.brawl.chooseCharacter(list, game.me);
                        }
                        else {
                            characterChoice = list.randomGets(7);
                        }
                        var basenum = 1;
                        var basestr = '选择角色';
                        if (get.config('two_assign')) {
                            basenum = 2;
                            basestr = '选择你和队友的角色';
                            event.two_assign = true;
                        }
                        if (get.config('replace_character_two')) {
                            basestr += '（含一名替补角色）';
                            _status.replacetwo = true;
                            game.additionaldead = [];
                            basenum *= 2;
                        }
                        var dialog = ui.create.dialog(basestr, [characterChoice, 'characterx']);
                        game.me.chooseButton(true, dialog, basenum).set('onfree', true);
                        if (!_status.brawl || !_status.brawl.noAddSetting) {
                            if (get.config('change_identity')) {
                                addSetting(dialog);
                            }
                        }

                        ui.create.cheat = function () {
                            _status.createControl = ui.cheat2;
                            ui.cheat = ui.create.control('更换', function () {
                                if (ui.cheat2 && ui.cheat2.dialog == _status.event.dialog) {
                                    return;
                                }
                                if (game.changeCoin) {
                                    game.changeCoin(-3);
                                }
                                var buttons = ui.create.div('.buttons');
                                var node = _status.event.dialog.buttons[0].parentNode;
                                _status.event.dialog.buttons = ui.create.buttons(list.randomGets(7), 'characterx', buttons);
                                _status.event.dialog.content.insertBefore(buttons, node);
                                buttons.animate('start');
                                node.remove();
                                game.uncheck();
                                game.check();
                            });
                            delete _status.createControl;
                        };
                        if (lib.onfree) {
                            lib.onfree.push(function () {
                                event.dialogxx = ui.create.characterDialog('heightset');
                                if (ui.cheat2) {
                                    ui.cheat2.animate('controlpressdownx', 500);
                                    ui.cheat2.classList.remove('disabled');
                                }
                            });
                        }
                        else {
                            event.dialogxx = ui.create.characterDialog('heightset');
                        }
                        ui.create.cheat2 = function () {
                            ui.cheat2 = ui.create.control('自由选将', function () {
                                if (this.dialog == _status.event.dialog) {
                                    if (game.changeCoin) {
                                        game.changeCoin(50);
                                    }
                                    this.dialog.close();
                                    _status.event.dialog = this.backup;
                                    this.backup.open();
                                    delete this.backup;
                                    game.uncheck();
                                    game.check();
                                    if (ui.cheat) {
                                        ui.cheat.animate('controlpressdownx', 500);
                                        ui.cheat.classList.remove('disabled');
                                    }
                                }
                                else {
                                    if (game.changeCoin) {
                                        game.changeCoin(-10);
                                    }
                                    this.backup = _status.event.dialog;
                                    _status.event.dialog.close();
                                    _status.event.dialog = _status.event.parent.dialogxx;
                                    this.dialog = _status.event.dialog;
                                    this.dialog.open();
                                    game.uncheck();
                                    game.check();
                                    if (ui.cheat) {
                                        ui.cheat.classList.add('disabled');
                                    }
                                }
                            });
                            ui.cheat2.classList.add('disabled');
                        }
                        if (!_status.brawl || !_status.brawl.chooseCharacterFixed) {
                            if (!ui.cheat && get.config('change_choice')) {
                                ui.create.cheat();
                            }
                            if (!ui.cheat2 && get.config('free_choose')) {
                                ui.create.cheat2();
                            }
                        }
                        'step 1'
                        if (ui.cheat) {
                            ui.cheat.close();
                            delete ui.cheat;
                        }
                        if (ui.cheat2) {
                            ui.cheat2.close();
                            delete ui.cheat2;
                        }
                        for (var i = 0; i < result.links.length; i++) {
                            game.addRecentCharacter(result.links[i]);
                        }
                        game.me.init(result.links[0]);
                        if (_status.replacetwo) {
                            game.me.replacetwo = result.links[1];
                        }
                        event.list.remove(game.me.name1);
                        for (var i = 0; i < game.players.length; i++) {
                            if (game.players[i] != game.me) {
                                if (_status.brawl && _status.brawl.chooseCharacter) {
                                    var list = _status.brawl.chooseCharacter(event.list, game.players[i]);
                                    game.players[i].init(list.randomGet());
                                    event.list.remove(game.players[i].name1);
                                    if (_status.replacetwo) {
                                        game.players[i].replacetwo = list.randomGet(game.players[i].name1);
                                        event.list.remove(game.players[i].replacetwo);
                                    }
                                }
                                else {
                                    if (event.two_assign && game.players[i].side == game.me.side) {
                                        if (_status.replacetwo) {
                                            game.players[i].init(result.links[2]);
                                            game.players[i].replacetwo = result.links[3];
                                        }
                                        else {
                                            game.players[i].init(result.links[1]);
                                        }
                                    }
                                    else {
                                        var name = event.list.randomRemove();
                                        if (lib.characterReplace[name] && lib.characterReplace[name].length) name = lib.characterReplace[name].randomGet();
                                        game.players[i].init(name);
                                        if (_status.replacetwo) {
                                            var name2 = event.list.randomRemove();
                                            if (lib.characterReplace[name2] && lib.characterReplace[name2].length) name2 = lib.characterReplace[name2].randomGet();
                                            game.players[i].replacetwo = name2;
                                        }
                                    }
                                }
                            }
                        }
                        for (var i = 0; i < game.players.length; i++) {
                            _status.characterlist.remove(game.players[i].name1);
                            _status.characterlist.remove(game.players[i].replacetwo);
                        }
                        setTimeout(function () {
                            ui.arena.classList.remove('choose-character');
                        }, 500);

                        if (get.config('two_phaseswap')) {
                            game.addGlobalSkill('autoswap');
                            if (lib.config.show_handcardbutton) {
                                ui.versushs = ui.create.system('手牌', null, true);
                                lib.setPopped(ui.versushs, game.versusHoverHandcards, 220);
                            }
                        }
                    });
                }
                lib.skill._duijuemoshi_gxshoupai = {
                    trigger: {
                        player: ["gainEnd", "loseEnd", "dieBefore", "useCardEnd", "respondEnd"],
                    },
                    silent: true,
                    forced: true,
                    charlotte: true,
                    content: function () {
                        var xjx = document.querySelector(".chakanshoupai");
                        var xjxj = document.querySelector(".chakanshoupaix");
                        var xia = game.me.next;
                        var shang = game.me.previous;
                        if (xjx) {
                            xjx.innerHTML = '';
                            for (var i = 0; i < shang.getCards('h').length; i++) {
                                if (i <= 3) {
                                    xjx.innerHTML += get.translation(shang.getCards('h')[i].name).slice(0, 2) + '<br>'
                                }
                                if (i == 4) {
                                    xjx.innerHTML += '…'
                                }
                            }
                            if (trigger.name == "die" && trigger.player == shang) {
                                if (xjx) { xjx.parentNode.removeChild(xjx); }
                            }
                        } else if (xjxj) {
                            xjxj.innerHTML = '';
                            for (var i = 0; i < xia.getCards('h').length; i++) {
                                if (i <= 3) {
                                    xjxj.innerHTML += get.translation(xia.getCards('h')[i].name).slice(0, 2) + '<br>'
                                }
                                if (i == 4) {
                                    xjxj.innerHTML += '…'
                                }
                            }
                            if (trigger.name == "die" && trigger.player == xia) {
                                if (xjxj) { xjxj.parentNode.removeChild(xjxj); }
                            }
                        }
                    },
                };
            };
            //体力样式
            if (config.guozhanmeihua) {
                if (lib.config.mode == 'guozhan') {
                    lib.configMenu.appearence.config.hp_style.onclick('round');
                } else {
                    lib.configMenu.appearence.config.hp_style.onclick('glass');
                }
            };
            //体力翻倍
            if (config.xlfbmoshi) {
                lib.skill._xigua_xueliangfanbei_ = {
                    trigger: {
                        global: "gameStart",
                    },
                    silent: true,
                    charlotte: true,
                    forced: true,
                    content: function () {
                        player.gainMaxHp(player.hp);
                        player.recover(player.hp);
                    },
                };
            };
            //摸牌翻倍
            if (config.mpfbmoshi) {
                lib.skill._xigua_mopaifanbei_ = {
                    trigger: {
                        player: "phaseDrawBegin2",
                    },
                    silent: true,
                    charlotte: true,
                    forced: true,
                    content: function () {
                        trigger.num += 2;
                    },
                };
            };
            //主亡忠继
            if (config.zhujizhongwang && lib.config.mode == 'identity') {
                lib.skill._xigua_zhuwanzhongji_ = {
                    charlotte: true,
                    trigger: {
                        global: "dieBegin",
                    },
                    forced: true,
                    filter: function (event, player) {
                        return event.player.identity == 'zhu' && (player.identity == 'zhong' || player.identity == 'mingzhong');
                    },
                    logTarget: "player",
                    content: function () {
                        game.broadcastAll(function (player, target) {
                            target.identity = player.identity;
                            if (player.identity == 'mingzhong') game.zhong = target;
                            delete target.isZhu;
                            player.identity = 'zhu';
                            game.zhu = player;
                            player.showIdentity();
                            target.showIdentity();
                        }, player, trigger.player);
                        event.trigger('zhuUpdate');
                    },
                };
            };


            if (config.jishatexiao == 'shousha') {
                //手杀击杀特效
                if (config.shoushajishatexiao) {
                    lib.skill._shoushajisha_ = {
                        trigger: {
                            source: "dieBegin",
                        },
                        silent: true,
                        charlotte: true,
                        forced: true,
                        priority: 2022,
                        content: function () {
                if (!player.storage._shoushajisha_) player.storage._shoushajisha_ = 0;
                            player.storage._shoushajisha_++
                            //一破
                if (player.storage._shoushajisha_ == 1) {
                                if (player.storage._shoushajisha_3 == true) { event.finish(); return; }
                                for (var i of game.players) i.storage._shoushajisha_3 = true;
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "yipo",
                                //    scale: 0.8,
                                //});
                                dcdAnim.loadSpine(xixiguagua.shoushajisha.name, "skel", function () {
                                    xixiguagua.shoushajisha.action = 'play1';
                                    dcdAnim.playSpine(xixiguagua.shoushajisha, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/a_yipo.mp3');
                                //游戏暂停
                                game.delay(4);
                            }
                            //双连
                            if (player.storage._shoushajisha_ == 2) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "shuanglian",
                                //    scale: 0.8
                                //});
                                dcdAnim.loadSpine(xixiguagua.shoushajisha.name, "skel", function () {
                                    xixiguagua.shoushajisha.action = 'play2';
                                    dcdAnim.playSpine(xixiguagua.shoushajisha, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/a_shuanglian.mp3');
                                //二连斩
                                //decadeUI.animation.playSpine({ name: 'erlianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.erlianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.erlianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4);
                            }
                            //三连
                            if (player.storage._shoushajisha_ == 3) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "sanlian",
                                //    scale: 0.8
                                //});
                                dcdAnim.loadSpine(xixiguagua.shoushajisha.name, "skel", function () {
                                    xixiguagua.shoushajisha.action = 'play3';
                                    dcdAnim.playSpine(xixiguagua.shoushajisha, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/a_sanlian.mp3');
                                //三连斩
                                //decadeUI.animation.playSpine({ name: 'sanlianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.sanlianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.sanlianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                            //四连
                            if (player.storage._shoushajisha_ == 4) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "silian",
                                //    scale: 0.8
                                //});
                                dcdAnim.loadSpine(xixiguagua.shoushajisha.name, "skel", function () {
                                    xixiguagua.shoushajisha.action = 'play4';
                                    dcdAnim.playSpine(xixiguagua.shoushajisha, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/a_silian.mp3');
                                //四连斩
                                //decadeUI.animation.playSpine({ name: 'silianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.silianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.silianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                            //五连
                            if (player.storage._shoushajisha_ == 5) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "wulian",
                                //    scale: 0.8, speed: 0.9
                                //});
                                dcdAnim.loadSpine(xixiguagua.shoushajisha.name, "skel", function () {
                                    xixiguagua.shoushajisha.speed = 0.8;
                                    xixiguagua.shoushajisha.action = 'play5';
                                    dcdAnim.playSpine(xixiguagua.shoushajisha, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/a_wulian.mp3');
                                //五连斩
                                //decadeUI.animation.playSpine({ name: 'wulianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.wulianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.wulianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                            //六连
                            if (player.storage._shoushajisha_ == 6) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "liulian",
                                //    scale: 0.8, speed: 0.9
                                //});
                                dcdAnim.loadSpine(xixiguagua.shoushajisha.name, "skel", function () {
                                    xixiguagua.shoushajisha.speed = 0.8;
                                    xixiguagua.shoushajisha.action = 'play6';
                                    dcdAnim.playSpine(xixiguagua.shoushajisha, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/a_liulian.mp3');
                                //六连斩
                                //decadeUI.animation.playSpine({ name: 'liulianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.liulianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.liulianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                            //七连
                            if (player.storage._shoushajisha_ >= 7) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "qilian",
                                //    scale: 0.8, speed: 0.9
                                //});
                                dcdAnim.loadSpine(xixiguagua.shoushajisha.name, "skel", function () {
                                    xixiguagua.shoushajisha.speed = 0.8;
                                    xixiguagua.shoushajisha.action = 'play7';
                                    dcdAnim.playSpine(xixiguagua.shoushajisha, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/a_qilian.mp3');
                                //七连斩
                                //decadeUI.animation.playSpine({ name: 'qilianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.qilianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.qilianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                        },
                    };
                    lib.skill._shoushajisha_delete_ = {
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        silent: true,
                        charlotte: true,
                        forced: true,
                        content: function () {
                            delete player.storage._shoushajisha_;
                        },
                    };
                    //癫狂屠戮
                    lib.skill._diankuangtulu_gua = {
                        trigger: {
                            source: 'damageBegin4',
                        },
                        charlotte: true,
                        forced: true,
                        filter: function (event, player) {
                            return event.num == 3;
                        },
                        content: function () {
                            //   decadeUI.animation.playSpine({ name:'diankuangtulu',scale: 0.5,});
                            dcdAnim.loadSpine(xixiguagua.diankuangtulu.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.diankuangtulu, { scale: 0.9,y: [0, 0.47] });
                            });
                            game.playAudio('../extension/标记补充/audio/diankuangtulu.mp3');
                        },
                    };

                    //无双万军取首
                    lib.skill._wanjunqushou_gua = {
                        trigger: {
                            source: 'damageBegin4',
                        },
                        charlotte: true,
                        forced: true,
                        filter: function (event, player) {
                            return event.num >= 4;
                        },
                        content: function () {
                            //decadeUI.animation.playSpine({ name:'wanjunqushou',scale: 0.5,y: [0, 0.75],});
                            dcdAnim.loadSpine(xixiguagua.wanjunqushou.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.wanjunqushou, { scale: 0.9, y: [0, 0.41] });
                            });
                            game.playAudio('../extension/标记补充/audio/wanjunqushou.mp3');
                        },
                    };
                    //判定医术高超和妙手回春
                    lib.skill._o_o_recovertrigger = {
                        trigger: {
                            player: 'recoverEnd'
                        }, //自己回复体力后
                        direct: true,
                        filter: function (event, player) {
                            return event.source;
                        },
                        content: function () {
                            if (_status.currentPhase == player && trigger.source == player) { //如果是自己回合给自己回血
                                if (player.storage.o_o_yishugaochao == undefined) player.storage.o_o_yishugaochao = 0;
                                var bo = player.storage.o_o_yishugaochao >= 3;
                                player.storage.o_o_yishugaochao += trigger.num;
                                if (!bo && player.storage.o_o_yishugaochao >= 3) {
                                    _status.event.trigger('o_oyishugaochao');
                                }
                            }
                            if (trigger.source != player && trigger.num >= player.hp && player.hp > 0) { //如果其他角色给自己回复不小于当前体力的体力值，且自己体力大于0
                                if (trigger.source.storage.o_o_miaoshouhuichun == undefined) trigger.source.storage.o_o_miaoshouhuichun = 0;
                                trigger.source.storage.o_o_miaoshouhuichun++;
                                if (trigger.source.storage.o_o_miaoshouhuichun >= 3) {
                                    _status.event.trigger('o_omiaoshouhuichun');
                                }
                            }
                        },
                        group: '_o_o_recovertrigger_Delete',
                        subSkill: {
                            Delete: {
                                trigger: {
                                    player: ['phaseEnd', 'roundStart']
                                },
                                direct: true,
                                filter: function (event, player) {
                                    if (player.storage.o_o_yishugaochao) return true;
                                    if (player.storage.o_oshousha_jisha) return true;
                                    return event.name != "phase" && player.storage.o_o_miaoshouhuichun;
                                },
                                content: function () {
                                    delete player.storage.o_o_yishugaochao;
                                    if (trigger.name != 'phase') delete player.storage.o_o_miaoshouhuichun;
                                },
                            }
                        }
                    }
                    //妙手回春
                    lib.skill._o_o_miaoshouhuichun = { //一轮救了3次以上其他角色
                        trigger: {
                            player: 'o_omiaoshouhuichun'
                        },
                        priority: 523,
                        forced: true,
                        content: function () {
                            // decadeUI.animation.playSpine({ name:'Xmiaoshouhuichun',scale: 0.45,y: [0, 0.5]});
                            dcdAnim.loadSpine(xixiguagua.Xmiaoshouhuichun.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.Xmiaoshouhuichun, { scale: 0.45 });
                            });
                            game.playAudio('../extension/标记补充/audio/miaoshouhuichun.mp3');
                        },
                    };
                    //医术高超
                    lib.skill._o_o_yishugaochao = { //每回合一次，自己回合内给自己回复3点以上体力
                        trigger: {
                            player: 'o_oyishugaochao'
                        },
                        priority: 523,
                        forced: true,
                        content: function () {
                            //   decadeUI.animation.playSpine({ name:'Xyishugaochao',scale: 0.8});
                            dcdAnim.loadSpine(xixiguagua.Xyishugaochao.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.Xyishugaochao, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/yishugaochao.mp3');
                        },
                    };

                    //流失体力
                    lib.skill._losehp_ = {
                        trigger: {
                            player: 'loseHpBegin'
                        },
                        forced: true,
                        content: function () {
                            //     decadeUI.animation.playSpine({ name:'effect_loseHp', speed:0.8},{ scale: 0.6,parent: player });
                            dcdAnim.loadSpine(xixiguagua.effect_loseHp.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.effect_loseHp, { speed: 0.8, scale: 0.6, parent: player });
                            });
                            game.playAudio('../extension/十周年UI/audio/effect_loseHp.mp3');
                        },
                    },

                        //免伤特效
                        lib.skill._mianshang_ = {
                            trigger: {
                                player: ['damageZero', 'damageCancelled'],
                            },
                            forced: true,
                            content: function () {
                                //   decadeUI.animation.playSpine({ name:'mianshang',speed:0.8,},{ scale: 0.75,parent: player });     
                                dcdAnim.loadSpine(xixiguagua.mianshang.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.mianshang, { scale: 0.75, parent: player });
                                });
                            },
                        },
                        //伤害数字2
                        lib.skill._player_baojiA = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 1 && event.num <= 2;
                            },
                            content: function () {
                                //decadeUI.animation.playSpine({ name:'shuzi',action:"2",speed:0.8,},{ scale: 0.6,parent: player });
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '2';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数字3
                        lib.skill._player_baojiB = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 2 && event.num <= 3;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '3';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值4
                        lib.skill._player_baojiC = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 3 && event.num <= 4;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '4';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数字5
                        lib.skill._player_baojiD = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 4 && event.num <= 5;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '5';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值6
                        lib.skill._player_baojiE = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 5 && event.num <= 6;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '6';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值7
                        lib.skill._player_baojiF = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event > 6 && event.num <= 7;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '7';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值8
                        lib.skill._player_baojiG = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 7 && event.num <= 8;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '8';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值9
                        lib.skill._player_baojiH = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 8 && event.num <= 9;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '9';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },

                        //手杀救我
                        // lib.skill._jiuwo_ = {
                            // trigger: {
                                // player: "dyingBegin",
                            // },                                         
                            // charlotte: true,
                            // forceDie: true, 
                            // forced: true,
                            // popup: false,
                            // content: function () {                                            
                    // //player.storage._jiuwo_ =  decadeUI.animation.playSpine({ name: 'Xjiuwo', speed: 1, loop: true,}, { scale: 1, parent: player });      
                        // dcdAnim.loadSpine(xixiguagua.Xjiuwo.name, "skel", function () {
            // player.storage._jiuwo_gua = dcdAnim.playSpine(xixiguagua.Xjiuwo, { speed: 1, scale: 0.85, parent: player, x:50, y:92 });
                                    // });
                            // },
                        // };
                    //死亡或脱离濒死，取消救我
                    // lib.skill._delete_jiuwo_ = {
                        // trigger: {
                            // player: ["dyingAfter", "dieBegin", "dieAfter"],
                        // },
                        // forceDie: true,                             
                        // charlotte: true,                   
                        // forced: true,
                        // content: function () {   
            // if (player.storage._jiuwo_gua != undefined) {
                        // decadeUI.animation.stopSpine(player.storage._jiuwo_gua);
                        // player.storage._jiuwo_gua = undefined;
                    // }
                    
                        // },
                    // };

                    
                    //酒特效开始
                    lib.skill._jiubuff_ = {
                        trigger: {
                            player: 'useCard'
                        },                   
                        firstDo: true,
                        charlotte: true,
                        filter: function (event, player) {
                            return (event.card && (event.card.name == 'jiu') && !player.isDying());
                        },
                        forced: true,
                        popup: false,
                        audio: false,
                        content: function () {
                            if (player.storage._jiubuff_ == undefined) {
                                dcdAnim.loadSpine(xixiguagua.jiubuff.name, "skel", function () {
                                xixiguagua.jiubuff.loop=true;
                                    player.storage._jiubuff_ = dcdAnim.playSpine(xixiguagua.jiubuff, { speed: 1, scale: 0.45,
                        x: [59, 0],
                        y: [83, 0],         
                        parent: player });
                                });
                            }
                        },
                    },
                        //酒特效消失//
                        lib.skill._jiubuff_xiaoshi_ = {
                            trigger: {
                                player: ["useCard", "dieAfte"],
                                global:["phaseAfter"],
                            },
                            priority: 20,
                            firstDo: true,
                            forceDie: true,
                            charlotte: true,
                            filter: function (event, player) {
                                if (event.name == "phase" || event.name == "die") return true;
                                if (event.name == 'useCard') return (event.card && (event.card.name == 'sha'));
                                else return true;
                            },
                            forced: true,
                            popup: false,
                            audio: false,
                            content: function () {
                                if (player.storage._jiubuff_ != undefined) {
                                    decadeUI.animation.stopSpine(player.storage._jiubuff_);
                                    player.storage._jiubuff_ = undefined;
                                }
                            },
                        };
                    //武将扫光
                    lib.skill._player_game_guagua = {
                        trigger: {
                            player: 'phaseZhunbeiBegin'
                        },
                        forced: true,
                        charlotte: true,
                        content: function () {                        
                            if (game.getRarity(player.name) == "junk") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'yixing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                });
                                
                            }
                            if (game.getRarity(player.name) == "common") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'erxing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                });
                                
                            }
                            if (game.getRarity(player.name) == "rare") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'sanxing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                });
                                
                            }
                            if (game.getRarity(player.name) == "epic") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'sixing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                });
                                
                            }
                            if (game.getRarity(player.name) == "legend") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'wuxing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                }); 
                            }
                            
                            dcdAnim.loadSpine(xixiguagua.saoguang.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.saoguang, {  scale: 1.54,x: [56,0],y: [97,0], parent: player });
                                });
                            
                            game.delay(0.5);
                        },
                    };
                    
                    
                    
                    //国战获得标记特效
                    lib.skill._guozhan_quanjubiaoji_guagua = {
                        trigger: {
                            player: 'addMark',
                        },
                        silent: true,
                        charlotte: true,
                        forced: true,
                        content: function () {
                            if (trigger.markname == 'xianqu_mark') {
                                //decadeUI.animation.playSpine({ name: 'SS_eff_xianqu', speed: 1, }, { scale: 0.7 }); game.delay(2.5);
                                dcdAnim.loadSpine(xixiguagua.SS_eff_xianqu.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.SS_eff_xianqu, { speed: 1, scale: 0.7});
                                }); game.delay(2.5);
                                game.playAudio('../extension/标记补充/audio/xianqu.mp3');
                            }
                            if (trigger.markname == 'yexinjia_mark') {
                                //decadeUI.animation.playSpine({ name: 'SSZBB_PJN_yexinjia', speed: 1, }, { scale: 0.7, y: [0, 0.65] }); game.delay(2.5);
                                dcdAnim.loadSpine(xixiguagua.SSZBB_PJN_yexinjia.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.SSZBB_PJN_yexinjia, { speed: 1, scale: 0.7, y: [0, 0.65] });
                                });
                                game.delay(2.5);
                                game.playAudio('../extension/标记补充/audio/yexinjia.mp3');
                            }
                            if (trigger.markname == 'yinyang_mark') {
                                //decadeUI.animation.playSpine({ name: 'SS_eff_yinyangyu', speed: 1, }, { scale: 0.7 }); game.delay(2.5);
                                dcdAnim.loadSpine(xixiguagua.SS_eff_yinyangyu.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.SS_eff_yinyangyu, { speed: 1, scale: 0.7 });
                                });
                                game.delay(2.5);
                                game.playAudio('../extension/标记补充/audio/yinyangyu.mp3');
                            }
                            if (trigger.markname == 'zhulianbihe_mark') {
                                //decadeUI.animation.playSpine({ name: 'SS_eff_zhulianbihe', speed: 1, }, { scale: 0.7 }); 
                                dcdAnim.loadSpine(xixiguagua.SS_eff_zhulianbihe.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.SS_eff_zhulianbihe, { speed: 1, scale: 0.7 });
                                });
                                game.delay(2.5);
                                game.playAudio('../extension/标记补充/audio/zhulianbihe.mp3');
                            }
                        },
                    };
                };
                }
            if (config.jishatexiao == 'shizhounian') {
                //十周年击杀特效
                if (config.shoushajishatexiao) {
                    lib.skill._shoushajisha_ = {
                        trigger: {
                            source: "dieBegin",
                        },
                        silent: true,
                        charlotte: true,
                        forced: true,
                        priority: 2022,
                        content: function () {
                if (!player.storage._shoushajisha_) player.storage._shoushajisha_ = 0;
                            player.storage._shoushajisha_++
                            //一破
                if (player.storage._shoushajisha_ == 1) {
                                if (player.storage._shoushajisha_3 == true) { event.finish(); return; }
                                for (var i of game.players) i.storage._shoushajisha_3 = true;
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "yipo",
                                //    scale: 0.8,
                                //});
                                dcdAnim.loadSpine(xixiguagua.shoupo.name, "skel", function () {
                                    // xixiguagua.shoushajisha.action = 'play1';
                                    dcdAnim.playSpine(xixiguagua.shoupo, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/liansha_1.mp3');
                                //游戏暂停
                                game.delay(4);
                            }
                            //双连
                            if (player.storage._shoushajisha_ == 2) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "shuanglian",
                                //    scale: 0.8
                                //});
                                dcdAnim.loadSpine(xixiguagua.lianpo.name, "skel", function () {
                                    // xixiguagua.shoushajisha.action = 'play2';
                                    dcdAnim.playSpine(xixiguagua.lianpo, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/liansha_2.mp3');
                                //二连斩
                                //decadeUI.animation.playSpine({ name: 'erlianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.erlianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.erlianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4);
                            }
                            //三连
                            if (player.storage._shoushajisha_ == 3) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "sanlian",
                                //    scale: 0.8
                                //});
                                dcdAnim.loadSpine(xixiguagua.sanpo.name, "skel", function () {
                                    // xixiguagua.shoushajisha.action = 'play3';
                                    dcdAnim.playSpine(xixiguagua.sanpo, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/liansha_3.mp3');
                                //三连斩
                                //decadeUI.animation.playSpine({ name: 'sanlianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.sanlianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.sanlianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                            //四连
                            if (player.storage._shoushajisha_ == 4) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "silian",
                                //    scale: 0.8
                                //});
                                dcdAnim.loadSpine(xixiguagua.sipo.name, "skel", function () {
                                    // xixiguagua.shoushajisha.action = 'play4';
                                    dcdAnim.playSpine(xixiguagua.sipo, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/liansha_4.mp3');
                                //四连斩
                                //decadeUI.animation.playSpine({ name: 'silianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.silianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.silianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                            //五连
                            if (player.storage._shoushajisha_ == 5) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "wulian",
                                //    scale: 0.8, speed: 0.9
                                //});
                                dcdAnim.loadSpine(xixiguagua.wupo.name, "skel", function () {
                                    // xixiguagua.shoushajisha.speed = 0.8;
                                    // xixiguagua.shoushajisha.action = 'play5';
                                    dcdAnim.playSpine(xixiguagua.wupo, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/liansha_5.mp3');
                                //五连斩
                                //decadeUI.animation.playSpine({ name: 'wulianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.wulianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.wulianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                            //六连
                            if (player.storage._shoushajisha_ == 6) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "liulian",
                                //    scale: 0.8, speed: 0.9
                                //});
                                dcdAnim.loadSpine(xixiguagua.liupo.name, "skel", function () {
                                    // xixiguagua.shoushajisha.speed = 0.8;
                                    // xixiguagua.shoushajisha.action = 'play6';
                                    dcdAnim.playSpine(xixiguagua.liupo, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/liansha_6.mp3');
                                //六连斩
                                //decadeUI.animation.playSpine({ name: 'liulianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.liulianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.liulianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                            //七连
                            if (player.storage._shoushajisha_ >= 7) {
                                //decadeUI.animation.playSpine({
                                //    name: 'shoushajisha', action: "qilian",
                                //    scale: 0.8, speed: 0.9
                                //});
                                dcdAnim.loadSpine(xixiguagua.qipo.name, "skel", function () {
                                    // xixiguagua.shoushajisha.speed = 0.8;
                                    // xixiguagua.shoushajisha.action = 'play7';
                                    dcdAnim.playSpine(xixiguagua.qipo, { scale: 0.8 });
                                });
                                game.playAudio('../extension/标记补充/audio/liansha_7.mp3');
                                //七连斩
                                //decadeUI.animation.playSpine({ name: 'qilianzhan', speed: 0.8, },
                                //    { scale: 0.7, parent: player });
                                dcdAnim.loadSpine(xixiguagua.qilianzhan.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.qilianzhan, { speed: 0.8, scale: 0.7, parent: player });
                                });
                                game.delay(4.2);
                            }
                        },
                    };
                    lib.skill._shoushajisha_delete_ = {
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        silent: true,
                        charlotte: true,
                        forced: true,
                        content: function () {
                            delete player.storage._shoushajisha_;
                        },
                    };
                    //癫狂屠戮
                    lib.skill._diankuangtulu_gua = {
                        trigger: {
                            source: 'damageBegin4',
                        },
                        charlotte: true,
                        forced: true,
                        filter: function (event, player) {
                            return event.num == 3;
                        },
                        content: function () {
                            //   decadeUI.animation.playSpine({ name:'diankuangtulu',scale: 0.5,});
                            dcdAnim.loadSpine(xixiguagua.diankuangtulu.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.diankuangtulu, { scale: 0.9,y: [0, 0.47] });
                            });
                            game.playAudio('../extension/标记补充/audio/diankuangtulu.mp3');
                        },
                    };

                    //无双万军取首
                    lib.skill._wanjunqushou_gua = {
                        trigger: {
                            source: 'damageBegin4',
                        },
                        charlotte: true,
                        forced: true,
                        filter: function (event, player) {
                            return event.num >= 4;
                        },
                        content: function () {
                            //decadeUI.animation.playSpine({ name:'wanjunqushou',scale: 0.5,y: [0, 0.75],});
                            dcdAnim.loadSpine(xixiguagua.wanjunqushou.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.wanjunqushou, { scale: 0.9, y: [0, 0.41] });
                            });
                            game.playAudio('../extension/标记补充/audio/wanjunqushou.mp3');
                        },
                    };
                    //判定医术高超和妙手回春
                    lib.skill._o_o_recovertrigger = {
                        trigger: {
                            player: 'recoverEnd'
                        }, //自己回复体力后
                        direct: true,
                        filter: function (event, player) {
                            return event.source;
                        },
                        content: function () {
                            if (_status.currentPhase == player && trigger.source == player) { //如果是自己回合给自己回血
                                if (player.storage.o_o_yishugaochao == undefined) player.storage.o_o_yishugaochao = 0;
                                var bo = player.storage.o_o_yishugaochao >= 3;
                                player.storage.o_o_yishugaochao += trigger.num;
                                if (!bo && player.storage.o_o_yishugaochao >= 3) {
                                    _status.event.trigger('o_oyishugaochao');
                                }
                            }
                            if (trigger.source != player && trigger.num >= player.hp && player.hp > 0) { //如果其他角色给自己回复不小于当前体力的体力值，且自己体力大于0
                                if (trigger.source.storage.o_o_miaoshouhuichun == undefined) trigger.source.storage.o_o_miaoshouhuichun = 0;
                                trigger.source.storage.o_o_miaoshouhuichun++;
                                if (trigger.source.storage.o_o_miaoshouhuichun >= 3) {
                                    _status.event.trigger('o_omiaoshouhuichun');
                                }
                            }
                        },
                        group: '_o_o_recovertrigger_Delete',
                        subSkill: {
                            Delete: {
                                trigger: {
                                    player: ['phaseEnd', 'roundStart']
                                },
                                direct: true,
                                filter: function (event, player) {
                                    if (player.storage.o_o_yishugaochao) return true;
                                    if (player.storage.o_oshousha_jisha) return true;
                                    return event.name != "phase" && player.storage.o_o_miaoshouhuichun;
                                },
                                content: function () {
                                    delete player.storage.o_o_yishugaochao;
                                    if (trigger.name != 'phase') delete player.storage.o_o_miaoshouhuichun;
                                },
                            }
                        }
                    }
                    //妙手回春
                    lib.skill._o_o_miaoshouhuichun = { //一轮救了3次以上其他角色
                        trigger: {
                            player: 'o_omiaoshouhuichun'
                        },
                        priority: 523,
                        forced: true,
                        content: function () {
                            // decadeUI.animation.playSpine({ name:'Xmiaoshouhuichun',scale: 0.45,y: [0, 0.5]});
                            dcdAnim.loadSpine(xixiguagua.Xmiaoshouhuichun.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.Xmiaoshouhuichun, { scale: 0.45 });
                            });
                            game.playAudio('../extension/标记补充/audio/miaoshouhuichun.mp3');
                        },
                    };
                    //医术高超
                    lib.skill._o_o_yishugaochao = { //每回合一次，自己回合内给自己回复3点以上体力
                        trigger: {
                            player: 'o_oyishugaochao'
                        },
                        priority: 523,
                        forced: true,
                        content: function () {
                            //   decadeUI.animation.playSpine({ name:'Xyishugaochao',scale: 0.8});
                            dcdAnim.loadSpine(xixiguagua.Xyishugaochao.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.Xyishugaochao, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/yishugaochao.mp3');
                        },
                    };

                    //流失体力
                    lib.skill._losehp_ = {
                        trigger: {
                            player: 'loseHpBegin'
                        },
                        forced: true,
                        content: function () {
                            //     decadeUI.animation.playSpine({ name:'effect_loseHp', speed:0.8},{ scale: 0.6,parent: player });
                            dcdAnim.loadSpine(xixiguagua.effect_loseHp.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.effect_loseHp, { speed: 0.8, scale: 0.6, parent: player });
                            });
                            game.playAudio('../extension/十周年UI/audio/effect_loseHp.mp3');
                        },
                    },

                        //免伤特效
                        lib.skill._mianshang_ = {
                            trigger: {
                                player: ['damageZero', 'damageCancelled'],
                            },
                            forced: true,
                            content: function () {
                                //   decadeUI.animation.playSpine({ name:'mianshang',speed:0.8,},{ scale: 0.75,parent: player });     
                                dcdAnim.loadSpine(xixiguagua.mianshang.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.mianshang, { scale: 0.75, parent: player });
                                });
                            },
                        },
                        //伤害数字2
                        lib.skill._player_baojiA = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 1 && event.num <= 2;
                            },
                            content: function () {
                                //decadeUI.animation.playSpine({ name:'shuzi',action:"2",speed:0.8,},{ scale: 0.6,parent: player });
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '2';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数字3
                        lib.skill._player_baojiB = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 2 && event.num <= 3;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '3';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值4
                        lib.skill._player_baojiC = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 3 && event.num <= 4;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '4';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数字5
                        lib.skill._player_baojiD = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 4 && event.num <= 5;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '5';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值6
                        lib.skill._player_baojiE = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 5 && event.num <= 6;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '6';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值7
                        lib.skill._player_baojiF = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event > 6 && event.num <= 7;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '7';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值8
                        lib.skill._player_baojiG = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 7 && event.num <= 8;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '8';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },
                        //伤害数值9
                        lib.skill._player_baojiH = {
                            trigger: {
                                player: 'damageBegin4'
                            },
                            forced: true,
                            priority: 10,
                            filter: function (event) {
                                return event.num > 8 && event.num <= 9;
                            },
                            content: function () {
                                dcdAnim.loadSpine(xixiguagua.shuzi.name, "skel", function () {
                                    xixiguagua.shuzi.action = '9';
                                    dcdAnim.playSpine(xixiguagua.shuzi, { speed: 0.8, scale: 0.6, parent: player });
                                });
                            },
                        },

                        //手杀救我
                        // lib.skill._jiuwo_ = {
                            // trigger: {
                                // player: "dyingBegin",
                            // },                                         
                            // charlotte: true,
                            // forceDie: true, 
                            // forced: true,
                            // popup: false,
                            // content: function () {                                            
                    // //player.storage._jiuwo_ =  decadeUI.animation.playSpine({ name: 'Xjiuwo', speed: 1, loop: true,}, { scale: 1, parent: player });      
                        // dcdAnim.loadSpine(xixiguagua.Xjiuwo.name, "skel", function () {
            // player.storage._jiuwo_gua = dcdAnim.playSpine(xixiguagua.Xjiuwo, { speed: 1, scale: 0.85, parent: player, x:50, y:92 });
                                    // });
                            // },
                        // };
                    //死亡或脱离濒死，取消救我
                    // lib.skill._delete_jiuwo_ = {
                        // trigger: {
                            // player: ["dyingAfter", "dieBegin", "dieAfter"],
                        // },
                        // forceDie: true,                             
                        // charlotte: true,                   
                        // forced: true,
                        // content: function () {   
            // if (player.storage._jiuwo_gua != undefined) {
                        // decadeUI.animation.stopSpine(player.storage._jiuwo_gua);
                        // player.storage._jiuwo_gua = undefined;
                    // }
                    
                        // },
                    // };

                    
                    //酒特效开始
                    lib.skill._jiubuff_ = {
                        trigger: {
                            player: 'useCard'
                        },                   
                        firstDo: true,
                        charlotte: true,
                        filter: function (event, player) {
                            return (event.card && (event.card.name == 'jiu') && !player.isDying());
                        },
                        forced: true,
                        popup: false,
                        audio: false,
                        content: function () {
                            if (player.storage._jiubuff_ == undefined) {
                                dcdAnim.loadSpine(xixiguagua.jiubuff.name, "skel", function () {
                                xixiguagua.jiubuff.loop=true;
                                    player.storage._jiubuff_ = dcdAnim.playSpine(xixiguagua.jiubuff, { speed: 1, scale: 0.45,
                        x: [59, 0],
                        y: [83, 0],         
                        parent: player });
                                });
                            }
                        },
                    },
                        //酒特效消失//
                        lib.skill._jiubuff_xiaoshi_ = {
                            trigger: {
                                player: ["useCard", "dieAfte"],
                                global:["phaseAfter"],
                            },
                            priority: 20,
                            firstDo: true,
                            forceDie: true,
                            charlotte: true,
                            filter: function (event, player) {
                                if (event.name == "phase" || event.name == "die") return true;
                                if (event.name == 'useCard') return (event.card && (event.card.name == 'sha'));
                                else return true;
                            },
                            forced: true,
                            popup: false,
                            audio: false,
                            content: function () {
                                if (player.storage._jiubuff_ != undefined) {
                                    decadeUI.animation.stopSpine(player.storage._jiubuff_);
                                    player.storage._jiubuff_ = undefined;
                                }
                            },
                        };
                    //武将扫光
                    lib.skill._player_game_guagua = {
                        trigger: {
                            player: 'phaseZhunbeiBegin'
                        },
                        forced: true,
                        charlotte: true,
                        content: function () {                        
                            if (game.getRarity(player.name) == "junk") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'yixing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                });
                                
                            }
                            if (game.getRarity(player.name) == "common") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'erxing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                });
                                
                            }
                            if (game.getRarity(player.name) == "rare") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'sanxing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                });
                                
                            }
                            if (game.getRarity(player.name) == "epic") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'sixing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                });
                                
                            }
                            if (game.getRarity(player.name) == "legend") {
                                dcdAnim.loadSpine(xixiguagua.huihekaishi.name, "skel", function () {
                                    xixiguagua.huihekaishi.action = 'wuxing';
                                    dcdAnim.playSpine(xixiguagua.huihekaishi, { speed: 2, scale: 2, parent: player });
                                }); 
                            }
                            
                            dcdAnim.loadSpine(xixiguagua.saoguang.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.saoguang, { speed: 2, scale: 1.41, parent: player });
                                });
                            
                            game.delay(0.5);
                        },
                    };
                    
                    
                    
                    //国战获得标记特效
                    lib.skill._guozhan_quanjubiaoji_guagua = {
                        trigger: {
                            player: 'addMark',
                        },
                        silent: true,
                        charlotte: true,
                        forced: true,
                        content: function () {
                            if (trigger.markname == 'xianqu_mark') {
                                //decadeUI.animation.playSpine({ name: 'SS_eff_xianqu', speed: 1, }, { scale: 0.7 }); game.delay(2.5);
                                dcdAnim.loadSpine(xixiguagua.SS_eff_xianqu.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.SS_eff_xianqu, { speed: 1, scale: 0.7});
                                }); game.delay(2.5);
                                game.playAudio('../extension/标记补充/audio/xianqu.mp3');
                            }
                            if (trigger.markname == 'yexinjia_mark') {
                                //decadeUI.animation.playSpine({ name: 'SSZBB_PJN_yexinjia', speed: 1, }, { scale: 0.7, y: [0, 0.65] }); game.delay(2.5);
                                dcdAnim.loadSpine(xixiguagua.SSZBB_PJN_yexinjia.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.SSZBB_PJN_yexinjia, { speed: 1, scale: 0.7, y: [0, 0.65] });
                                });
                                game.delay(2.5);
                                game.playAudio('../extension/标记补充/audio/yexinjia.mp3');
                            }
                            if (trigger.markname == 'yinyang_mark') {
                                //decadeUI.animation.playSpine({ name: 'SS_eff_yinyangyu', speed: 1, }, { scale: 0.7 }); game.delay(2.5);
                                dcdAnim.loadSpine(xixiguagua.SS_eff_yinyangyu.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.SS_eff_yinyangyu, { speed: 1, scale: 0.7 });
                                });
                                game.delay(2.5);
                                game.playAudio('../extension/标记补充/audio/yinyangyu.mp3');
                            }
                            if (trigger.markname == 'zhulianbihe_mark') {
                                //decadeUI.animation.playSpine({ name: 'SS_eff_zhulianbihe', speed: 1, }, { scale: 0.7 }); 
                                dcdAnim.loadSpine(xixiguagua.SS_eff_zhulianbihe.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.SS_eff_zhulianbihe, { speed: 1, scale: 0.7 });
                                });
                                game.delay(2.5);
                                game.playAudio('../extension/标记补充/audio/zhulianbihe.mp3');
                            }
                        },
                    };
                };
            };

            //装备白框                   
                lib.skill._zhuangbeibaikuang_ = {
                    trigger: {
                        player: ['useCardBegin', 'respondBegin'],
                    },
                    firstDo: true,
                    charlotte: true,
                    forced: true,
                    content: function () {
                    //武器
                    if (get.subtype(trigger.card) == 'equip1') {
                        setTimeout(function () {
                            dcdAnim.loadSpine(xixiguagua.zbwq.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.zbwq, { speed: 1.0, scale: 0.45, x: [56, 0], y: [50, 0],parent: player });
                            });
                        }, 1000);
                    }
                    //防具
                    if (get.subtype(trigger.card) == 'equip2') {
                        setTimeout(function () {
                            dcdAnim.loadSpine(xixiguagua.zb.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.zb, { speed: 1.0, scale: 0.45, x: [56, 0], y: [29, 0],parent: player });
                            });
                        }, 1000);
                    }
                    //防御马
                    if (get.subtype(trigger.card) == 'equip3') {
                        setTimeout(function () {
                            dcdAnim.loadSpine(xixiguagua.zbfym.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.zbfym, { speed: 1.0, scale: 0.45, x: [29, 0], y: [11, 0],parent: player });
                            });
                        }, 1000);
                    }
                    //进攻马
                    if (get.subtype(trigger.card) == 'equip4') {
                        setTimeout(function () {
                            dcdAnim.loadSpine(xixiguagua.zbjgm.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.zbjgm, { speed: 1.0, scale: 0.45, x: [82, 0], y: [11, 0],parent: player });
                            });
                        }, 1000);
                    }
                    //宝物
                    if (get.subtype(trigger.card) == 'equip5') {
                        setTimeout(function () {
                            dcdAnim.loadSpine(xixiguagua.zbbw.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.zbbw, { speed: 1.0, scale: 0.45, x: [56, 0], y: [70, 0],parent: player });
                            });
                        }, 1000);
                    }
                },
            };

            if (config.shiyongkapaitixiao) {
                //卡牌特效                    
                lib.skill._shiyongkapaitexiao_ = {
                    trigger: {
                        player: ['useCardBegin', 'respondBegin'],
                    },
                    firstDo: true,
                    charlotte: true,
                    forced: true,
                    content: function () {
                        // //红杀
                        // if(trigger.card.name=='sha' && get.color(trigger.card)=='red' && !trigger.card.nature){ 
                        // decadeUI.animation.playSpine({ name:'effect_hongsha', speed:0.7},{ scale: 0.8,x:[0,0.55],parent: player });
                        // }
                        // //黑杀
                        // if(trigger.card.name=='sha' && get.color(trigger.card)=='black' && !trigger.card.nature){
                        // decadeUI.animation.playSpine({ name:'effect_heisha', speed:0.7},{ scale: 0.8,x:[0,0.55],parent: player });
                        // }
                        // //雷杀
                        // if(trigger.card.name=='sha' && trigger.card.nature=='thunder'){
                        // decadeUI.animation.playSpine({ name:'effect_leisha', speed:0.7},{ scale: 0.8,x:[0,0.55],parent: player });
                        // }
                        // //火杀
                        // if(trigger.card.name=='sha' && trigger.card.nature=='fire'){
                        // decadeUI.animation.playSpine({ name:'effect_huosha', speed:0.7},{ scale: 0.8,x:[0,0.55],parent: player });
                        // }
                        //杀
                        if (trigger.card.name == 'sha' && get.type(trigger.card) == 'basic') {
                            dcdAnim.loadSpine(xixiguagua.sha.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.sha, { speed: 1, scale: 0.45, parent: player });
                            });
                            //   decadeUI.animation.playSpine({ name:'sha', speed:1},{ scale: 1.5,parent: player });
                        }
                        //闪
                        if (trigger.card.name == 'shan' && get.type(trigger.card) == 'basic') {
                            dcdAnim.loadSpine(xixiguagua.effect_shan.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.effect_shan, { speed: 1, scale: 0.45, parent: player });
                            });
                            // decadeUI.animation.playSpine({ name:'effect_shan', speed:1},{ scale: 1.5,parent: player });
                        }
                        //桃
                        if (trigger.card.name == 'tao' && get.type(trigger.card) == 'basic') {
                            dcdAnim.loadSpine(xixiguagua.effect_tao.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.effect_tao, { speed: 0.7, scale: 0.8, parent: player });
                            });
                            // decadeUI.animation.playSpine({ name:'effect_tao', speed:0.7},{ scale: 0.8,parent: player });         
                        }
                        //酒
                        if (trigger.card.name == 'jiu' && get.type(trigger.card) == 'basic') {
                            dcdAnim.loadSpine(xixiguagua.effect_jiu.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.effect_jiu, { speed: 0.7, scale: 0.8, x: [0, 0.58], parent: player });
                            });
                            //  decadeUI.animation.playSpine({ name:'effect_jiu', speed:0.7},{ scale: 0.8,x:[0,0.58],parent: player });
                        }
                        //无中生有
                        if (trigger.card.name == 'wuzhong' && get.type(trigger.card) == 'trick') {
                            dcdAnim.loadSpine(xixiguagua.effect_wuzhongshengyou.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.effect_wuzhongshengyou, { speed: 0.7, scale: 1, x: [0, 0.55], parent: player });
                            });
                            // decadeUI.animation.playSpine({ name:'effect_wuzhongshengyou', speed:0.7},{ scale: 1,x:[0,0.55],parent: player });
                        }
                        //五谷丰登
                        if (trigger.card.name == 'wugu' && get.type(trigger.card) == 'trick') {
                        dcdAnim.loadSpine(xixiguagua.effect_wugufengdeng.name, "skel", function () {
                            for (var i of game.players) {
                                    dcdAnim.playSpine(xixiguagua.effect_wugufengdeng, { speed: 0.7, scale: 0.7, x: [0, 0.55], parent: i });
                                    }
                                });                            
                        }
                        //南蛮入侵
                        if (trigger.card.name == 'nanman' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_nanmanruqin', scale: 0.5 },);
                            dcdAnim.loadSpine(xixiguagua.effect_nanmanruqin.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.effect_nanmanruqin, { scale: 0.65 });
                            });
                            game.playAudio('../extension/标记补充/audio/effect_nanmanruqin.mp3');
                        }
                        //桃园结义
                        if (trigger.card.name == 'taoyuan' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'taoyuanjieyi', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.taoyuanjieyi.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.taoyuanjieyi, { scale: 0.8 });
                            });
                        }
                        //乐不思蜀
                        if (trigger.card.name == 'lebu' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'SS_lebusishu', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.SS_lebusishu.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.SS_lebusishu, { scale: 0.7 });
                            });
                        }
                        //兵粮寸断
                        if (trigger.card.name == 'bingliang' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'SZN_bingliangcunduan', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.SZN_bingliangcunduan.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.SZN_bingliangcunduan, { scale: 1 });
                            });
                        }
                        //兵粮寸断_nsf
                        if (trigger.card.name == 'nsf_bingliang' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'SZN_bingliangcunduan', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.SZN_bingliangcunduan.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.SZN_bingliangcunduan, { scale: 1 });
                            });
                        }
                        //无中生有_新增
                        if (trigger.card.name == 'wuzhong' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'wuzhongshengyou', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.wuzhongshengyou.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.wuzhongshengyou, { scale: 0.8 });
                            });
                        }
                        //借刀杀人
                        if (trigger.card.name == 'jiedao' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'jiedaosharen', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.jiedaosharen.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.jiedaosharen, { scale: 0.8 });
                            });
                        }
                        //借刀杀人_txhj
                        if (trigger.card.name == 'txhj_jiedao' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'jiedaosharen', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.jiedaosharen.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.jiedaosharen, { scale: 0.8 });
                            });
                        }
                        //火攻
                        if (trigger.card.name == 'huogong' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'huoqiu_zhanchangbeijing', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huoqiu_zhanchangbeijing.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huoqiu_zhanchangbeijing, { scale: 0.8,angle: 180 });
                            });
                            game.playAudio('../extension/标记补充/audio/fire.mp3');
                        }
                        //火攻_nsf
                        if (trigger.card.name == 'nsf_huogong' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'huoqiu_zhanchangbeijing', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huoqiu_zhanchangbeijing.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huoqiu_zhanchangbeijing, { scale: 0.8,angle: 180 });
                            });
                            game.playAudio('../extension/标记补充/audio/fire.mp3');
                        }
                        //火攻_gs
                        if (trigger.card.name == 'gs_huogong' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'huoqiu_zhanchangbeijing', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huoqiu_zhanchangbeijing.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huoqiu_zhanchangbeijing, { scale: 0.8,angle: 180 });
                            });
                            game.playAudio('../extension/标记补充/audio/fire.mp3');
                        }
                        //火攻_qvb
                        if (trigger.card.name == 'qvb_huogong' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'huoqiu_zhanchangbeijing', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huoqiu_zhanchangbeijing.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huoqiu_zhanchangbeijing, { scale: 0.8,angle: 180 });
                            });
                            game.playAudio('../extension/标记补充/audio/fire.mp3');
                        }
                        //火山
                        if (trigger.card.name == 'huoshan' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'huoqiu_zhanchangbeijing', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huoqiu_zhanchangbeijing.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huoqiu_zhanchangbeijing, { scale: 0.8,angle: 180 });
                            });
                            game.playAudio('../extension/标记补充/audio/fire.mp3');
                        }
                        //闪电
                        if (trigger.card.name == 'shandian' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'shandian', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.shandian.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.shandian, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/shandian.mp3');
                        }
                        //闪电_nsf
                        if (trigger.card.name == 'nsf_shandian' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'shandian', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.shandian.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.shandian, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/shandian.mp3');
                        }
                        //浮雷
                        if (trigger.card.name == 'fulei' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'fulei', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.fulei.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.fulei, { scale: 1.2 });
                            });
                            game.playAudio('../extension/标记补充/audio/fulei.mp3');
                        }
                        //水淹七军
                        if (trigger.card.name == 'shuiyanqijun' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'shuiyanqijun', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.shuiyanqijun.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.shuiyanqijun, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/water.mp3');
                        }
                        //水淹七军x
                        if (trigger.card.name == 'shuiyanqijunx' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'shuiyanqijun', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.shuiyanqijun.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.shuiyanqijun, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/water.mp3');
                        }
                        //水淹七军_txhj
                        if (trigger.card.name == 'txhj_shuiyan' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'shuiyanqijun', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.shuiyanqijun.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.shuiyanqijun, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/water.mp3');
                        }
                        //洪水
                        if (trigger.card.name == 'hongshui' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'shuiyanqijun', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.shuiyanqijun.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.shuiyanqijun, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/water.mp3');
                        }
                        //火烧连营
                        if (trigger.card.name == 'huoshaolianying' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'huoshaolianying', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huoshaolianying.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huoshaolianying, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/fire.mp3');
                        }
                        //火烧连营_txhj
                        if (trigger.card.name == 'txhj_huoshaolianying' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'huoshaolianying', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huoshaolianying.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huoshaolianying, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/fire.mp3');
                        }
                        //隔岸观火
                        if (trigger.card.name == 'geanguanhuo' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'huoshaolianying', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huoshaolianying.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huoshaolianying, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/fire.mp3');
                        }
                        //调虎离山
                        if (trigger.card.name == 'diaohulishan' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'diaohulishan', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.diaohulishan.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.diaohulishan, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/tiger.mp3');
                        }
                        //调虎离山_txhj
                        if (trigger.card.name == 'txhj_diaohu' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'diaohulishan', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.diaohulishan.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.diaohulishan, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/tiger.mp3');
                        }
                        //树上开花
                        if (trigger.card.name == 'kaihua' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'kaihua', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.kaihua.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.kaihua, { scale: 0.85,angle: 180 });
                            });
                            game.playAudio('../extension/标记补充/audio/kaihua.mp3');
                        }
                        //草船
                        if (trigger.card.name == 'caochuan' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_caochuanjiejian', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.effect_caochuanjiejian.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.effect_caochuanjiejian, { scale: 2 });
                            });
                            game.playAudio('../extension/标记补充/audio/shejian.mp3');
                        }
                        //草船借箭
                        if (trigger.card.name == 'caochuanjiejian' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_caochuanjiejian', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.effect_caochuanjiejian.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.effect_caochuanjiejian, { scale: 2 });
                            });
                            game.playAudio('../extension/标记补充/audio/shejian.mp3');
                        }
                        //草船借箭_nsf
                        if (trigger.card.name == 'nsf_caochuan' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_caochuanjiejian', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.effect_caochuanjiejian.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.effect_caochuanjiejian, { scale: 2 });
                            });
                            game.playAudio('../extension/标记补充/audio/shejian.mp3');
                        }
                        //逐鹿天下
                        if (trigger.card.name == 'zhulu_card' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'zhulutianxia', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.zhulutianxia.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.zhulutianxia, { scale: 0.6 });
                            });
                            game.playAudio('../extension/标记补充/audio/zhulu.mp3');
                        }
                        //望梅止渴
                        if (trigger.card.name == 'wangmeizhike' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'wangmeizhike', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.wangmeizhike.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.wangmeizhike, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/zhike.mp3');
                        }
                        //望梅止渴_txhj
                        if (trigger.card.name == 'txhj_wangmeizhike' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'wangmeizhike', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.wangmeizhike.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.wangmeizhike, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/zhike.mp3');
                        }
                        //釜底抽薪
                        if (trigger.card.name == 'fudichouxin' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'fudichouxin', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.fudichouxin.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.fudichouxin, { scale: 1.2 });
                            });
                            game.playAudio('../extension/标记补充/audio/fudichouxin.mp3');
                        }
                        //奇正相生
                        if (trigger.card.name == 'qizhengxiangsheng' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'qizheng', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.qizheng.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.qizheng, { scale: 0.9 });
                            });
                            game.playAudio('../extension/标记补充/audio/qizheng.mp3');
                        }
                        //美人计
                        if (trigger.card.name == 'wy_meirenji' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'meirenji', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.meirenji.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.meirenji, { scale: 0.5 });
                            });
                            game.playAudio('../extension/标记补充/audio/meirenji.mp3');
                        }
                        //笑里藏刀_wy
                        if (trigger.card.name == 'wy_xiaolicangdao' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'xiaolicangdao', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.xiaolicangdao.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.xiaolicangdao, { scale: 0.9 });
                            });
                            game.playAudio('../extension/标记补充/audio/xiaolicangdao.mp3');
                        }
                        //笑里藏刀
                        if (trigger.card.name == 'xiaolicangdao' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'xiaolicangdao', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.xiaolicangdao.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.xiaolicangdao, { scale: 0.9 });
                            });
                            game.playAudio('../extension/标记补充/audio/xiaolicangdao.mp3');
                        }
                        //铁索连环_音效
                        if (trigger.card.name == 'tiesuo' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/tiesuo.mp3');
                        }
                        //铁索连环_sss_音效
                        if (trigger.card.name == 'tiesuosss' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/tiesuo.mp3');
                        }
                        //金蝉脱壳_音效
                        if (trigger.card.name == 'jinchan' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/jinchan.mp3');
                        }
                        //兵临城下_音效
                        if (trigger.card.name == 'binglinchengxia' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/shibing.mp3');
                        }
                        //调兵遣将_音效
                        if (trigger.card.name == 'diaobingqianjiang' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/shibing.mp3');
                        }
                        //增兵减灶_音效
                        if (trigger.card.name == 'zengbin' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/xianzhen.mp3');
                        }
                        //太虚落井下石_音效
                        if (trigger.card.name == 'txluojingxiashi' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/gunshi.mp3');
                        }
                        //太虚移花接木_音效
                        if (trigger.card.name == 'txyihuajiemu' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/kaihua.mp3');
                        }
                        //万剑齐发
                        if (trigger.card.name == 'wanjian' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_wanjianqifa_full', scale: 1 },);
                            dcdAnim.loadSpine(xixiguagua.effect_wanjianqifa_full.name, "skel", function () {                            
                            dcdAnim.playSpine(xixiguagua.effect_wanjianqifa_full, { scale: 0.9,y:[0,0.4]});
                            });
                            game.playAudio('../extension/标记补充/audio/effect_wanjianqifa_full.mp3');
                        }
                        //决斗
                        if (trigger.card.name == 'juedou' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'SSZBB_DDZ_eff_juedou', scale: 1 },);
                            dcdAnim.loadSpine(xixiguagua.SSZBB_DDZ_eff_juedou.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.SSZBB_DDZ_eff_juedou, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/SSZBB_DDZ_eff_juedou.mp3');
                        }
                        //无懈可击
                        if (trigger.card.name == 'wuxie' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_wuxiekeji', speed: 1, }, { scale: 0.7, parent: player });
                            //  decadeUI.animation.playSpine({ name:'effect_wuxiekeji',action:"play2",speed:1,},{ scale: 0.7,parent: player });   
                            dcdAnim.loadSpine(xixiguagua.effect_wuxiekeji.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.effect_wuxiekeji, { speed: 1, scale: 0.7, parent: player });
                            });
                            game.playAudio('../extension/标记补充/audio/effect_wuxiekeji.mp3');
                        }
                        //文和乱武
                        if (trigger.card.name == 'gz_wenheluanwu' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_wenheluanwu', scale: 1 },);
                            dcdAnim.loadSpine(xixiguagua.effect_wenheluanwu.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.effect_wenheluanwu, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/effect_wenheluanwu.mp3');
                        }
                        //固国安邦
                        if (trigger.card.name == 'gz_guguoanbang' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_guguoanbang', scale: 1 },);
                            dcdAnim.loadSpine(xixiguagua.effect_guguoanbang.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.effect_guguoanbang, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/effect_guguoanbang.mp3');
                        }
                        //克复中原
                        if (trigger.card.name == 'gz_kefuzhongyuan' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_kefuzhongyuan', scale: 1 },);
                            dcdAnim.loadSpine(xixiguagua.effect_kefuzhongyuan.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.effect_kefuzhongyuan, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/effect_kefuzhongyuan.mp3');
                        }
                        //号令天下
                        if (trigger.card.name == 'gz_haolingtianxia' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'effect_haolingtianxia', scale: 1 },);
                            dcdAnim.loadSpine(xixiguagua.effect_haolingtianxia.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.effect_haolingtianxia, { scale: 1 });
                            });
                            game.playAudio('../extension/标记补充/audio/effect_haolingtianxia.mp3');
                        }
                        //————————————民间卡牌饺子美化版v1.1新增特效————————//
                        //毒桃
                        if (trigger.card.name == 'bxyr_dutao' && get.type(trigger.card) == 'basic') {
                            //decadeUI.animation.playSpine({ name: 'dutao', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.dutao.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.dutao, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/dutao.mp3');
                        }
                        //酥
                        if (trigger.card.name == 'bxyr_su' && get.type(trigger.card) == 'basic') {
                            //decadeUI.animation.playSpine({ name: 'su', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.su.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.su, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/su.mp3');
                        }
                        //粮
                        if (trigger.card.name == 'bxyr_liang' && get.type(trigger.card) == 'basic') {
                            //decadeUI.animation.playSpine({ name: 'effect_wugufengdeng', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.effect_wugufengdeng.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.effect_wugufengdeng, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/liang.mp3');
                        }
                        //施毒
                        if (trigger.card.name == 'bxyr_shidu' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'shidu', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.shidu.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.shidu, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/shidu.mp3');
                        }
                        //八门金锁
                        if (trigger.card.name == 'bxyr_bamenjinsuo' && get.type(trigger.card) == 'delay') {
                            //decadeUI.animation.playSpine({ name: 'bagua', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.bagua.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.bagua, { scale: 0.65 });
                            });
                            game.playAudio('../extension/标记补充/audio/jinsuo.mp3');
                        }
                        //黄巾起义
                        if (trigger.card.name == 'bxyr_huangjinqiyi' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'huangjin', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huangjin.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huangjin, { scale: 0.6 });
                            });
                        }
                        //火烧赤壁
                        if (trigger.card.name == 'bxyr_huoshaochibi' && get.type(trigger.card) == 'trick') {
                            //decadeUI.animation.playSpine({ name: 'huoshaolianying', scale: 0.8 },);
                            dcdAnim.loadSpine(xixiguagua.huoshaolianying.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.huoshaolianying, { scale: 0.8 });
                            });
                            game.playAudio('../extension/标记补充/audio/fire.mp3');
                        }
                        //丢盔卸甲_音效
                        if (trigger.card.name == 'bxyr_xiejiaguitian' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/diukui.mp3');
                        }
                        //陷阵_音效
                        if (trigger.card.name == 'bxyr_xianzhen' && get.type(trigger.card) == 'trick') {
                            game.playAudio('../extension/标记补充/audio/xianzhen.mp3');
                        }
                    },
                };
				//主内对决
                lib.skill._player_zhunei = {
					trigger: {
						global: 'dieAfter'
					},
					forced: true,
					filter: function (event, player) {
						if (game.zhu && game.zhu.isAlive() && game.players.length == 2 && get.population('nei') == 1) return true;
					},
					content: function () {
						decadeUI.animation.playSpine({
							name: 'neijian',
							speed: 0.4
						}, { scale: 0.7 });
                        game.playAudio('../extension/标记补充/audio/daoguang.mp3');
					},
                    ai: {
						threaten: 1.5
					}
				}
                // 成为目标时
                lib.skill._shiyongkapaitexiao_xi_gua_ = {
                    trigger: {
                        target: "useCardToTargeted",
                    },
                    charlotte: true,
                    forced: true,
                    popup: false,
                    audio: false,
                    content: function () {
                        //过河拆桥
                        if (trigger.card.name == 'guohe' && get.type(trigger.card) == 'trick') {
    dcdAnim.loadSpine(xixiguagua.effect_guohechaiqiao.name, "skel", function () {
        xixiguagua.effect_guohechaiqiao.action = "zizouqi_guohechaiqiao_futou";
        dcdAnim.playSpine(xixiguagua.effect_guohechaiqiao, { scale: 0.75, speed: 1, parent: player });
    });
    dcdAnim.loadSpine(xixiguagua.effect_guohechaiqiao.name, "skel", function () {
        xixiguagua.effect_guohechaiqiao.action = "zizouqi_guohechaiqiao_qiao";
        dcdAnim.playSpine(xixiguagua.effect_guohechaiqiao, { scale: 1, speed: 1, parent: player });
    });
    game.playAudio('../extension/标记补充/audio/guohechaiqiao.mp3');
                        }
                        //顺手牵羊
                        if (trigger.card.name == 'shunshou' && get.type(trigger.card) == 'trick') {
                             dcdAnim.loadSpine(xixiguagua.shunshouqianyang.name, "skel", function () {
                                xixiguagua.shunshouqianyang.action = "yang";
                                xixiguagua.shunshouqianyang.loop = true;
                               var shunshou = dcdAnim.playSpine(xixiguagua.shunshouqianyang, { scale: 0.8, speed: 0.75, parent: player });
                            var y1 = trigger.player.offsetLeft;
                            var x1 = trigger.player.offsetTop;
                            var y = player.offsetLeft;
                            var x = player.offsetTop;
                            var xx = Math.atan2((y1 - y), x1 - x);
                            var yy = radiansToDegrees(xx);
                            shunshou.rotateTo(yy);
                            shunshou.moveTo(-(player.offsetLeft - trigger.player.offsetLeft - 70), (player.offsetTop - trigger.player.offsetTop + 90), 1000);
                            shunshou.oncomplete = function () {
                                decadeUI.animation.stopSpine(this);
                                this.oncomplete = null;
                            };
                            });
                            game.playAudio('../extension/标记补充/audio/shunshouqianyang.mp3');
                        }
                    },
                };
                //游戏结束时执行          
                // lib.onover.push(function (bool) {
                // for (var i of game.players) {
                    // if (i.storage._jiubuff_ != undefined) {
                        // decadeUI.animation.stopSpine(i.storage._jiubuff_);
                        // i.storage._jiubuff_ = undefined;
                    // }
                    // if (i.storage._jiuwo_ != undefined) {
                        // decadeUI.animation.stopSpine(i.storage._jiuwo_);
                        // i.storage._jiuwo_ = undefined;    
                    // }   
                    // }             
                // });                               
            };
            // //刀剑斧
            // 斧子
    if (config.daojianfu  == 'fuzi') {        
            lib.skill._player_daojianfu_xxgg_fuzi_ = {
                        trigger: {
                            player: 'damageBegin4'
                        },
                        charlotte: true,
                        forced: true,                        
                        content: function () {    
                            //受击特效开始01
                            let pt = trigger.source;
                            let mma, mmb, mmc, mmd, mme;
                            if (pt && !pt.storage.shoujitype) pt.storage.shoujitype = ['dao', 'jian', 'fuzi'].randomGet();
                            if (!pt) mma = 'jian';
                            else mma = pt.storage.shoujitype;
    
                            if (mma == 'dao') mmb = ['play', 'play2'], mmc = ['play', 'play2'];
                            if (mma == 'fuzi') mmb = ['play3', 'play4'], mmc = ['play3', 'play4'];
                            if (mma == 'jian') mmb = ['play5', 'play6'], mmc = ['play5', 'play6'];
                            if (trigger.parent && (trigger.parent.name == 'nanman' || trigger.parent.name == 'wanjian' || trigger.parent.name == 'huogong' || trigger.parent.name == 'nsf_huogong' || trigger.parent.name == 'juedou' || trigger.parent.name == 'bxyr_shidu')) {
                                dcdAnim.loadSpine(xixiguagua[trigger.parent.name].name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua[trigger.parent.name], {
                                        scale: 0.6,
                                        x: [0, 0.55],
                                        y: [0, 0.485],
                                        parent: player
                                    });
                                });
                                game.playAudio('../extension/标记补充/audio/' + trigger.parent.name + '.mp3');
                                if (trigger.num > 1) game.playAudio('../extension/标记补充/audio/damage2.mp3');
                            } else if (trigger.parent && trigger.parent.name == 'shandian') {
                                game.playAudio('../extension/标记补充/audio/' + trigger.parent.name + '.mp3');
                            }//受击特效结束01
            // 一点伤害                                   
            if(trigger.num <= 1){            
            dcdAnim.loadSpine(xixiguagua.fuzi.name, "skel", function () {
            dcdAnim.playSpine(xixiguagua.fuzi, {  scale: 0.7,x:[0,0.55],y:[0,0.485], parent: player });
            });    
            if(!trigger.nature){
            game.playAudio('../extension/标记补充/audio/damage.mp3');}     
            if(trigger.nature == 'fire'){           
            dcdAnim.loadSpine(xixiguagua.huoshouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.huoshouji, {  scale: 0.5,parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_fire.mp3');	
            });}          
            if(trigger.nature == 'thunder'){            
            dcdAnim.loadSpine(xixiguagua.leishouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.leishouji, {  scale: 0.6,y:[0,0.55],parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_thunder.mp3');	
            });}}
            // 两点伤害                   
            if(trigger.num > 1){         
            dcdAnim.loadSpine(xixiguagua.baoji.name, "skel", function () {
            dcdAnim.playSpine(xixiguagua.baoji, {  scale: 0.6,x:[0,0.55], parent: player });
            });                                  
            dcdAnim.loadSpine(xixiguagua.fuzi.name, "skel", function () {
            dcdAnim.playSpine(xixiguagua.fuzi, {  scale: 0.7,x:[0,0.55],y:[0,0.485], parent: player });
            });
            if(!trigger.nature){
            game.playAudio('../extension/标记补充/audio/damage2.mp3');}     
            if(trigger.nature == 'fire'){            
            dcdAnim.loadSpine(xixiguagua.huoshouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.huoshouji, {  scale: 0.5,parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_fire2.mp3');	
            });}          
            if(trigger.nature == 'thunder'){            
            dcdAnim.loadSpine(xixiguagua.leishouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.leishouji, {  scale: 0.6,y:[0,0.55],parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_thunder2.mp3');	
            });}}                                 
            },            
            };};
            // 刀
                if (config.daojianfu  == 'dao') {        
            lib.skill._player_daojianfu_xxgg_dao_ = {
                        trigger: {
                            player: 'damageBegin4'
                        },
                        charlotte: true,
                        forced: true,                        
                        content: function () {   
                            //受击特效开始02
                            let pt = trigger.source;
                            let mma, mmb, mmc, mmd, mme;
                            if (pt && !pt.storage.shoujitype) pt.storage.shoujitype = ['dao', 'jian', 'fuzi'].randomGet();
                            if (!pt) mma = 'jian';
                            else mma = pt.storage.shoujitype;
    
                            if (mma == 'dao') mmb = ['play', 'play2'], mmc = ['play', 'play2'];
                            if (mma == 'fuzi') mmb = ['play3', 'play4'], mmc = ['play3', 'play4'];
                            if (mma == 'jian') mmb = ['play5', 'play6'], mmc = ['play5', 'play6'];
                            if (trigger.parent && (trigger.parent.name == 'nanman' || trigger.parent.name == 'wanjian' || trigger.parent.name == 'huogong' || trigger.parent.name == 'nsf_huogong' || trigger.parent.name == 'juedou' || trigger.parent.name == 'bxyr_shidu')) {
                                dcdAnim.loadSpine(xixiguagua[trigger.parent.name].name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua[trigger.parent.name], {
                                        scale: 0.6,
                                        x: [0, 0.55],
                                        y: [0, 0.485],
                                        parent: player
                                    });
                                });
                                game.playAudio('../extension/标记补充/audio/' + trigger.parent.name + '.mp3');
                                if (trigger.num > 1) game.playAudio('../extension/标记补充/audio/damage2.mp3');
                            } else if (trigger.parent && trigger.parent.name == 'shandian') {
                                game.playAudio('../extension/标记补充/audio/' + trigger.parent.name + '.mp3');
                            }//受击特效结束02
// 一点伤害                                   
            if(trigger.num <= 1){            
            dcdAnim.loadSpine(xixiguagua.dao.name, "skel", function () {
            dcdAnim.playSpine(xixiguagua.dao, {  scale: 0.7,y:[0,0.55],parent: player });
            });    
            if(!trigger.nature){
            game.playAudio('../extension/标记补充/audio/damage.mp3');}     
            if(trigger.nature == 'fire'){           
            dcdAnim.loadSpine(xixiguagua.huoshouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.huoshouji, {  scale: 0.5,y:[0,0.58],parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_fire.mp3');	
            });}          
            if(trigger.nature == 'thunder'){            
            dcdAnim.loadSpine(xixiguagua.leishouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.leishouji, {  scale: 0.6,y:[0,0.58],parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_thunder.mp3');	
            });}}
            // 两点伤害                   
            if(trigger.num > 1){         
            dcdAnim.loadSpine(xixiguagua.baoji.name, "skel", function () {
            dcdAnim.playSpine(xixiguagua.baoji, {  scale: 0.6, y:[0,0.58],parent: player });
            });                                  
            dcdAnim.loadSpine(xixiguagua.dao.name, "skel", function () {
            dcdAnim.playSpine(xixiguagua.dao, {  scale: 0.7, y:[0,0.58],parent: player });
            });
            if(!trigger.nature){
            game.playAudio('../extension/标记补充/audio/damage2.mp3');}     
            if(trigger.nature == 'fire'){            
            dcdAnim.loadSpine(xixiguagua.huoshouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.huoshouji, {  scale: 0.5,y:[0,0.58],parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_fire2.mp3');	
            });}          
            if(trigger.nature == 'thunder'){            
            dcdAnim.loadSpine(xixiguagua.leishouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.leishouji, {  scale: 0.6,y:[0,0.58],parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_thunder2.mp3');	
            });}}                   
            },            
            };};
                        // 剑
                if (config.daojianfu  == 'jian') {        
            lib.skill._player_daojianfu_xxgg_jian_ = {
                        trigger: {
                            player: 'damageBegin4'
                        },
                        charlotte: true,
                        forced: true,                        
                        content: function () {                       
                            //受击特效开始03
                            let pt = trigger.source;
                            let mma, mmb, mmc, mmd, mme;
                            if (pt && !pt.storage.shoujitype) pt.storage.shoujitype = ['dao', 'jian', 'fuzi'].randomGet();
                            if (!pt) mma = 'jian';
                            else mma = pt.storage.shoujitype;
    
                            if (mma == 'dao') mmb = ['play', 'play2'], mmc = ['play', 'play2'];
                            if (mma == 'fuzi') mmb = ['play3', 'play4'], mmc = ['play3', 'play4'];
                            if (mma == 'jian') mmb = ['play5', 'play6'], mmc = ['play5', 'play6'];
                            if (trigger.parent && (trigger.parent.name == 'nanman' || trigger.parent.name == 'wanjian' || trigger.parent.name == 'huogong' || trigger.parent.name == 'juedou' || trigger.parent.name == 'bxyr_shidu')) {
                                dcdAnim.loadSpine(xixiguagua[trigger.parent.name].name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua[trigger.parent.name], {
                                        scale: 0.6,
                                        x: [0, 0.55],
                                        y: [0, 0.485],
                                        parent: player
                                    });
                                });
                                game.playAudio('../extension/标记补充/audio/' + trigger.parent.name + '.mp3');
                                if (trigger.num > 1) game.playAudio('../extension/标记补充/audio/damage2.mp3');
                            } else if (trigger.parent && trigger.parent.name == 'shandian') {
                                game.playAudio('../extension/标记补充/audio/' + trigger.parent.name + '.mp3');
                            }//受击特效结束03
// 一点伤害                                   
            if(trigger.num <= 1){            
            dcdAnim.loadSpine(xixiguagua.jian.name, "skel", function () {
            dcdAnim.playSpine(xixiguagua.jian, {  scale: 0.7, parent: player });
            });    
            if(!trigger.nature){
            game.playAudio('../extension/标记补充/audio/damage.mp3');}     
            if(trigger.nature == 'fire'){           
            dcdAnim.loadSpine(xixiguagua.huoshouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.huoshouji, {  scale: 0.5,parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_fire.mp3');	
            });}          
            if(trigger.nature == 'thunder'){            
            dcdAnim.loadSpine(xixiguagua.leishouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.leishouji, {  scale: 0.6,parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_thunder.mp3');	
            });}}
            // 两点伤害                   
            if(trigger.num > 1){         
            dcdAnim.loadSpine(xixiguagua.baoji.name, "skel", function () {
            dcdAnim.playSpine(xixiguagua.baoji, {  scale: 0.6,parent: player });
            });                                  
            dcdAnim.loadSpine(xixiguagua.jian.name, "skel", function () {
            dcdAnim.playSpine(xixiguagua.jian, {  scale: 0.7, parent: player });
            });
            if(!trigger.nature){
            game.playAudio('../extension/标记补充/audio/damage2.mp3');}     
            if(trigger.nature == 'fire'){            
            dcdAnim.loadSpine(xixiguagua.huoshouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.huoshouji, {  scale: 0.5,parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_fire2.mp3');	
            });}          
            if(trigger.nature == 'thunder'){            
            dcdAnim.loadSpine(xixiguagua.leishouji.name, "skel", function () {
            setTimeout(function () {
            dcdAnim.playSpine(xixiguagua.leishouji, {  scale: 0.6,parent: player });
            }, 300);
            game.playAudio('../extension/标记补充/audio/damage_thunder2.mp3');	       
            });}}                   
            },            
            };};
            //游戏结算
            lib.onover.push(function (bool) {
                if (config.youxishengfu == 'identity') {
                    if (bool === true) {
                        if (game.me.identity == 'fan' && lib.config.mode == 'identity') {
         dcdAnim.loadSpine(xixiguagua.SF_jiesuan_eff_fanzeishengli.name, "skel", function () {
         dcdAnim.playSpine(xixiguagua.SF_jiesuan_eff_fanzeishengli, { scale: 1 });
                            });
                        } else if (game.me.identity == 'nei' && lib.config.mode == 'identity') {
                            dcdAnim.loadSpine(xixiguagua.SF_jiesuan_eff_neijianshengli.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.SF_jiesuan_eff_neijianshengli, { scale: 1 });
                            });
                        } else if (game.me.identity == 'zhong' && lib.config.mode == 'identity') {                       
                            dcdAnim.loadSpine(xixiguagua.SF_jiesuan_eff_zczgshengli.name, "skel", function () {
                                xixiguagua.SF_jiesuan_eff_zczgshengli.action = "play";
                                dcdAnim.playSpine(xixiguagua.SF_jiesuan_eff_zczgshengli, { scale: 1 });
                            });
                        } else if (game.me.identity == 'zhu' && lib.config.mode == 'identity') {
                            dcdAnim.loadSpine(xixiguagua.SF_jiesuan_eff_zczgshengli.name, "skel", function () {
                                xixiguagua.SF_jiesuan_eff_zczgshengli.action = "play3";
                                dcdAnim.playSpine(xixiguagua.SF_jiesuan_eff_zczgshengli, { scale: 1 });
                            });
                        }
                        else if (lib.config.mode != 'identity') {
                            dcdAnim.loadSpine(xixiguagua.Xshengli.name, "skel", function () {
                                dcdAnim.playSpine(xixiguagua.Xshengli, { scale: 0.75 });
                            });
                        }
                    }
                    else if (bool === false) {
                        dcdAnim.loadSpine(xixiguagua.Xnoshengli.name, "skel", function () {
                            xixiguagua.Xnoshengli.action = "play";
                            dcdAnim.playSpine(xixiguagua.Xnoshengli, { scale: 0.75 });
                        });
                    } else {
                        dcdAnim.loadSpine(xixiguagua.Xnoshengli.name, "skel", function () {
                            xixiguagua.Xnoshengli.action = "play3";
                            dcdAnim.playSpine(xixiguagua.Xnoshengli, { scale: 0.75 });
                        });
                    }
                }  
                if (config.youxishengfu == 'mobileMode') {
                    if (bool == true) {                        
                        dcdAnim.loadSpine(xixiguagua.XXshengli.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.XXshengli, { scale: 3, x: [0, 0.35], y: [0, 0.2], speed: 0.4 });
                        });
                    }
                    else if (bool == false) {
                        dcdAnim.loadSpine(xixiguagua.XXshibai.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.XXshibai, { scale: 1.5, speed: 0.4});
                        });
                    }
                    else {
                        dcdAnim.loadSpine(xixiguagua.XXpingju.name, "skel", function () {
                            dcdAnim.playSpine(xixiguagua.XXpingju, {scale: 1, speed: 0.4 });
                        });
                    }
                }
            });

            if (config.xinshadoudizhu) {
                //兵临城下斗地主修改
                if (lib.config.mode == 'doudizhu') {
                    if (get.config('doudizhu_mode') == 'binglin') {
                        ui.background.style.setProperty("z-index", "6");
                    }
                }
                lib.skill._binglintu = {
                    forced: true,
                    trigger: {
                        global: ["gameStart", "roundStart"],
                        player: 'enterGame',
                    },
                    content: function () {
                        if (lib.config.mode == 'doudizhu') {
                            if (get.config('doudizhu_mode') == 'binglin') {
                                if (event.triggername == 'gameStart') {
                                    ui.background.style.setProperty("z-index", "-1");
                                }
                                if (event.triggername == 'gameStart') {

                                    if (game.zhuSkill == 'zhuSkill_jiangling') {
                                        var skill = document.createElement('img');
                                        skill.setAttribute("id", "hh");
                                        skill.src = lib.assetURL + "extension/标记补充/image/binglin_jiangling.png";
                                        skill.style.cssText =
                                            "--w: 200px;--h: 80px;width: var(--w);height: var(--h);position: absolute;top: 0px;left:780px;z-index:1"
                                        document.body.appendChild(skill);
                                        //var div1 = document.getElementsByTagName("div");
                                        //div1[0].appendChild(skill);
                                    }
                                    else if (game.zhuSkill == 'zhuSkill_xiangyang') {
                                        var skill = document.createElement('img');
                                        skill.setAttribute("id", "hh");
                                        skill.src = lib.assetURL + "extension/标记补充/image/binglin_xiangyang.png";
                                        skill.style.cssText =
                                            "--w: 200px;--h: 80px;width: var(--w);height: var(--h);position: absolute;top: 0px;left:780px;z-index:1"
                                        document.body.appendChild(skill);
                                        //var div1 = document.getElementsByTagName("div");
                                        //div1[0].appendChild(skill);
                                    }
                                    else if (game.zhuSkill == 'zhuSkill_fancheng') {
                                        var skill = document.createElement('img');
                                        skill.src = lib.assetURL + "extension/标记补充/image/binglin_fancheng.png";
                                        skill.setAttribute("id", "hh");
                                        skill.style.cssText =
                                            "--w: 200px;--h: 80px;width: var(--w);height: var(--h);position: absolute;top: 0px;left:780px;z-index:1"//pointer-events:none;display: block; 
                                        document.body.appendChild(skill);
                                        //var div1 = document.getElementsByTagName("div");
                                        //div1[0].appendChild(skill);
                                    }
                                }
                                if (game.roundNumber == 3) {
                                    var img = document.getElementById("hh");
                                    img.parentNode.removeChild(img);//通过父节点删除子节点
                                }
                                if (game.roundNumber == 3) {
                                    var jianxi = document.createElement('img');
                                    jianxi.src = lib.assetURL + "extension/标记补充/image/binglin_jianxi.png";
                                    jianxi.style.cssText =
                                        "--w: 200px;--h: 80px;width: var(--w);height: var(--h);position: absolute;top: 0px;left:780px;z-index:1";
                                    document.body.appendChild(jianxi);
                                }
                            }
                        }
                    },
                }
                if (lib.config.mode == 'doudizhu') {
                    if (get.config('doudizhu_mode') == 'binglin') {
                        var cb = ui.create.node('img');
                        cb.setAttribute("id", "gg");
                        cb.src = lib.assetURL + 'extension/标记补充/image/出兵50.png';
                        cb.style.cssText = "--w: 80px;--h: 40px;width: var(--w);height: var(--h);position: absolute;top: 60px;left:120px;z-index:1";
                        document.body.appendChild(cb);
                    }
                }
                lib.skill._dysp = {
                    trigger: {
                        global: 'gameStart',
                    },
                    forced: true,
                    direct: true,
                    content: function () {
                        if (lib.config.mode == 'doudizhu') {
                            if (get.config('doudizhu_mode') == 'binglin') {
                                /*var num = ['1', '2', '3'];*/
                                if (game.me.identity != 'zhu') {
                                    var sp = document.createElement('img');
                                    sp.src = lib.assetURL + 'extension/标记补充/image/duiyoushoupai.png';
                                    sp.style.cssText = "--w: 60px;--h: 40px;width: var(--w);height: var(--h);position: absolute;top: 20px;left:120px;z-index:1";
                                    document.body.appendChild(sp);
                                }
                            }
                        }
                    }
                }
                lib.game.chooseCharacterBinglin = function () {
                    var next = game.createEvent('chooseCharacter', false);
                    next.setContent(function () {
                        "step 0"
                        game.no_continue_game = true;
                        lib.init.onfree();
                        "step 1"
                        ui.arena.classList.add('choose-character');
                        game.zhuSkill = 'zhuSkill_' + ['xiangyang', 'jiangling', 'fancheng'].randomGet();
                        var i;
                        event.list = [];
                        event.map = {};
                        for (i in lib.character) {
                            if (lib.filter.characterDisabled(i)) continue;
                            event.list.push(i);
                        }
                        event.list.randomSort();
                        _status.characterlist = event.list.slice(0);
                        for (var player of game.players) {
                            event.map[player.playerid] = event.list.randomRemove(4);
                        }
                        event.controls = ['放弃出兵', '出兵50', '出兵100', '出兵150'];
                        event.dialog = ui.create.dialog('本局城池：' + get.translation(game.zhuSkill), [event.map[game.me.playerid], 'character']);
                        event.start = game.players.randomGet();
                        event.current = event.start;
                        game.delay(8);
                        "step 2"
                        event.current.classList.add('glow_phase');
                        if (event.current == game.me) event.dialog.content.firstChild.innerHTML = '是否出兵？';
                        else {
                            event.dialog.content.firstChild.innerHTML = '请等待其他玩家出兵';
                            game.delay(2);
                        }
                        event.current.chooseControl(event.controls).set('ai', function () {
                            return _status.event.getParent().controls.randomGet();
                        });
                        "step 3"
                        event.current.classList.remove('glow_phase');
                        event.current._control = result.control;
                        event.current.chat(result.control);
                        if (result.control == '出兵150') {
                            game.bonusNum = 3;
                            if (document.getElementById("gg")) {
                                var img1 = document.getElementById("gg");
                                img1.parentNode.removeChild(img1);
                            }
                            var cb = ui.create.node('img');
                            cb.src = lib.assetURL + 'extension/标记补充/image/出兵150.png';
                            cb.style.cssText = "--w: 80px;--h: 40px;width: var(--w);height: var(--h);position: absolute;top: 60px;left:120px;z-index:1";
                            document.body.appendChild(cb);
                            game.zhu = event.current;
                            return;
                        }
                        else if (result.control != '放弃出兵') {
                            event.controls.splice(1, event.controls.indexOf(result.control));
                            /*event.controls.unshift('放弃出兵');*/
                            event.tempDizhu = event.current;
                            if (result.control == '出兵100') {
                                game.bonusNum = 2;

                                if (document.getElementById("gg")) {
                                    var img2 = document.getElementById("gg");
                                    img2.parentNode.removeChild(img2);
                                }
                                var cb = ui.create.node('img');
                                cb.src = lib.assetURL + 'extension/标记补充/image/出兵100.png';
                                cb.style.cssText = "--w: 80px;--h: 40px;width: var(--w);height: var(--h);position: absolute;top: 60px;left:120px;z-index:1";
                                document.body.appendChild(cb);
                            }
                        }
                        event.current = event.current.next;
                        if (event.current == event.start) {
                            game.zhu = event.tempDizhu || event.start.previous;
                        }
                        else event.goto(2);
                        if (event.current == event.start.previous && !event.tempDizhu) event.controls.remove('放弃出兵');
                        "step 4"
                        for (var player of game.players) {
                            player.identity = player == game.zhu ? 'zhu' : 'fan';
                            player.showIdentity();
                        }

                        /**/
                        var shang = game.me.getNext();
                        var xia = game.me.getPrevious();
                        if (lib.config.mode != 'doudizhu') return;
                        if (xia.identity == 'zhu') {
                            xia.style.right = '45%';
                            xia.style.left = 'auto';
                            xia.style.top = 'auto';
                            shang.style.left = 'auto';
                            shang.style.top = 'calc(50% - 140px)';
                            shang.style.right = '2.5%';
                        }
                        else if (shang.identity == 'zhu') {
                            shang.style.left = '45%';
                            shang.style.right = 'auto';
                            shang.style.top = 'auto';
                            xia.style.left = '0';
                            xia.style.top = 'calc(50% - 140px)';
                            xia.style.right = 'auto';
                        }
                        else if (game.me.identity == 'zhu') {
                            shang.style.left = 'auto';
                            shang.style.top = 'calc(50% - 140px)';
                            shang.style.right = '2.5%';
                            xia.style.left = '0';
                            xia.style.top = 'calc(50% - 140px)';
                            xia.style.right = 'auto';
                        }
                        /* */
                        event.dialog.close();
                        event.map[game.zhu.playerid].addArray(event.list.randomRemove(3));
                        "step 5"
                        var list = ['请选择你的武将', [event.map[game.me.playerid], 'character']];
                        if (game.me.identity == 'fan') {
                            var friend = game.findPlayer(function (current) {
                                return current != game.me && current.identity == 'fan';
                            });
                            list.push('<div class="text center">队友的选将框</div>');
                            list.push([event.map[friend.playerid], 'character']);
                        }
                        game.me.chooseButton(list, true).set('list', event.map[game.me.playerid]).set('filterButton', function (button) {
                            return _status.event.list.contains(button.link);
                        });
                        "step 6"
                        game.me.init(result.links[0]);
                        for (var player of game.players) {
                            if (player != game.me) player.init(event.map[player.playerid].randomGet());
                            if (player == game.zhu) {
                                player.addSkill(game.zhuSkill);
                                //decadeUI.animation.playSpine({ name: 'chenzhu', speed: 1, loop: true, }, { scale: 0.5, parent: player });
                                dcdAnim.loadSpine(xixiguagua.chenzhu.name, "skel", function () {
                                    dcdAnim.playSpine(xixiguagua.chenzhu, { speed: 1, scale: 0.5, parent: player });
                                });
                            }
                            else player.addSkill('binglin_neihong');
                        }
                        game.zhu.hp++;
                        game.zhu.maxHp++;
                        game.zhu.update();
                        for (var i = 0; i < game.players.length; i++) {
                            _status.characterlist.remove(game.players[i].name1);
                            _status.characterlist.remove(game.players[i].name2);
                        }
                        setTimeout(function () {
                            ui.arena.classList.remove('choose-character');
                        }, 500);
                    });
                }
            };
            //虚拟装备部分
            if (config.xunizhuangbeipai) {
                lib.skill._xinizhuangbei_gua = {
                    trigger: {
                        global: ["loseEnd", "equipEnd", "dieEnd", "recoverEnd", "loseHpEnd", "damageEnd", "phaseZhunbeiEnd", "phaseJieshuEnd"],
                    },
                    firstDo: true,
                    charlotte: true,
                    silent: true,
                    firstDo: true,
                    forced: true,
                    content: function () {
                        'step 0'
                        //防具
                        //       if(player.hasSkill("bazhen_bagua")||player.hasSkill('linglong_bagua')){
                        var scbgz = document.querySelector('.bazhen_bagua');
                        if (scbgz) { scbgz.parentNode.removeChild(scbgz); }
                        //防御马
                        //     if(player.hasSkill("juliao")||player.hasSkill("feiying")||player.hasSkill("spshidi")){
                        var scjlmk = document.querySelector('.game_xunifangyuma');
                        if (scjlmk) { scjlmk.parentNode.removeChild(scjlmk); }
                        //进攻马
                        //    if(player.hasSkill("mashu")||player.hasSkill("mashu2")||player.hasSkill("qianju")||player.hasSkill("spshidi")){
                        var scjlmk = document.querySelector('.game_xunijingongma');
                        if (scjlmk) { scjlmk.parentNode.removeChild(scjlmk); }
                    },
                };
                lib.skill._xinizhuangbei_gua_gua = {
                    trigger: {
                        global: ["gameStart", "loseAfter", "dieAfter", "equipAfter", "recoverAfter", "loseHpAfter", "damageAfter", "phaseZhunbeiAfter", "phaseJieshuAfter"],
                    },
                    firstDo: true,
                    charlotte: true,
                    silent: true,
                    lastDo: true,
                    forced: true,
                    content: function () {
                        'step 1'
                        //八卦阵                     
                        if (player.hasSkill("bazhen_bagua") || player.hasSkill('linglong_bagua')) {
                            if (player.isEmpty(2)) {
                                var bgz = ui.create.div('.bazhen_bagua', player);
                                bgz.innerHTML = '八卦阵';
                            }
                        }
                        //据辽
                        if (player.hasSkill("juliao")) {
                            if (game.countGroup() > 0) {
                                var jlmk = ui.create.div('.game_xunifangyuma', player);
                                if (!player.isEmpty(3)) { jlmk.innerHTML = (game.countGroup()); } else if ((game.countGroup() - 1) > 0) { jlmk.innerHTML = '+' + (game.countGroup() - 1); }
                            }
                        }
                        //飞影
                        if (player.hasSkill("feiying")) {
                            var jlmk = ui.create.div('.game_xunifangyuma', player);
                            if (!player.isEmpty(3)) { jlmk.innerHTML = 2; } else { jlmk.innerHTML = '+' + 1; }
                        }
                        //马术
                        if (player.hasSkill("mashu") || player.hasSkill("mashu2")) {
                            var jlmk = ui.create.div('.game_xunijingongma', player);
                            if (!player.isEmpty(4)) { jlmk.innerHTML = 2; } else { jlmk.innerHTML = '-' + 1; }
                        }
                        //千驹
                        if (player.hasSkill("qianju")) {
                            var jlmk = ui.create.div('.game_xunijingongma', player);
                            if (!player.isEmpty(4)) { jlmk.innerHTML = player.getDamagedHp() + 1; } else if (player.getDamagedHp() > 0) { jlmk.innerHTML = '-' + player.getDamagedHp(); }
                        }
                        //势敌
                        if (player.hasSkill("spshidi")) {
                            if (player.countMark('spshidi') % 2 == 0) {
                                var jlmk = ui.create.div('.game_xunijingongma', player);
                                if (!player.isEmpty(4)) { jlmk.innerHTML = 2; } else { jlmk.innerHTML = '-' + 1; }
                            } else if (player.countMark('spshidi') % 2 == 1) {
                                var jlmk = ui.create.div('.game_xunifangyuma', player);
                                if (!player.isEmpty(3)) { jlmk.innerHTML = 2; } else {
                                    jlmk.innerHTML = '+' + 1;
                                }
                            }
                        }

                    },
                };

            };
            //标记部分
            if (config.biaojixiugai) {
                lib.arenaReady.push(function () {
                    //谋孙权 统业
                    lib.skill.sbtongye = {
                        audio:2,
                        trigger:{
                            player:"phaseJieshuBegin",
                        },
                        forced:true,
                        onremove:true,
                        content:function(){
                            'step 0'
                            player.chooseControl('场上装备数量有变','场上装备数量不变').set('prompt','统业：猜测场上装备数是否于你下回合准备阶段前发生变化').set('ai',()=>(game.countPlayer()<=4?Math.random():1)<0.4);
                            'step 1'
                            if(result.control=='场上装备数量有变'){
                            player.storage.sbtongye_mark = '不变';
                                player.addSkill("sbtongye_mark");
                                player.addSkill('sbtongye_change',1);
                                // player.chat('变！');
                            }else{
                            player.storage.sbtongye_mark = '不变';
                                player.addSkill("sbtongye_mark");
                                player.addSkill('sbtongye_nochange',1);
                                // player.chat('不变！');
                            }
                            var num=game.filterPlayer().map(i=>i.countCards('e')).reduce((p,c)=>p+c,0);
                            player.removeMark('sbtongye_count',player.countMark('sbtongye_count'),false);
                            if(num>0) player.addMark('sbtongye_count',num,false);        
                            player.addSkill('sbtongye_settle');
                                
                        },
                        marktext:"业",
                        intro:{
                            name:"统业",
                            "name2":"业",
                            content:"mark",
                        },
                        subSkill:{
                            broadcast:{
                                trigger:{
                                    global:["loseAfter","equipAfter","addJudgeAfter","gainAfter","loseAsyncAfter","addToExpansionAfter"],
                                },
                                charlotte:true,
                                silent:true,
                                filter:function(event,player){
                                    var num=0;
                                    game.countPlayer(function(current){
                                        var evt=event.getl(current);
                                        if(evt&&evt.es) num+=evt.es.length;
                                    });
                                    if(event.name=='equip') num--;                               
                                    return num!=0;                
                                },
                                content:function(){
                                    if(player.hasSkill('sbtongye_change')) player.markSkill('sbtongye_change');
                                    if(player.hasSkill('sbtongye_nochange')) player.markSkill('sbtongye_nochange');
                                    
                                var xx=game.filterPlayer().map(i=>i.countCards('e')).reduce((p,c)=>p+c,0)-player.countMark('sbtongye_count');
                                if(xx>0){gg='增加'}else{gg='减少'}            
                                var xx= Math.abs(xx);
                                if(xx!=0){
                                player.storage.sbtongye_mark = gg+xx+'件';          
                                }else{
                                player.storage.sbtongye_mark = '不变';                    
                                }
                                player.syncStorage("sbtongye_mark");            
                                },
                                sub:true,
                                parentskill:"sbtongye",
                                forced:true,
                                popup:false,
                            },        
                            settle:{
                                audio:"sbtongye",
                                init:function(player){
                                    player.addSkill('sbtongye_broadcast');
                                },
                                trigger:{
                                    player:"phaseZhunbeiBegin",
                                },
                                forced:true,
                                charlotte:true,
                                filter:function(event,player){
                                    return player.hasSkill('sbtongye_change')||player.hasSkill('sbtongye_nochange');
                                },
                                content:function(){
                                    var delta=game.filterPlayer().map(i=>i.countCards('e')).reduce((p,c)=>p+c,0)-player.countMark('sbtongye_count');
                                    if(player.hasSkill('sbtongye_change')&&delta!=0||player.hasSkill('sbtongye_nochange')&&delta==0){
                                        game.log(player,'猜测','#g正确');
                                        if(player.countMark('sbtongye')<2) player.addMark('sbtongye',1);
                                    }else{
                                        game.log(player,'猜测','#y错误');
                                        player.removeMark('sbtongye',1);
                                    }
                                    player.removeSkill('sbtongye_change');
                                    player.removeSkill('sbtongye_nochange');
                                    player.removeSkill('sbtongye_settle');
                                    player.removeSkill('sbtongye_broadcast');
                                    player.removeSkill('sbtongye_mark');
                                },
                                sub:true,
                                parentskill:"sbtongye",
                            },
                            change:{
                                charlotte:true,
                                mark:true,
                                marktext:"统业 有变",
                                intro:{
                                    mark:function(dialog,storage,player){
                                        dialog.addText(get.translation(player)+'猜测场上装备数发生变化');
                                        var delta=game.filterPlayer().map(i=>i.countCards('e')).reduce((p,c)=>p+c,0)-player.countMark('sbtongye_count');
                                        if(delta==0) dialog.addText('(当前未发生变化)');
                                        else dialog.addText('(当前已'+(delta>0?'增加':'减少')+get.cnNumber(Math.abs(delta))+'张装备牌)');
                                    },
                                },
                                sub:true,
                                parentskill:"sbtongye",
                            },
                            nochange:{
                                charlotte:true,
                                mark:true,
                                marktext:"统业 不变",
                                intro:{
                                    mark:function(dialog,storage,player){
                                        dialog.addText(get.translation(player)+'猜测场上装备数不发生变化');
                                        var delta=game.filterPlayer().map(i=>i.countCards('e')).reduce((p,c)=>p+c,0)-player.countMark('sbtongye_count');
                                        if(delta==0) dialog.addText('(当前未发生变化)');
                                        else dialog.addText('(当前已'+(delta>0?'增加':'减少')+get.cnNumber(Math.abs(delta))+'张装备牌)');
                                    },
                                },
                                sub:true,
                                parentskill:"sbtongye",
                            },
                            mark:{        
                            marktext:"装备",
                            onremove:true,
                            mark:true,
                            intro:{
                            content: function(storage, player, skill) {
                                            return '场上装备已 '+player.storage.sbtongye_mark;
                                        }
                                },                          
                                sub:true,
                                parentskill:"sbtongye",
                            },
                        },
                    }    
                    //谋黄盖 诈降
                        lib.skill.sbzhaxiang = {
                        audio:2,
                        trigger:{
                            player:"useCard",
                        },
                        forced:true,
                        group:["sbzhaxiang_draw","sbzhaxiang_mark"],
                        filter:function(event,player){
                        var xx=player.getHistory('useCard').length - player.getDamagedHp()
                        if(xx==0){player.removeSkill('sbzhaxiang_mark2');} 
                            return player.getHistory('useCard').length<=player.getDamagedHp();
                        },
                        content:function(){   
                        trigger.directHit.addArray(game.filterPlayer());  
                        if(_status.currentPhase==player){  
                        player.storage.sbzhaxiang_mark2=player.getDamagedHp() - player.getHistory('useCard').length;
                        player.syncStorage("sbzhaxiang_mark2");   
                        }
                        },
                        ai:{
                            threaten:1.5,
                            "directHit_ai":true,
                            skillTagFilter:function(player,tag,arg){
                                return player.countUsed()<player.getDamagedHp();
                            },
                        },
                        mod:{
                            targetInRange:function(card,player){
                                if(player.countUsed()<player.getDamagedHp()) return true;
                            },
                            cardUsable:function(card,player){
                                if(player.countUsed()<player.getDamagedHp()) return Infinity;
                            },
                            aiOrder:function(player,card,num){
                                if(player.countUsed()>=player.getDamagedHp()) return;
                                var numx=get.info(card).usable;
                                if(typeof numx=='function') numx=num(card,player);
                                if(typeof numx=='number') return num+10;
                            },
                        },
                        subSkill:{
                            draw:{
                                audio:"sbzhaxiang",
                                trigger:{
                                    player:"phaseDrawBegin2",
                                },
                                forced:true,
                                filter:function(event,player){
                                    return !event.numFixed&&player.getDamagedHp()>0;
                                },
                                content:function(){
                                    trigger.num+=player.getDamagedHp();
                                },
                                ai:{
                                    effect:{
                                        target:function(card,player,target){
                                            if(get.tag(card,'recover')&&player.hp>=player.maxHp-1&&player.maxHp>1) return [0,0];
                                        },
                                    },
                                },
                                sub:true,
                                parentskill:"sbzhaxiang",
                            },
                            mark:{            
                                trigger:{
                                    player:["phaseUseBegin","phaseZhunbeiBegin"],
                                },
                                silent:true,
                                forced:true,            
                                priority:-100,
                                content:function(){          
                                if(player.getDamagedHp()>0){
                                player.storage.sbzhaxiang_mark2 = player.getDamagedHp() - player.getHistory('useCard').length;
                                player.addTempSkill("sbzhaxiang_mark2",{player:'phaseAfter'});       
                                }  
                                },                  
                                sub:true,
                                parentskill:"sbzhaxiang",
                                },
                            mark2:{mark:true,marktext:"诈降剩余",onremove:true,intro:{},sub:true,parentskill:"sbzhaxiang",},  
                            },    
                    }  

                    //狼袭特效
                    lib.skill.xinfu_langxi = {
                        audio: 2,
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return game.hasPlayer(function (current) {
                                return current != player && current.hp <= player.hp;
                            });
                        },
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('xinfu_langxi'), '对一名体力值不大于你的其他角色造成0-2点随机伤害', function (card, player, target) {
                                return target.hp <= player.hp && target != player;
                            }).set('ai', function (target) {
                                var player = _status.event.player;
                                return get.damageEffect(target, player, player);
                            });
                            "step 1"
                            if (result.bool && result.targets && result.targets.length) {
                                player.logSkill('xinfu_langxi', result.targets);
                                var num = [1, 2, 0].randomGet();
                                if (get.isLuckyStar(player)) num = 2;
                                player.line(result.targets[0], 'green');
                                result.targets[0].damage(num);
                                if (num == 0) {
                                    //  图片效果未命中
                                    //    ui.create.div('.weimingzhong',result.targets[0]);
                                    //    骨骼效果未命中
                                    //decadeUI.animation.playSpine({ name: 'weimingzhong', speed: 1 }, { scale: 0.8, parent: result.targets[0] });
                                    dcdAnim.loadSpine(xixiguagua.weimingzhong.name, "skel", function () {
                                        dcdAnim.playSpine(xixiguagua.weimingzhong, { scale: 0.8, speed: 1,parent: result.targets[0] });
                                    });
                                }
                            }
                        },
                        ai: {
                            expose: 0.25,
                            threaten: 1.7,
                        },
                    }
                    //破围特效
                    lib.skill.tspowei = {
                        audio: 2,
                        dutySkill: true,
                        forced: true,
                        trigger: {
                            global: "damageEnd",
                        },
                        logTarget: "player",
                        filter: function (event, player) {
                            return event.player && event.player.isIn() && event.player.hasMark('dulie');
                        },
                        content: function () {
                            trigger.player.removeMark('dulie', trigger.player.countMark('dulie'));
                        },
                        derivation: "shenzhu",
                        group: ["tspowei_init", "tspowei_move", "tspowei_achieve", "tspowei_fail", "tspowei_use"],
                        subSkill: {
                            use: {
                                audio: "tspowei",
                                trigger: {
                                    global: "phaseBegin",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return event.player != player && event.player.hasMark('dulie') &&
                                        (player.countCards('h') > 0 || player.hp >= event.player.hp && event.player.countCards('h') > 0);
                                },
                                content: function () {
                                    'step 0'
                                    var list = [], target = trigger.player, choiceList = [
                                        '弃置一张牌并对其造成1点伤害',
                                        '获得其一张手牌',
                                    ];
                                    event.target = target;
                                    if (player.hasCard(function (card) {
                                        return lib.filter.cardDiscardable(card, player, 'tspowei_use');
                                    }, 'h')) list.push('选项一');
                                    else choiceList[0] = '<span style="opacity:0.5">' + choiceList[0] + '</span>';
                                    if (player.hp >= target.hp && target.countCards('h') > 0) list.push('选项二');
                                    else choiceList[1] = '<span style="opacity:0.5">' + choiceList[1] + '</span>';
                                    player.chooseControl(list, 'cancel2').set('prompt', get.prompt('tspowei', target)).set('choiceList', choiceList).set('ai', function () {
                                        var evt = _status.event.getParent();
                                        if (evt.player.hasCard(function (card) {
                                            return lib.filter.cardDiscardable(card, evt.player, 'tspowei_use') && get.value(card, evt.player) < 7;
                                        }, 'h') && get.damageEffect(evt.target, evt.player, evt.player) > 0) return '选项一';
                                        if (evt.player.hp >= evt.target.hp && evt.target.countCards('h') > 0 && get.attitude(evt.player, evt.target) <= 0 && !evt.target.hasSkillTag('noh')) return '选项二';
                                        return 'cancel2';
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        if (result.control == '选项二') {
                                            player.logSkill('tspowei', target);
                                            player.gainPlayerCard(target, 'h', true);
                                            event.goto(3);
                                        }
                                    }
                                    else event.finish();
                                    'step 2'
                                    player.chooseToDiscard('h', true).logSkill = ['tspowei_use', target];
                                    target.damage();
                                    'step 3'
                                    player.addTempSkill('tspowei_inRange');
                                },
                                ai: {
                                    expose: 0.2,
                                },
                                sub: true,
                            },
                            inRange: {
                                charlotte: true,
                                mod: {
                                    inRangeOf: function (from, to) {
                                        if (from == _status.currentPhase) return true;
                                    },
                                },
                                sub: true,
                            },
                            init: {
                                audio: "tspowei",
                                trigger: {
                                    global: "phaseBefore",
                                    player: "enterGame",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return event.name != 'phase' || game.phaseNumber == 0;
                                },
                                logTarget: function (event, player) {
                                    return game.filterPlayer((current) => current != player && !current.hasMark('dulie'));
                                },
                                content: function () {
                                    var list = game.filterPlayer((current) => current != player && !current.hasMark('dulie')).sortBySeat();
                                    for (var i of list) i.addMark('dulie', 1, false);
                                },
                                sub: true,
                            },
                            move: {
                                audio: "tspowei",
                                trigger: {
                                    player: "phaseBegin",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return game.hasPlayer((current) => current != player && current.hasMark('dulie'));
                                },
                                content: function () {
                                    var list = game.filterPlayer((current) => current != player && current.hasMark('dulie')).sortBySeat();
                                    var map = {};
                                    for (var i of list) {
                                        var num = i.countMark('dulie');
                                        i.removeMark('dulie', num);
                                        map[i.playerid] = num;
                                    }
                                    for (var i of list) {
                                        var next = i.next;
                                        if (next == player) next = next.next;
                                        next.addMark('dulie', map[i.playerid]);
                                    }
                                },
                                sub: true,
                            },
                            achieve: {
                                audio: "tspowei1",
                                trigger: {
                                    player: "phaseBegin",
                                },
                                forced: true,
                                skillAnimation: true,
                                animationColor: "metal",
                                filter: function (event, player) {
                                    return !game.hasPlayer(function (current) {
                                        return current.hasMark('dulie');
                                    });
                                },
                                content: function () {
                                    game.log(player, '成功完成使命');
                                    player.awakenSkill('tspowei');
                                    player.shixiaoSkill('tspowei');
                                    player.addSkillLog('shenzhu');
                                },
                                sub: true,
                            },
                            fail: {
                                audio: "tspowei2",
                                trigger: {
                                    player: "dying",
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    game.log(player, '使命失败');
                                    //decadeUI.animation.playSpine({ name: 'shimingjishibai', speed: 1, }, { scale: 0.8, x: [0, 0.55], parent: player });
                                    dcdAnim.loadSpine(xixiguagua.shimingjishibai.name, "skel", function () {
                                        dcdAnim.playSpine(xixiguagua.shimingjishibai, { scale: 0.8, speed: 1, x: [0, 0.55], parent: player });
                                    });
                                    player.awakenSkill('tspowei');
                                    player.failSkill('tspowei');
                                    player.shixiaoSkill('tspowei');
                                    if (player.hp < 1) player.recover(1 - player.hp);
                                    'step 1'
                                    var num = player.countCards('e');
                                    if (num > 0) player.chooseToDiscard('e', true, num);
                                },
                                sub: true,
                            },
                        },
                    }
                    //清玉特效   
                    lib.skill.qingyu = {
                        audio: 2,
                        dutySkill: true,
                        trigger: {
                            player: "damageBegin2",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.countCards('he', function (card) {
                                return lib.filter.cardDiscardable(card, player, 'qingyu');
                            }) > 1;
                        },
                        content: function () {
                            trigger.cancel();
                            player.chooseToDiscard(2, 'he', true);
                        },
                        group: ["qingyu_achieve", "qingyu_fail"],
                        subSkill: {
                            achieve: {
                                trigger: {
                                    player: "phaseZhunbeiBegin",
                                },
                                forced: true,
                                skillAnimation: true,
                                animationColor: "fire",
                                filter: function (event, player) {
                                    return player.isHealthy() && player.countCards('h') == 0;
                                },
                                content: function () {
                                    game.log(player, '成功完成使命');
                                    player.awakenSkill('qingyu');
                                    player.shixiaoSkill('qingyu');
                                    player.addSkillLog('xuancun');
                                },
                                sub: true,
                            },
                            fail: {
                                trigger: {
                                    player: "dying",
                                },
                                forced: true,
                                content: function () {
                                    game.log(player, '使命失败');
                                    //decadeUI.animation.playSpine({ name: 'qingyushibai', speed: 1, }, { scale: 0.8, x: [0, 0.55], parent: player });
                                    dcdAnim.loadSpine(xixiguagua.qingyushibai.name, "skel", function () {
                                        dcdAnim.playSpine(xixiguagua.qingyushibai, { scale: 0.8, speed: 1, x: [0, 0.55], parent: player });
                                    });
                                    player.awakenSkill('qingyu');
                                    player.failSkill('qingyu');
                                    player.shixiaoSkill('qingyu');
                                    player.loseMaxHp();
                                },
                                sub: true,
                            },
                        },
                        derivation: "xuancun",
                    }
                    //秘备特效
                    lib.skill.mibei = {
                        audio: 2,
                        trigger: {
                            player: "useCardAfter",
                        },
                        dutySkill: true,
                        forced: true,
                        skillAnimation: true,
                        animationColor: "water",
                        filter: function (event, player) {
                            if (!player.storage.xingqi || !player.storage.xingqi.length) return false;
                            var map = { basic: 0, trick: 0, equip: 0 };
                            for (var i of player.storage.xingqi) {
                                var type = get.type(i);
                                if (typeof map[type] == 'number') map[type]++;
                            }
                            for (var i in map) {
                                if (map[i] < 2) return false;
                            }
                            return true;
                        },
                        content: function () {
                            'step 0'
                            game.log(player, '成功完成使命');
                            player.awakenSkill('mibei');
                            player.shixiaoSkill("mibei");
                            var list = ['basic', 'equip', 'trick'], cards = [];
                            for (var i of list) {
                                var card = get.cardPile2(function (card) {
                                    return get.type(card) == i;
                                });
                                if (card) cards.push(card);
                            }
                            if (cards.length) player.gain(cards, 'gain2');
                            'step 1'
                            player.addSkill('xinmouli');
                        },
                        group: ["mibei_fail", "mibei_silent"],
                        derivation: "xinmouli",
                        subSkill: {
                            silent: {
                                trigger: {
                                    player: "phaseZhunbeiBegin",
                                },
                                silent: true,
                                lastDo: true,
                                filter: function (event, player) {
                                    return !player.getStorage('xingqi').length;
                                },
                                content: function () {
                                    player.addTempSkill('mibei_mark');
                                },
                                charlotte: true,
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                            mark: {
                                sub: true,
                            },
                            fail: {
                                trigger: {
                                    player: "phaseJieshuBegin",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return !player.getStorage('xingqi').length && player.hasSkill('mibei_mark');
                                },
                                content: function () {
                                    game.log(player, '使命失败');
                                    /*decadeUI.animation.playSpine({ name: 'mibeishibai', speed: 1, }, { scale: 0.8, x: [0, 0.55], parent: player });*/
                                    dcdAnim.loadSpine(xixiguagua.mibeishibai.name, "skel", function () {
                                        dcdAnim.playSpine(xixiguagua.mibeishibai, { scale: 0.8, speed: 1, x: [0, 0.55], parent: player });
                                    });
                                    player.shixiaoSkill("mibei");
                                    player.awakenSkill('mibei');
                                    player.failSkill('mibei');
                                    player.loseMaxHp();
                                },
                                sub: true,
                            },
                        },
                    }












                    //国战篇
                    lib.skill.fz_new_rewusheng = {
                        audio: true,
                        inherit: "new_rewusheng",
                        mark: true,
                        marktext: "眩惑 关羽武圣",
                        intro: { name: '眩惑', content: 'info', },
                        mod: {
                            targetInRange: function (card) {
                                if (get.suit(card) == 'diamond' && card.name == 'sha') return true;
                            },
                        },
                        locked: false,
                        audioname: ["re_guanyu", "guanzhang", "jsp_guanyu", "guansuo"],
                        enable: ["chooseToRespond", "chooseToUse"],
                        filterCard: function (card, player) {
                            if (get.zhu(player, 'shouyue')) return true;
                            return get.color(card) == 'red';
                        },
                        position: "hes",
                        viewAs: {
                            name: "sha",
                        },
                        viewAsFilter: function (player) {
                            if (get.zhu(player, 'shouyue')) {
                                if (!player.countCards('hes')) return false;
                            }
                            else {
                                if (!player.countCards('hes', { color: 'red' })) return false;
                            }
                        },
                        prompt: "将一张红色牌当杀使用或打出",
                        check: function (card) {
                            var val = get.value(card);
                            if (_status.event.name == 'chooseToRespond') return 1 / Math.max(0.1, val);
                            return 5 - val;
                        },
                        ai: {
                            respondSha: true,
                            skillTagFilter: function (player) {
                                if (get.zhu(player, 'shouyue')) {
                                    if (!player.countCards('hes')) return false;
                                }
                                else {
                                    if (!player.countCards('hes', { color: 'red' })) return false;
                                }
                            },
                            yingbian: function (card, player, targets, viewer) {
                                if (get.attitude(viewer, player) <= 0) return 0;
                                var base = 0, hit = false;
                                if (get.cardtag(card, 'yingbian_hit')) {
                                    hit = true;
                                    if (targets.filter(function (target) {
                                        return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                    })) base += 5;
                                }
                                if (get.cardtag(card, 'yingbian_all')) {
                                    if (game.hasPlayer(function (current) {
                                        return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                    })) base += 5;
                                }
                                if (get.cardtag(card, 'yingbian_damage')) {
                                    if (targets.filter(function (target) {
                                        return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) && !target.hasSkillTag('filterDamage', null, {
                                            player: player,
                                            card: card,
                                            jiu: true,
                                        })
                                    })) base += 5;
                                }
                                return base;
                            },
                            canLink: function (player, target, card) {
                                if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                    target: target,
                                    card: card,
                                }, true)) return false;
                                if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                return true;
                            },
                            basic: {
                                useful: [5, 3, 1],
                                value: [5, 3, 1],
                            },
                            order: function (item, player) {
                                if (player.hasSkillTag('presha', true, null, true)) return 10;
                                if (lib.linked.contains(get.nature(item))) {
                                    if (game.hasPlayer(function (current) {
                                        return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                    }) && game.countPlayer(function (current) {
                                        return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                    }) > 1) return 3.1;
                                    return 3;
                                }
                                return 3.05;
                            },
                            result: {
                                target: function (player, target, card, isLink) {
                                    var eff = function () {
                                        if (!isLink && player.hasSkill('jiu')) {
                                            if (!target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                                jiu: true,
                                            })) {
                                                if (get.attitude(player, target) > 0) {
                                                    return -7;
                                                }
                                                else {
                                                    return -4;
                                                }
                                            }
                                            return -0.5;
                                        }
                                        return -1.5;
                                    }();
                                    if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                        target: target,
                                        card: card,
                                    }, true)) return eff / 1.2;
                                    return eff;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                    }
                    lib.skill.fz_gzpaoxiao = {
                        audio: true,
                        inherit: "gzpaoxiao",
                        mark: true,
                        marktext: "眩惑 张飞咆哮",
                        intro: { name: '眩惑', content: 'info', },
                        trigger: {
                            player: "useCard",
                        },
                        filter: function (event, player) {
                            if (_status.currentPhase != player) return false;
                            if (event.card.name != 'sha') return false;
                            var history = player.getHistory('useCard', function (evt) {
                                return evt.card.name == 'sha';
                            });
                            return history && history.indexOf(event) == 1;
                        },
                        forced: true,
                        preHidden: true,
                        content: function () {
                            player.draw();
                        },
                        mod: {
                            cardUsable: function (card, player, num) {
                                if (card.name == 'sha') return Infinity;
                            },
                        },
                        ai: {
                            unequip: true,
                            skillTagFilter: function (player, tag, arg) {
                                if (!get.zhu(player, 'shouyue')) return false;
                                if (arg && arg.name == 'sha') return true;
                                return false;
                            },
                        },
                    }
                    lib.skill.fz_new_longdan = {
                        audio: true,
                        mark: true,
                        marktext: "眩惑 赵云龙胆",
                        intro: { name: '眩惑', content: 'info', },
                        group: ["fz_new_longdan_sha", "fz_new_longdan_shan", "fz_new_longdan_draw", "fz_new_longdan_shamiss", "fz_new_longdan_shanafter"],
                        subSkill: {
                            shanafter: {
                                sub: true,
                                audio: "fz_new_longdan",
                                trigger: {
                                    player: "useCard",
                                },
                                filter: function (event, player) {
                                    return event.skill == 'fz_new_longdan_shan' && event.getParent(2).name == 'sha';
                                },
                                direct: true,
                                content: function () {
                                    "step 0"
                                    player.chooseTarget("是否发动【龙胆】令一名其他角色回复1点体力？", function (card, player, target) {
                                        return target != _status.event.source && target != player && target.isDamaged();
                                    }).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target);
                                    }).set('source', trigger.getParent(2).player);
                                    "step 1"
                                    if (result.bool && result.targets && result.targets.length) {
                                        player.logSkill('fz_new_longdan', result.targets[0]);
                                        result.targets[0].recover();
                                    }
                                },
                            },
                            shamiss: {
                                sub: true,
                                audio: "fz_new_longdan",
                                trigger: {
                                    player: "shaMiss",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return event.skill == 'fz_new_longdan_sha';
                                },
                                content: function () {
                                    "step 0"
                                    player.chooseTarget("是否发动【龙胆】对一名其他角色造成1点伤害？", function (card, player, target) {
                                        return target != _status.event.target && target != player;
                                    }).set('ai', function (target) {
                                        return -get.attitude(_status.event.player, target);
                                    }).set('target', trigger.target);
                                    "step 1"
                                    if (result.bool && result.targets && result.targets.length) {
                                        player.logSkill('fz_new_longdan', result.targets[0]);
                                        result.targets[0].damage();
                                    }
                                },
                            },
                            draw: {
                                trigger: {
                                    player: ["useCard", "respond"],
                                },
                                audio: "fz_new_longdan",
                                forced: true,
                                locked: false,
                                filter: function (event, player) {
                                    if (!get.zhu(player, 'shouyue')) return false;
                                    return event.skill == 'fz_new_longdan_sha' || event.skill == 'fz_new_longdan_shan';
                                },
                                content: function () {
                                    player.draw();
                                    //player.storage.fanghun2++;
                                },
                                sub: true,
                            },
                            sha: {
                                audio: "fz_new_longdan",
                                enable: ["chooseToUse", "chooseToRespond"],
                                filterCard: {
                                    name: "shan",
                                },
                                viewAs: {
                                    name: "sha",
                                },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('hs', 'shan')) return false;
                                },
                                prompt: "将一张闪当杀使用或打出",
                                position: "hs",
                                check: function () { return 1 },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondSha') && current < 0) return 0.6
                                        },
                                    },
                                    respondSha: true,
                                    skillTagFilter: function (player) {
                                        if (!player.countCards('hs', 'shan')) return false;
                                    },
                                    order: function () {
                                        return get.order({ name: 'sha' }) + 0.1;
                                    },
                                    yingbian: function (card, player, targets, viewer) {
                                        if (get.attitude(viewer, player) <= 0) return 0;
                                        var base = 0, hit = false;
                                        if (get.cardtag(card, 'yingbian_hit')) {
                                            hit = true;
                                            if (targets.filter(function (target) {
                                                return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                            })) base += 5;
                                        }
                                        if (get.cardtag(card, 'yingbian_all')) {
                                            if (game.hasPlayer(function (current) {
                                                return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                            })) base += 5;
                                        }
                                        if (get.cardtag(card, 'yingbian_damage')) {
                                            if (targets.filter(function (target) {
                                                return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                    target: target,
                                                    card: card,
                                                }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                    player: player,
                                                    card: card,
                                                    jiu: true,
                                                })
                                            })) base += 5;
                                        }
                                        return base;
                                    },
                                    canLink: function (player, target, card) {
                                        if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                        if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) return false;
                                        if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                        return true;
                                    },
                                    basic: {
                                        useful: [5, 3, 1],
                                        value: [5, 3, 1],
                                    },
                                    result: {
                                        target: function (player, target, card, isLink) {
                                            var eff = function () {
                                                if (!isLink && player.hasSkill('jiu')) {
                                                    if (!target.hasSkillTag('filterDamage', null, {
                                                        player: player,
                                                        card: card,
                                                        jiu: true,
                                                    })) {
                                                        if (get.attitude(player, target) > 0) {
                                                            return -7;
                                                        }
                                                        else {
                                                            return -4;
                                                        }
                                                    }
                                                    return -0.5;
                                                }
                                                return -1.5;
                                            }();
                                            if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) return eff / 1.2;
                                            return eff;
                                        },
                                    },
                                    tag: {
                                        respond: 1,
                                        respondShan: 1,
                                        damage: function (card) {
                                            if (card.nature == 'poison') return;
                                            return 1;
                                        },
                                        natureDamage: function (card) {
                                            if (card.nature) return 1;
                                        },
                                        fireDamage: function (card, nature) {
                                            if (card.nature == 'fire') return 1;
                                        },
                                        thunderDamage: function (card, nature) {
                                            if (card.nature == 'thunder') return 1;
                                        },
                                        poisonDamage: function (card, nature) {
                                            if (card.nature == 'poison') return 1;
                                        },
                                    },
                                },
                                sub: true,
                            },
                            shan: {
                                audio: "fz_new_longdan",
                                enable: ["chooseToRespond", "chooseToUse"],
                                filterCard: {
                                    name: "sha",
                                },
                                viewAs: {
                                    name: "shan",
                                },
                                position: "hs",
                                prompt: "将一张杀当闪使用或打出",
                                check: function () { return 1 },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('hs', 'sha')) return false;
                                },
                                ai: {
                                    respondShan: true,
                                    skillTagFilter: function (player) {
                                        if (!player.countCards('hs', 'sha')) return false;
                                    },
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                        },
                                    },
                                    order: 3,
                                    basic: {
                                        useful: [7, 5.1, 2],
                                        value: [7, 5.1, 2],
                                    },
                                    result: {
                                        player: 1,
                                    },
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.fz_new_tieji = {
                        audio: true,
                        inherit: "new_tieji",
                        mark: true,
                        marktext: "眩惑 马超铁骑",
                        intro: { name: '眩惑', content: 'info', },
                        trigger: {
                            player: "useCardToPlayered",
                        },
                        check: function (event, player) {
                            return get.attitude(player, event.target) < 0;
                        },
                        filter: function (event) {
                            return event.card.name == 'sha';
                        },
                        logTarget: "target",
                        content: function () {
                            "step 0"
                            var target = trigger.target;
                            var controls = [];
                            if (get.zhu(player, 'shouyue')) {
                                if (!target.isUnseen(0)) target.addTempSkill('fengyin_main');
                                if (!target.isUnseen(1)) target.addTempSkill('fengyin_vice');
                                event.goto(2);
                            }
                            if (!target.isUnseen(0) && !target.hasSkill('fengyin_main')) controls.push("主将");
                            if (!target.isUnseen(1) && !target.hasSkill('fengyin_vice')) controls.push("副将");
                            if (controls.length > 0) {
                                if (controls.length == 1) event._result = { control: controls[0] };
                                else {
                                    player.chooseControl(controls).set('ai', function () {
                                        var choice = '主将';
                                        var skills = lib.character[target.name2][3];
                                        for (var i = 0; i < skills.length; i++) {
                                            var info = get.info(skills[i]);
                                            if (info && info.ai && info.ai.maixie) {
                                                choice = '副将'; break;
                                            }
                                        }
                                        return choice;
                                    }).set('prompt', '请选择一个武将牌，令' + get.translation(target) + '该武将牌上的非锁定技全部失效。');
                                }
                            }
                            else event.goto(2);
                            "step 1"
                            if (result.control) {
                                player.popup(result.control, 'fire');
                                var target = trigger.target;
                                if (result.control == "主将") target.addTempSkill("fengyin_main");
                                else target.addTempSkill("fengyin_vice");
                            }
                            "step 2"
                            player.judge(function () { return 0 });
                            "step 3"
                            var suit = get.suit(result.card);
                            var target = trigger.target;
                            var num = target.countCards('h', 'shan');
                            target.chooseToDiscard('请弃置一张' + get.translation(suit) + '牌，否则不能使用闪抵消此杀', 'he', function (card) {
                                return get.suit(card) == _status.event.suit;
                            }).set('ai', function (card) {
                                var num = _status.event.num;
                                if (num == 0) return 0;
                                if (card.name == 'shan') return num > 1 ? 2 : 0;
                                return 8 - get.value(card);
                            }).set('num', num).set('suit', suit);
                            "step 4"
                            if (!result.bool) {
                                trigger.getParent().directHit.add(trigger.target);
                            }
                        },
                    }
                    lib.skill.fz_liegong = {
                        audio: true,
                        mark: true,
                        marktext: "眩惑 黄忠烈弓",
                        intro: { name: '眩惑', content: 'info', },
                        inherit: "liegong",
                        shaRelated: true,
                        audioname: ["re_huangzhong"],
                        trigger: {
                            player: "useCardToPlayered",
                        },
                        check: function (event, player) {
                            return get.attitude(player, event.target) <= 0;
                        },
                        logTarget: "target",
                        filter: function (event, player) {
                            if (event.card.name != 'sha') return false;
                            var length = event.target.countCards('h');
                            return (length >= player.hp || length <= player.getAttackRange());
                        },
                        preHidden: true,
                        content: function () {
                            trigger.getParent().directHit.push(trigger.target);
                        },
                        locked: false,
                        mod: {
                            attackRange: function (player, distance) {
                                if (get.zhu(player, 'shouyue')) return distance + 1;
                            },
                        },
                        ai: {
                            "directHit_ai": true,
                            skillTagFilter: function (player, tag, arg) {
                                if (get.attitude(player, arg.target) > 0 || arg.card.name != 'sha') return false;
                                var length = arg.target.countCards('h');
                                return (length >= player.hp || length <= player.getAttackRange());
                            },
                        },
                    }
                    lib.skill.fz_xinkuanggu = {
                        audio: true,
                        inherit: "xinkuanggu",
                        mark: true,
                        marktext: "眩惑 魏延狂骨",
                        intro: { name: '眩惑', content: 'info', },
                        trigger: {
                            source: "damageSource",
                        },
                        filter: function (event, player) {
                            return get.distance(player, event.player) <= 1 && event.num > 0;
                        },
                        direct: true,
                        audioname: ["re_weiyan", "ol_weiyan"],
                        preHidden: true,
                        content: function () {
                            'step 0'
                            event.num = trigger.num;
                            'step 1'
                            var choice;
                            if (player.isDamaged() && get.recoverEffect(player) > 0 && (player.countCards('hs', function (card) {
                                return card.name == 'sha' && player.hasValueTarget(card);
                            }) >= player.getCardUsable('sha'))) {
                                choice = 'recover_hp';
                            }
                            else {
                                choice = 'draw_card';
                            }
                            var next = player.chooseDrawRecover(get.prompt(event.name)).set('logSkill', event.name).set('prompt2', '摸一张牌或回复1点体力');
                            next.set('choice', choice);
                            next.set('ai', function () {
                                return _status.event.getParent().choice;
                            });
                            next.setHiddenSkill('xinkuanggu');
                            'step 2'
                            if (result.control != 'cancel2') {
                                event.num--;
                                if (event.num > 0) {
                                    event.goto(1);
                                }
                            }
                        },
                    }
                    //国战法正累死人













                    //普通篇
                    lib.skill.mjmouzhi = {
                        audio: 2,
                        trigger: {
                            player: "damageBegin2",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (!event.card || get.suit(event.card) == 'none') return false;
                            var all = player.getAllHistory('damage');
                            if (!all.length) return false;
                            return all[all.length - 1].card && get.suit(all[all.length - 1].card) == get.suit(event.card);
                        },
                        content: function () {
                            trigger.cancel();
                        },
                        group: "mjmouzhi_mark",
                        ai: {
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        var color = get.suit(card);
                                        if (color == 'none') return;
                                        var all = target.getAllHistory('damage');
                                        if (!all.length || !all[all.length - 1].card) return;
                                        if (get.suit(all[all.length - 1].card) == color) return 'zerotarget';
                                    }
                                },
                            },
                        },
                        subSkill: {
                            kk: { intro: {}, sub: true, },
                            mark: {
                                trigger: {
                                    player: "damage",
                                },
                                silent: true,
                                firstDo: true,
                                content: function () {
                                    if (!trigger.card || get.suit(trigger.card) == 'none') player.unmarkSkill('mjmouzhi_kk');
                                    else {
                                        var xx = get.suit(trigger.card);
                                        var cc = get.translation(xx);
                                        player.storage.mjmouzhi_kk = '';
                                        player.addSkill('mjmouzhi_kk');
                                        player.addMark('mjmouzhi_kk', cc);
                                        game.broadcastAll(function (player, suit) {
                                            if (player.marks.mjmouzhi) player.marks.mjmouzhi.firstChild.innerHTML = get.translation(suit);
                                            player.storage.mjmouzhi = suit;
                                        }, player, get.suit(trigger.card))
                                    }
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                        },
                    }
                    lib.skill.zhuihuan = {
                        audio: 2,
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return game.hasPlayer(function (current) {
                                return !current.hasSkill('zhuihuan2_new');
                            });
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('zhuihuan'), '令一名角色获得“追还”效果', function (card, player, target) {
                                return !target.hasSkill('zhuihuan2_new');
                            }).set('ai', function (target) {
                                var player = _status.event.player, att = get.attitude(player, target);
                                if (target.hasSkill('maixie') || target.hasSkill('maixie_defend')) att /= 3;
                                if (target != player) att /= Math.pow(game.players.length - get.distance(player, target, 'absolute'), 0.7);
                                return att;
                            }).set('animate', false);
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('zhuihuan');
                                target.addTempSkill('zhuihuan2_new', { player: 'phaseZhunbei' });
                                if (player == game.me || player.isUnderControl()) {
                                    target.addTempSkill('zhuihuan_mark', { player: 'phaseZhunbei' });
                                }
                                game.delayx();
                            }
                        },
                        subSkill: { mark: { mark: true, intro: {}, sub: true, }, },
                    }
                    lib.skill.bixiong = {
                        trigger: {
                            player: "loseAfter",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return event.type == 'discard' && event.getParent('phaseDiscard').player == player && event.hs && event.hs.length > 0;
                        },
                        content: function () {
                            var cards = [];
                            for (var i of trigger.hs) { cards.add(get.suit(i, player)); }
                            player.addTempSkill('bixiong2', { player: 'phaseBegin' });
                            player.markAuto('bixiong2', cards);
                            player.markAuto('bixiong_mark', cards);
                            var str = '';
                            if (cards.indexOf('heart') != -1) str += '♥️';
                            if (cards.indexOf('diamond') != -1) str += '♦️️';
                            if (cards.indexOf('spade') != -1) str += '♠️️';
                            if (cards.indexOf('club') != -1) str += '♣️️';
                            player.storage.bixiong_mark = '';
                            player.addTempSkill('bixiong_mark', { player: 'phaseBegin' });
                            player.addMark('bixiong_mark', str)
                        },
                        subSkill: { mark: { intro: { content: "不能成为$牌的目标", }, sub: true, }, },
                    }
                    lib.skill.bixiong2 = {
                        onremove: true,
                        mod: {
                            targetEnabled: function (card, player, target) {
                                if (target.getStorage('bixiong2').contains(get.suit(card))) return false;
                            },
                        },
                        // intro:{
                        // content:"不能成为$牌的目标",
                        // },
                    }
                    lib.skill.xinshanjia = {
                        group: ["xinshanjia_count", "xinshanjia_mark"],
                        locked: false,
                        mod: {
                            aiValue: function (player, card, num) {
                                if ((player.storage.xinshanjia || 0) < 3 && get.type(card) == 'equip' && !get.cardtag(card, 'gifts')) {
                                    return num / player.hp;
                                }
                            },
                        },
                        subSkill: {
                            count: {
                                forced: true,
                                silent: true,
                                popup: false,
                                trigger: {
                                    player: "loseEnd",
                                },
                                filter: function (event, player) {
                                    return event.cards2 && event.cards2.length > 0;
                                },
                                content: function () {
                                    lib.skill.xinshanjia.sync(player);
                                },
                                sub: true,
                            },
                            mark: {
                                mark: true,
                                marktext: "缮甲 弃牌",
                                intro: {},
                                init: function (player) { player.addMark('xinshanjia_mark', 3); },
                                onremove: function (player) {
                                    player.unmarkSkill('xinshanjia_mark');
                                },
                                sub: true,
                            },
                        },
                        audio: "shanjia",
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        // intro:{
                        // content:"本局游戏内已失去过#张装备牌",
                        // },
                        frequent: true,
                        sync: function (player) {
                            var history = player.actionHistory;
                            var num = 0;
                            var mm = 3;
                            for (var i = 0; i < history.length; i++) {
                                for (var j = 0; j < history[i].lose.length; j++) {
                                    if (history[i].lose[j].parent.name == 'useCard') continue;
                                    num += history[i].lose[j].cards2.filter(function (card) {
                                        return get.type(card, false) == 'equip';
                                    }).length;
                                    mm -= history[i].lose[j].cards2.filter(function (card) {
                                        return get.type(card, false) == 'equip';
                                    }).length;
                                }
                            }
                            player.storage.xinshanjia = num;
                            if (mm > 0) {
                                player.storage.xinshanjia_mark = mm;
                                player.markSkill('xinshanjia_mark');
                            }
                            if (mm <= 0) {
                                player.unmarkSkill('xinshanjia_mark');
                                player.removeSkill('xinshanjia_mark');
                            }
                            if (num >= 3) { player.removeSkill('xinshanjia_mark'); }

                            //  if(num>0) player.markSkill('xinshanjia');
                        },
                        content: function () {
                            'step 0'
                            player.draw(3);
                            'step 1'
                            lib.skill.xinshanjia.sync(player);
                            var num = 3 - player.storage.xinshanjia;
                            if (num > 0) {
                                player.chooseToDiscard('he', true, num).ai = get.disvalue;
                            }
                            'step 2'
                            var bool = true;
                            if (result.cards) {
                                for (var i = 0; i < result.cards.length; i++) {
                                    if (['basic', 'trick'].contains(get.type(result.cards[i], 'trick', result.cards[i].original == 'h' ? player : false))) {
                                        bool = false; break;
                                    }
                                }
                            }
                            if (bool) {
                                player.chooseUseTarget({ name: 'sha' }, '是否视为使用一张【杀】？', false, 'nodistance');
                            }
                        },
                        ai: {
                            threaten: 3,
                            noe: true,
                            reverseOrder: true,
                            skillTagFilter: function (player) {
                                if (player.storage.xinshanjia > 2) return false;
                            },
                            effect: {
                                target: function (card, player, target) {
                                    if (player.storage.xinshanjia < 3 && get.type(card) == 'equip' && !get.cardtag(card, 'gifts')) return [1, 3];
                                },
                            },
                        },
                    }
                    lib.skill.zhtongyuan = {
                        audio: "tongyuan",
                        trigger: {
                            player: ["useCardAfter", "respondAfter"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            var type = get.type2(event.card, false);
                            return (type == 'basic' || type == 'trick') && get.color(event.card, false) == 'red' && !player.hasMark('zhtongyuan_' + type);
                        },
                        content: function () {
                            var type = get.type2(trigger.card, false);
                            if (!player.storage.zhtongyuan_xg1) player.storage.zhtongyuan_xg1 = [];
                            var str = '';
                            if (get.type2(trigger.card) == 'trick') str = '锦';
                            else if (get.type2(trigger.card) == 'basic') str = '基';
                            var num = '';
                            if (player.storage.zhtongyuan_xg1.indexOf(str) == -1) player.storage.zhtongyuan_xg1 += str;
                            if (player.storage.zhtongyuan_xg1.indexOf('基') != -1) num += '基';
                            if (player.storage.zhtongyuan_xg1.indexOf('锦') != -1) num += '锦';
                            player.storage.zhtongyuan_xg = '';
                            if (!player.hasMark('zhtongyuan_' + type)) {
                                player.addMark('zhtongyuan_' + type, 1, false);
                                //  player.addTempSkill('zhtongyuan_xg');          
                                player.addMark('zhtongyuan_xg', player.storage.zhtongyuan_xg1);
                                game.log(player, '修改了技能', '#g【摧坚】');
                            }
                        },
                        group: ["zhtongyuan_basic", "zhtongyuan_trick"],
                        subSkill: {
                            xg: { intro: {}, sub: true, },
                            basic: {
                                trigger: {
                                    player: "useCard2",
                                },
                                direct: true,
                                locked: true,
                                filter: function (event, player) {
                                    if (!player.hasMark('zhtongyuan_basic') || !player.hasMark('zhtongyuan_trick')) return false;
                                    var card = event.card;
                                    if (get.color(card, false) != 'red' || get.type(card, null, true) != 'basic') return false;
                                    var info = get.info(card);
                                    if (info.allowMultiple == false) return false;
                                    if (event.targets && !info.multitarget) {
                                        if (game.hasPlayer(function (current) {
                                            return !event.targets.contains(current) && lib.filter.targetEnabled2(card, player, current);
                                        })) {
                                            return true;
                                        }
                                    }
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    var prompt2 = '为' + get.translation(trigger.card) + '增加一个目标'
                                    player.chooseTarget(get.prompt('zhtongyuan'), function (card, player, target) {
                                        var player = _status.event.player;
                                        return !_status.event.targets.contains(target) && lib.filter.targetEnabled2(_status.event.card, player, target);
                                    }).set('prompt2', prompt2).set('ai', function (target) {
                                        var trigger = _status.event.getTrigger();
                                        var player = _status.event.player;
                                        return get.effect(target, trigger.card, player, player);
                                    }).set('card', trigger.card).set('targets', trigger.targets);
                                    'step 1'
                                    if (result.bool) {
                                        if (!event.isMine() && !event.isOnline()) game.delayx();
                                        event.targets = result.targets;
                                    }
                                    else {
                                        event.finish();
                                    }
                                    'step 2'
                                    if (event.targets) {
                                        player.logSkill('zhtongyuan', event.targets);
                                        trigger.targets.addArray(event.targets);
                                    }
                                },
                                sub: true,
                            },
                            trick: {
                                audio: "zhtongyuan",
                                trigger: {
                                    player: "useCard",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (!player.hasMark('zhtongyuan_basic') || !player.hasMark('zhtongyuan_trick')) return false;
                                    var card = event.card;
                                    return (get.color(card, false) == 'red' && get.type(card, null, false) == 'trick');
                                },
                                content: function () {
                                    trigger.directHit.addArray(game.filterPlayer());
                                    game.log(trigger.card, '不可被响应');
                                },
                                sub: true,
                            },
                        },
                    }
                    // lib.skill.daiyan = {
                        // audio: 2,
                        // trigger: {
                            // player: "phaseJieshuBegin",
                        // },
                        // direct: true,
                        // init: function () {
                            // lib.onwash.push(function () {
                                // delete _status.daiyan_notao;
                            // });
                        // },
                        // content: function () {
                            // 'step 0'
                            // player.chooseTarget(get.prompt2('daiyan'), function (card, player, target) {
                                // return target != player;
                            // }).set('ai', function (target) {
                                // var player = _status.event.player;
                                // var att = get.attitude(player, target);
                                // if (att > 0) {
                                    // if (_status.daiyan_notao) {
                                        // return 0;
                                    // }
                                    // else {
                                        // if (target == player.storage.daiyan) return 0;
                                        // return 2 * att / Math.sqrt(1 + target.hp);
                                    // }
                                // }
                                // else {
                                    // if (_status.daiyan_notao) {
                                        // if (target == player.storage.daiyan) return -3 * att;
                                        // return -att;
                                    // }
                                    // else {
                                        // return 0;
                                    // }
                                // }
                            // });
                            // 'step 1'
                            // if (result.bool) {
                                // var target = result.targets[0];
                                // target.addSkill('daiyan_mark');
                                // player.logSkill('daiyan', target);
                                // var tao = get.cardPile2(function (card) {
                                    // return get.suit(card) == 'heart' && get.type(card) == 'basic';
                                // });
                                // if (tao) {
                                    // target.gain(tao, 'gain2');
                                // }
                                // else {
                                    // _status.daiyan_notao = true;
                                // }
                                // if (target == player.storage.daiyan) {
                                    // target.loseHp();
                                // }

                            // }
                            // else {
                                // if (player.storage.daiyan != undefined) {
                                    // player.storage.daiyan.removeSkill('daiyan_mark');
                                    // delete player.storage.daiyan;
                                // }
                            // }
                            // 'step 2'
                            // var target = result.targets[0];
                            // if (target != player.storage.daiyan && player.storage.daiyan != undefined) {
                                // player.storage.daiyan.removeSkill('daiyan_mark');
                            // }
                            // 'step 3'
                            // var target = result.targets[0];
                            // player.storage.daiyan = target;
                        // },
                        // ai: {
                            // threaten: 1.5,
                            // expose: 0.2,
                        // },
                        // subSkill: { mark: { mark: true, intro: {}, sub: true, }, },
                    // }                   
     lib.skill.tongli= {
    audio:2,
    trigger:{
        player:"useCardToPlayered",
    },
    filter:function(event,player){
        if(!event.isFirstTarget||(event.card.storage&&event.card.storage.tongli)) return false;
        var type=get.type(event.card);
        if(type!='basic'&&type!='trick') return false;
        var hs=player.getCards('h');
        if(!hs.length) return false;
        var evt=event.getParent('phaseUse');
        if(!evt||evt.player!=player) return false;
        var num1=player.getHistory('useCard',function(evtx){
            if(evtx.getParent('phaseUse')!=evt) return false;
            return !evtx.card.storage||!evtx.card.storage.tongli;
        }).length;
        if(hs.length<num1) return false;
        var list=[];
        for(var i of hs) list.add(get.suit(i,player));
        return list.length==num1;
    },
    "prompt2":function(event,player){
        var evt=event.getParent('phaseUse');
        var num=player.getHistory('useCard',function(evtx){
            if(evtx.getParent('phaseUse')!=evt) return false;
            return !evtx.card.storage||!evtx.card.storage.tongli;
        }).length;
        var str='视为额外使用'+get.cnNumber(num)+'张'
        if(event.card.name=='sha'&&event.card.nature) str+=get.translation(event.card.nature);
        return (str+'【'+get.translation(event.card.name)+'】');
    },
    check:function(event,player){
        return !get.tag(event.card,'norepeat')
    },
    content:function(){
        player.addTempSkill('tongli_effect');
        var evt=trigger.getParent('phaseUse');
        var num=player.getHistory('useCard',function(evtx){
            if(evtx.getParent('phaseUse')!=evt) return false;
            return !evtx.card.storage||!evtx.card.storage.tongli;
        }).length;
        trigger.getParent().tongli_effect=[{
            name:trigger.card.name,
            nature:trigger.card.nature,
            isCard:true,
            storage:{tongli:true},
        },num];
    },    
    subSkill:{
        effect:{
            trigger:{
                player:"useCardAfter",
            },
            forced:true,
            charlotte:true,
            filter:function(event,player){
                return event.tongli_effect!=undefined;
            },
            content:function(){
                'step 0'
                event.card=trigger.tongli_effect[0];
                event.count=trigger.tongli_effect[1];
                'step 1'
                event.count--;
                player.storage.tongli_mark--;
                for(var i of trigger.targets){
                    if(!i.isIn()||!player.canUse(card,i,false)) return;
                }
                if(trigger.addedTarget&&!trigger.addedTarget.isIn()) return;
                if(trigger.addedTargets&&trigger.addedTargetfs.length){
                    for(var i of trigger.addedTargets){
                        if(!i.isIn()) return;
                    }
                }
                var next=player.useCard(get.copy(card),trigger.targets,false);
                if(trigger.addedTarget) next.addedTarget=trigger.addedTarget;
                if(trigger.addedTargets&&trigger.addedTargets.length) next.addedTargets=trigger.addedTargets.slice(0);
                if(event.count>0) event.redo();
            },
            sub:true,
        },
        mark: {
                                intro: {}, onremove: function (player) {
                                    player.unmarkSkill('tongli_mark');
                                    delete player.storage.tongli_mark;
                                }, sub: true,
                            },
                            mark2: { intro: {}, sub: true, },
        cishu: {
                         trigger: { player: "useCardAfter", },
                                filter: function (event, player) {
                                //    if (player == _status.currentPhase) return true;
                                  var evt=event.getParent('phaseUse');
                                  if(evt.player==player) return true;
                                    var type = get.type(event.card);
                                    if (type != 'basic' && type != 'trick') return false;
                                },
                                forced: true,
                                priority: 10,
                                silent: true,
                                content: function () {
                                    player.addTempSkill('tongli_mark');
                                    player.addMark('tongli_mark');
                                },
                                sub: true,
                            },
                            huase: {
                                trigger: { player: ["useCard", "phaseUseEnd", "drawEnd", "gainBegin",], },
                                forced: true,
                                priority: 10,
                                silent: true,
                                filter: function (event, player) {
                                    if (player == _status.currentPhase) return true;
                                },
                                content: function () {
                                    var cards = [];
                                    for (var i of player.getCards('h')) { cards.add(get.suit(i, player)) }
                                    var str = '';
                                    if (cards.indexOf('heart') != -1) str += '♥️';
                                    if (cards.indexOf('diamond') != -1) str += '♦️️';
                                    if (cards.indexOf('spade') != -1) str += '♠️️';
                                    if (cards.indexOf('club') != -1) str += '♣️️';
                                    player.storage.tongli_mark2 = '';
                                    player.addTempSkill('tongli_mark2');
                                    player.addMark('tongli_mark2', str)
                                }, sub: true,
                            },
                       },
    group: ["tongli_cishu", "tongli_huase"],
}
                    //新杀骆统 进谏            
                    lib.skill.jinjian = {
                        audio: 2,
                        trigger: {
                            source: "damageBegin1",
                        },
                        logTarget: "player",
                        filter: function (event, player) {
                            return !event.jinjian_source2 && !player.hasSkill('jinjian_source2');
                        },
                        "prompt2": "令即将对其造成的伤害+1",
                        check: function (event, player) {
                            return get.attitude(player, event.player) < 0 && !event.player.hasSkillTag('filterDamage', null, {
                                player: player,
                                card: event.card,
                            });
                        },
                        content: function () {
                            trigger.jinjian_source = true;
                            trigger.num++;
                            player.addTempSkill('jinjian_source2');
                        },
                        group: "jinjian_player",
                        subSkill: {
                            player: {
                                audio: "jinjian",
                                trigger: {
                                    player: "damageBegin3",
                                },
                                filter: function (event, player) {
                                    return !event.jinjian_player2 && !player.hasSkill('jinjian_player2');
                                },
                                "prompt2": "令即将受到的伤害-1",
                                content: function () {
                                    trigger.jinjian_player = true;
                                    trigger.num--;
                                    player.addTempSkill('jinjian_player2')
                                },
                                sub: true,
                            },
                            "source2": {
                                trigger: {
                                    source: "damageBegin1",
                                },
                                forced: true,
                                charlotte: true,
                                filter: function (event, player) {
                                    return !event.jinjian_source;
                                },
                                content: function () {
                                    trigger.num--;
                                    trigger.jinjian_source2 = true;
                                    player.removeSkill('jinjian_source2');
                                },
                                mark: true,
                                marktext: "伤害-1",
                                intro: {
                                    content: "下次造成的伤害-1",
                                },
                                sub: true,
                            },
                            "player2": {
                                trigger: {
                                    player: "damageBegin3",
                                },
                                forced: true,
                                charlotte: true,
                                filter: function (event, player) {
                                    return !event.jinjian_player;
                                },
                                content: function () {
                                    trigger.num++;
                                    trigger.jinjian_player2 = true;
                                    player.removeSkill('jinjian_player2');
                                },
                                mark: true,
                                marktext: "受到+1",
                                intro: {
                                    content: "下次受到的伤害+1",
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            "maixie_defend": true,
                            threaten: 0.9,
                            effect: {
                                target: function (card, player, target) {
                                    if (player.hasSkillTag('jueqing')) return;
                                    if (target.hujia) return;
                                    if (player._jinjian_tmp) return;
                                    if (_status.event.getParent('useCard', true) || _status.event.getParent('_wuxie', true)) return;
                                    if (get.tag(card, 'damage')) {
                                        if (target.hasSkill('jinjian_player2')) {
                                            return [1, -2];
                                        }
                                        else {
                                            if (get.attitude(player, target) > 0) {
                                                return [0, 0.2];
                                            }
                                            if (get.attitude(player, target) < 0 && !player.hasSkillTag('damageBonus')) {
                                                var sha = player.getCardUsable({ name: 'sha' });
                                                player._jinjian_tmp = true;
                                                var num = player.countCards('h', function (card) {
                                                    if (card.name == 'sha') {
                                                        if (sha == 0) {
                                                            return false;
                                                        }
                                                        else {
                                                            sha--;
                                                        }
                                                    }
                                                    return get.tag(card, 'damage') && player.canUse(card, target) && get.effect(target, card, player, player) > 0;
                                                });
                                                delete player._jinjian_tmp;
                                                if (player.hasSkillTag('damage')) {
                                                    num++;
                                                }
                                                if (num < 2) {
                                                    return [0, 0.8];
                                                }
                                            }
                                        }
                                    }
                                },
                            },
                        },
                    }
                    lib.skill.dcmingfa = {
                        trigger: {
                            player: "useCardAfter",
                        },
                        filter: function (event, player) {
                            if (!player.isPhaseUsing()) return false;
                            if (player.getExpansions('dcmingfa').length) return false;
                            return get.name(event.card) == 'sha' || get.type(event.card) == 'trick';
                        },
                        audio: 2,
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('dcmingfa'), lib.filter.notMe).ai = (target) => {
                                if (trigger.card.name == 'wuxie' || trigger.card.name == 'tiesuo' || trigger.card.name == 'jiedao') return 0;
                                return get.effect(target, trigger.card, player, player) > 0;
                            }
                            'step 1'
                            if (result.bool) {
                                player.logSkill('dcmingfa', result.targets[0]);
                                player.addToExpansion('give', trigger.cards).gaintag.add('dcmingfa');
                                result.targets[0].storage.dcmingfaSource = player;
                                result.targets[0].addTempSkill('dcmingfa_end', { player: 'phaseAfter' });
                                result.targets[0].storage.dcmingfa_mark = '';
                                result.targets[0].addTempSkill('dcmingfa_mark', { player: 'phaseAfter' });
                                var cc = get.translation(trigger.card.name);
                                if (cc.length > 2) cc = cc.slice(0, 2) + "...";
                                result.targets[0].markSkill("dcmingfa_mark", '', '明伐 ' + cc);
                                var xx = get.translation(result.targets[0]);
                                player.storage.dcmingfa_mark2 = '';
                                player.addSkill("dcmingfa_mark2")
                                player.markSkill("dcmingfa_mark2", '', '明伐 ' + xx);
                            }
                        },
                        subSkill: {
                            mark: {
                                intro: {}, onremove: function (player) {
                                    player.unmarkSkill('dcmingfa_mark');
                                    player.unmarkSkill('dcmingfa_mark2');
                                    delete player.dcmingfa_mark;
                                    delete player.dcmingfa_mark2;
                                }, sub: true,
                            },
                            mark2: { intro: {}, sub: true, },
                            end: {
                                trigger: {
                                    player: "phaseEnd",
                                },
                                forced: true,
                                direct: true,
                                audio: "dcmingfa",
                                filter: function (event, player) {
                                    return player.storage.dcmingfaSource && player.storage.dcmingfaSource.isIn() && player.storage.dcmingfaSource.getExpansions('dcmingfa').length;
                                },
                                content: function () {
                                    'step 0'
                                    event.count = Math.min(player.countCards('h'), 5);
                                    if (event.count == 0) event.count = 1;
                                    player.storage.dcmingfaSource.logSkill('dcmingfa', player);
                                    event.card = get.copy(player.storage.dcmingfaSource.getExpansions('dcmingfa')[0]);

                                    'step 1'
                                    player.storage.dcmingfaSource.useCard(event.card, player);
                                    'step 2'
                                    if (!player.isIn()) {
                                        player.storage.dcmingfaSource.loseToDiscardpile(player.storage.dcmingfaSource.getExpansions('dcmingfa'));
                                        event.finish();
                                    }
                                    'step 3'
                                    event.count--;
                                    if (event.count > 0 && player.storage.dcmingfaSource.isIn()) event.goto(1);
                                    else player.storage.dcmingfaSource.loseToDiscardpile(player.storage.dcmingfaSource.getExpansions('dcmingfa'));
                                    'step 4'
                                    player.storage.dcmingfaSource.unmarkSkill('dcmingfa_mark2')
                                },
                                sub: true,
                            },
                        },
                    }
                    //司马徽 龙印
                    lib.skill.smh_huoji = {
                        charlotte: true,
                        group: ["smh_yeyan"],
                        mark: true,
                        marktext: "龙印",
                        intro: {
                            name: "龙印",
                            content: "<li>出牌阶段限三次，你可以将一张红色牌当【火攻】使用。<br><li>若你同时拥有「凤印」，则你视为拥有技能〖业炎〗。（发动〖业炎〗后，弃置龙印和凤印）",
                        },
                        usable: 3,
                        audio: 2,
                        enable: "chooseToUse",
                        position: "hes",
                        filterCard: function (card) {
                            return get.color(card) == 'red';
                        },
                        viewAs: {
                            name: "huogong",
                            nature: "fire",
                        },
                        viewAsFilter: function (player) {
                            if (player.hasSkill('huoji')) return false;
                            if (!game.hasPlayer(function (current) {
                                return current.hasSkill('xinfu_jianjie');
                            })) return false;
                            if (!player.countCards('hes', { color: 'red' })) return false;
                        },
                        prompt: "将一张红色牌当火攻使用",
                        check: function (card) {
                            var player = _status.currentPhase;
                            if (player.countCards('h') > player.hp) {
                                return 6 - get.value(card);
                            }
                            return 4 - get.value(card)
                        },
                        ai: {
                            fireAttack: true,
                            basic: {
                                order: 4,
                                value: [3, 1],
                                useful: 1,
                            },
                            wuxie: function (target, card, player, current, state) {
                                if (get.attitude(current, player) >= 0 && state > 0) return false;
                            },
                            result: {
                                player: function (player) {
                                    var nh = player.countCards('h');
                                    if (nh <= player.hp && nh <= 4 && _status.event.name == 'chooseToUse') {
                                        if (typeof _status.event.filterCard == 'function' &&
                                            _status.event.filterCard({ name: 'huogong' }, player, _status.event)) {
                                            return -10;
                                        }
                                        if (_status.event.skill) {
                                            var viewAs = get.info(_status.event.skill).viewAs;
                                            if (viewAs == 'huogong') return -10;
                                            if (viewAs && viewAs.name == 'huogong') return -10;
                                        }
                                    }
                                    return 0;
                                },
                                target: function (player, target) {
                                    if (target.hasSkill('huogong2') || target.countCards('h') == 0) return 0;
                                    if (player.countCards('h') <= 1) return 0;
                                    if (target == player) {
                                        if (typeof _status.event.filterCard == 'function' &&
                                            _status.event.filterCard({ name: 'huogong' }, player, _status.event)) {
                                            return -1.15;
                                        }
                                        if (_status.event.skill) {
                                            var viewAs = get.info(_status.event.skill).viewAs;
                                            if (viewAs == 'huogong') return -1.15;
                                            if (viewAs && viewAs.name == 'huogong') return -1.15;
                                        }
                                        return 0;
                                    }
                                    return -1.15;
                                },
                            },
                            tag: {
                                damage: 1,
                                fireDamage: 1,
                                natureDamage: 1,
                                norepeat: 1,
                            },
                        },
                    };
                    //司马徽 凤印
                    lib.skill.smh_lianhuan = {
                        audio: 2,
                        charlotte: true,
                        enable: "phaseUse",
                        filter: function (event, player) {
                            if (player.hasSkill('lianhuan') || player.hasSkill('xinlianhuan')) return false;
                            if (!game.hasPlayer(function (current) {
                                return current.hasSkill('xinfu_jianjie');
                            })) return false;
                            if ((player.getStat().skill.smh_lianhuan || 0) + (player.getStat().skill.smh_lianhuan1 || 0) >= 3) return false;
                            return player.countCards('hs', { suit: 'club' }) > 0;
                        },
                        filterCard: function (card) {
                            return get.suit(card) == 'club';
                        },
                        viewAs: {
                            name: "tiesuo",
                        },
                        position: "hs",
                        prompt: "将一张梅花牌当铁锁连环使用",
                        check: function (card) { return 6 - get.value(card) },
                        mark: true,
                        marktext: "凤印",
                        intro: {
                            name: "凤印",
                            content: "<li>出牌阶段限三次，你可以将你的任意一张梅花手牌当作【铁索连环】使用或重铸。",
                        },
                        group: ["smh_lianhuan1"],
                        ai: {
                            wuxie: function (target, card, player, viewer) {
                                if (_status.event.getRand() < 0.5) return 0;
                                if (player == game.me && get.attitude(viewer, player) > 0) {
                                    return 0;
                                }
                            },
                            basic: {
                                useful: 4,
                                value: 4,
                                order: 7,
                            },
                            result: {
                                target: function (player, target) {
                                    if (target.isLinked()) {
                                        if (target.hasSkillTag('link')) return 0;
                                        var f = target.hasSkillTag('nofire');
                                        var t = target.hasSkillTag('nothunder');
                                        if (f && t) return 0;
                                        if (f || t) return 0.5;
                                        return 2;
                                    }
                                    if (get.attitude(player, target) >= 0) return -0.9;
                                    if (ui.selected.targets.length) return -0.9;
                                    if (game.hasPlayer(function (current) {
                                        return get.attitude(player, current) <= -1 && current != target && !current.isLinked();
                                    })) {
                                        return -0.9;
                                    }
                                    return 0;
                                },
                            },
                            tag: {
                                multitarget: 1,
                                multineg: 1,
                                norepeat: 1,
                            },
                        },
                    };
                    lib.skill.guili = {
                        audio: 2,
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        locked: false,
                        filter: function (event, player) {
                            return player.phaseNumber == 1 && game.hasPlayer((current) => current != player);
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(lib.filter.notMe, true, '请选择【归离】的目标', lib.translate.guili_info).set('ai', function (target) {
                                return -get.threaten(target);
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.line(target, 'green');
                                game.log(player, '选择了', target);
                                player.storage.guili = '';
                                player.markSkill("guili", '', '归离 ' + get.translation(target));
                                player.storage.guili_insert = target;
                                player.storage.guili = target;
                                player.addSkill('guili_insert');
                                game.delayx();
                            }
                        },
                        intro: {
                            content: "$的回合没造成伤害，<br>你获得一个额外的回合。",
                        },
                        onremove: true,
                        subSkill: {
                            insert: {
                                trigger: {
                                    global: "phaseAfter",
                                },
                                forced: true,
                                charlotte: true,
                                logTarget: "player",
                                filter: function (event, player) {
                                    if (event.player != player.storage.guili_insert) return false;
                                    if (event.player.getHistory('sourceDamage').length > 0) return false;
                                    var history = event.player.actionHistory;
                                    if (history[history.length - 1].isRound) return true;
                                    for (var i = history.length - 2; i >= 0; i--) {
                                        if (history[i].isMe) return false;
                                        if (history[i].isRound) return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    player.insertPhase();
                                    //     player.addTempSkill('guili_mark');             
                                    game.log(player, '执行一个额外的回合');
                                },
                                sub: true,
                            },
                            // mark:{mark:true,marktext:"归离",intro:{name:'额外回合',content:'当前进行的是额外回合。',},sub:true,},  
                        },
                    }
                    lib.skill.liji = {
                        enable: "phaseUse",
                        audio: 2,
                        filter: function (event, player) {
                            return (player.getStat().skill.liji || 0) < (event.liji_num || 0);
                        },
                        onChooseToUse: function (event) {
                            if (game.online) return;
                            var num = 0;
                            var evt2 = event.getParent();
                            if (!evt2.liji_all) evt2.liji_all = (game.players.length > 4 ? 8 : 4);
                            game.getGlobalHistory('cardMove', function (evt) {
                                if (evt.name == 'cardsDiscard' || (evt.name == 'lose' && evt.position == ui.discardPile)) num += evt.cards.length;
                            });
                            event.set('liji_num', Math.floor(num / evt2.liji_all));
                        },
                        filterCard: true,
                        position: "he",
                        // check:function(card){
                        // var val=get.value(card);
                        // if(!_status.event.player.getStorage('refenyin_mark').contains(get.suit(card))) return 12-val;
                        // return 8-val;
                        // },
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            target.damage('nocard');
                        },
                        ai: {
                            order: 10,
                            result: {
                                target: -1.5,
                            },
                            tag: {
                                damage: 1,
                            },
                        },
                    }
                    lib.skill.tongxie = {
                        audio: 2,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        onremove: function (player) {
                            for (var i of game.players) i.removeSkill('tongxie_mark');
                        },
                        content: function () {
                            'step 0'
                            for (var i of game.players) i.removeSkill('tongxie_mark');
                            player.chooseTarget(get.prompt('tongxie'), '选择至多两名其他角色作为“同协角色”', lib.filter.notMe, [1, 2]).set('ai', function (target) {
                                return get.attitude(_status.event.player, target);
                            });
                            'step 1'
                            if (result.bool) {
                                var targets = result.targets;
                                for (var i = 0; i < targets.length; i++) {
                                    targets[i].addSkill('tongxie_mark');
                                }
                                player.addSkill('tongxie_mark');
                                player.storage.tongxie = targets;
                                targets.add(player);
                                player.logSkill('tongxie', targets);
                                player.addTempSkill('tongxie_effect', { player: 'phaseBegin' });
                                player.markAuto('tongxie_effect', targets);
                                var min = player.countCards('h'), min_player = player;
                                for (var i of targets) {
                                    if (i == player) continue;
                                    var num = i.countCards('h');
                                    if (num < min) {
                                        min = num;
                                        min_player = i;
                                    }
                                    else if (num == min) min_player = false;
                                }
                                if (min_player) min_player.draw();
                                else game.delayx();
                            }
                        },
                        subSkill: {
                            mark: { mark: true, intro: {}, sub: true, },
                            effect: {
                                audio: "tongxie",
                                charlotte: true,
                                trigger: {
                                    global: "useCardAfter",
                                },
                                onremove: true,
                                forced: true,
                                popup: false,
                                filter: function (event, player) {
                                    if (event.card.name != 'sha' || event.targets.length != 1 || !event.targets[0].isIn()) return false;
                                    if (event.getParent(2).name == 'tongxie_effect') return false;
                                    var list = player.getStorage('tongxie_effect'), target = event.targets[0];
                                    if (!list.contains(event.player)) return false;
                                    for (var i of list) {
                                        if (i == event.player || !i.isIn()) continue;
                                        if (!i.canUse('sha', target, false)) continue;
                                        if (_status.connectMode && i.countCards('hs') > 0) return true;
                                        if (i.hasSha()) return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    event.targets = player.getStorage('tongxie_effect').filter(function (i) {
                                        return i !== trigger.player;
                                    }).sortBySeat();
                                    event.target = trigger.targets[0];
                                    'step 1'
                                    var current = targets.shift();
                                    if (current.isIn() && target.isIn() && current.canUse('sha', target, false) && (_status.connectMode || current.hasSha())) {
                                        current.chooseToUse(function (card, player, event) {
                                            if (get.name(card) != 'sha') return false;
                                            return lib.filter.filterCard.apply(this, arguments);
                                        }, '同协：是否对' + get.translation(target) + '使用一张杀？').set('targetRequired', true).set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                            if (target != _status.event.sourcex && !ui.selected.targets.contains(_status.event.sourcex)) return false;
                                            return lib.filter.targetEnabled.apply(this, arguments);
                                        }).set('sourcex', target).set('logSkill', 'tongxie_effect').set('addCount', false);
                                        if (targets.length > 0) event.redo();
                                    }
                                },
                                group: ["tongxie_damage", "tongxie_count"],
                                sub: true,
                            },
                            damage: {
                                audio: "tongxie",
                                charlotte: true,
                                trigger: {
                                    global: "damageBegin4",
                                },
                                filter: function (event, player) {
                                    var list = player.getStorage('tongxie_effect');
                                    if (!list.contains(event.player)) return false;
                                    for (var i of list) {
                                        if (i != event.player && i.isAlive() && !i.hasSkill('tongxie_count2', null, null, false)) return true;
                                    }
                                    return false;
                                },
                                forced: true,
                                popup: false,
                                content: function () {
                                    'step 0'
                                    event.targets = player.getStorage('tongxie_effect').filter(function (i) {
                                        return i != trigger.player && i.isAlive() && !i.hasSkill('tongxie_count2', null, null, false);
                                    }).sortBySeat();
                                    event.num = 0;
                                    'step 1'
                                    var target = targets[num];
                                    event.num++;
                                    event.target = target;
                                    target.chooseBool('同协：是否为' + get.translation(trigger.player) + '阻挡伤害？', '失去1点体力，防止' + get.translation(trigger.player) + '即将受到的' + get.cnNumber(trigger.num) + '点伤害').set('ai', function () {
                                        var player = _status.event.player, target = _status.event.getTrigger().player;
                                        var trigger = _status.event.getTrigger();
                                        var eff1 = get.damageEffect(target, trigger.source, player, trigger.nature);
                                        if (trigger.num > 1) eff1 = Math.min(-1, eff1) * trigger.num;
                                        var eff2 = get.effect(player, { name: 'losehp' }, player, player);
                                        return eff2 > eff1;
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        target.logSkill('tongxie_damage', trigger.player);
                                        trigger.cancel();
                                        target.loseHp();
                                    }
                                    else if (num < targets.length) event.goto(1);
                                },
                                sub: true,
                            },
                            count: {
                                trigger: {
                                    global: "loseHpEnd",
                                },
                                charlotte: true,
                                forced: true,
                                firstDo: true,
                                popup: false,
                                silent: true,
                                filter: function (event, player) {
                                    return player.getStorage('tongxie_effect').contains(event.player);
                                },
                                content: function () {
                                    trigger.player.addTempSkill('tongxie_count2');
                                },
                                sub: true,
                            },
                            "count2": {
                                charlotte: true,
                                sub: true,
                            },
                        },
                    }
                    lib.skill.discretesidi = {
                        audio: "disordersidi",
                        trigger: {
                            player: "useCardAfter",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return get.type(event.card, false) != 'delay' && game.hasPlayer(function (current) {
                                return player != current && (!player.storage.discretesidi || !player.storage.discretesidi.contains(current));
                            });
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('discretesidi'), '选择两名角色，或选择一名角色用牌为自己', [1, 2], function (card, player, target) {
                                if (ui.selected.targets.length) return true;
                                return target != player && (!player.storage.discretesidi || !player.storage.discretesidi.contains(target));
                            }).set('complexTarget', true).set('complexSelect', true).set('targetprompt', ['司敌', '用牌目标']).set('ai', function (target) {
                                var player = _status.event.player;
                                if (!ui.selected.targets.length) {
                                    if (target.getEnemies().length == 1) return 2 + Math.random();
                                    return 1 + Math.random();
                                }
                                var targetx = ui.selected.targets[0];
                                if (targetx.getEnemies().contains(target) && targetx.inRange(target)) return Math.random() - 0.5;
                                return 0;
                            }).animate = false;
                            'step 1'
                            if (result.bool && result.targets.length) {
                                var targets = result.targets;
                                player.logSkill('discretesidi', targets[0]);
                                if (targets.length == 1) targets.push(targets[0]);
                                if (!player.storage.discretesidi) player.storage.discretesidi = [];
                                if (!player.storage.discretesidi2) player.storage.discretesidi2 = [];
                                player.storage.discretesidi.push(targets[0]);
                                player.storage.discretesidi2.push(targets[1]);
                                player.markSkill('discretesidi');
                                if (player == game.me || player.isUnderControl()) {
                                    targets[0].storage.discretesidi_mark = '';
                                    targets[0].addSkill('discretesidi_mark')
                                    targets[0].markSkill('discretesidi_mark', '', '司敌 ' + get.translation(targets[1]));
                                }
                                game.delayx();
                            }
                        },
                        // intro:{
                        // content:function(storage,player){
                        // if((player==game.me||player.isUnderControl())&&!game.observe){
                        // var str='R={ ';
                        // for(var i=0;i<storage.length;i++){
                        // str+=('&lt;'+get.translation(storage[i])+', '+get.translation(player.storage.discretesidi2[i])+'&gt;');
                        // if(i<storage.length-1) str+=', ';
                        // }
                        // str+=' }'
                        // return str;
                        // }
                        // return '已指定'+get.translation(storage)+'为目标';
                        // },
                        // },
                        onremove: function (player) {
                            delete player.storage.discretesidi;
                            delete player.storage.discretesidi2;
                        },
                        group: ["discretesidi_clear", "discretesidi_exec"],
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            clear: {
                                trigger: {
                                    global: ["useCardToPlayered", "die"],
                                },
                                forced: true,
                                popup: false,
                                locked: false,
                                filter: function (event, player) {
                                    if (!player.storage.discretesidi || !player.storage.discretesidi.contains(event.player)) return false;
                                    if (event.name == 'die') return true;
                                    if (get.type(event.card, false) != 'delay') {
                                        var index = player.storage.discretesidi.indexOf(event.player);
                                        return index != -1 && (player.storage.discretesidi2[index] != event.target || event.targets.length != 1);
                                    }
                                    return false;
                                },
                                content: function () {
                                    player.storage.discretesidi2.splice(player.storage.discretesidi.indexOf(trigger.player), 1);
                                    player.unmarkAuto('discretesidi', [trigger.player]);
                                    trigger.player.removeSkill('discretesidi_mark');
                                    trigger.player.unmarkSkill('discretesidi_mark');
                                },
                                sub: true,
                            },
                            exec: {
                                audio: "disordersidi",
                                trigger: {
                                    global: "useCardToPlayered",
                                },
                                forced: true,
                                locked: false,
                                filter: function (event, player) {
                                    if (get.type(event.card, false) == 'delay' || !player.storage.discretesidi || event.targets.length != 1) return false;
                                    var index = player.storage.discretesidi.indexOf(event.player);
                                    return index != -1 && player.storage.discretesidi2[index] == event.target;
                                },
                                logTarget: "player",
                                content: function () {
                                    'step 0'
                                    player.storage.discretesidi2.splice(player.storage.discretesidi.indexOf(trigger.player), 1);
                                    player.unmarkAuto('discretesidi', [trigger.player]);
                                    trigger.player.removeSkill('discretesidi_mark');
                                    trigger.player.unmarkSkill('discretesidi_mark');
                                    if (trigger.target == player) {
                                        player.draw();
                                        event.finish();
                                        return;
                                    }
                                    var target = trigger.player;
                                    event.target = target;
                                    player.chooseControl('cancel2').set('choiceList', [
                                        '取消' + get.translation(trigger.card) + '的所有目标并对' + get.translation(target) + '造成1点伤害',
                                        '摸两张牌',
                                    ]).set('ai', function () {
                                        var player = _status.event.player, evt = _status.event.getTrigger();
                                        if (get.damageEffect(evt.player, player, player) > 0 && get.effect(evt.target, evt.card, evt.player, player) < 0) return 0;
                                        return 1;
                                    });
                                    'step 1'
                                    if (result.index == 0) {
                                        trigger.cancel();
                                        trigger.targets.length = 0;
                                        trigger.getParent().triggeredTargets1.length = 0;
                                        if (!_status.dying.length) target.damage();
                                    }
                                    else if (result.index == 1) player.draw(2);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.xinfu_jixu = {
                        audio: 2,
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        filterTarget: function (card, player, target) {
                            if (player == target) return false;
                            if (ui.selected.targets.length) {
                                return target.hp == ui.selected.targets[0].hp;
                            }
                            return true;
                        },
                        selectTarget: [1, Infinity],
                        multitarget: true,
                        multiline: true,
                        content: function () {
                            "step 0"
                            targets.sort(lib.sort.seat);
                            "step 1"
                            if (!event.num) event.num = 0;
                            if (!event.caicuolist) event.caicuolist = [];
                            targets[event.num].chooseBool("是否押杀？").ai = function (event, player) {
                                var evt = _status.event.getParent();
                                if (get.attitude(targets[event.num], evt.player) > 0) return evt.player.countCards('h', 'sha') ? false : true;
                                return Math.random() < 0.5;
                            };
                            "step 2"
                            if (result.bool) {
                                targets[event.num].chat('有杀');
                                game.log(targets[event.num], '认为', player, '#g有杀');
                                if (!player.countCards('h', 'sha')) { event.caicuolist.add(targets[event.num]); targets[event.num].addTempSkill('xinfu_jixu_caicuo') };
                            } else {
                                targets[event.num].chat('没杀');
                                game.log(targets[event.num], '认为', player, '#y没有杀');
                                if (player.countCards('h', 'sha')) { event.caicuolist.add(targets[event.num]); targets[event.num].addTempSkill('xinfu_jixu_caicuo') };
                            }
                            event.num++;
                            game.delay();
                            if (event.num < targets.length) event.goto(1);
                            "step 3"
                            player.popup(player.countCards('h', 'sha') ? "有杀" : "没杀");
                            game.log(player, player.countCards('h', 'sha') ? "有杀" : "没杀");
                            player.addTempSkill(player.countCards('h', 'sha') ? "xinfu_jixu_yousha" : "xinfu_jixu_meisha");
                            if (event.caicuolist.length == 0) {
                                targets[event.num].addTempSkill('xinfu_jixu_caicuo');
                                var evt = _status.event.getParent('phaseUse');
                                if (evt && evt.name == 'phaseUse') {
                                    evt.skipped = true;
                                    event.finish();
                                }
                            }
                            else {
                                player.draw(event.caicuolist.length)
                                if (player.countCards('h', 'sha')) {
                                    player.addTempSkill('jixu_sha');
                                    player.storage.jixu_sha = event.caicuolist;
                                    event.finish();
                                }
                                else event.num = 0;
                            }
                            "step 4"
                            if (event.num < event.caicuolist.length) {
                                var target = event.caicuolist[event.num];
                                player.discardPlayerCard(true, 'he', target);
                                event.num++;
                                event.redo();
                            }
                        },
                        subSkill: {
                            caicuo: { mark: true, marktext: "击虚 猜错", intro: {}, sub: true, },
                            meisha: { mark: true, marktext: "击虚 没杀", intro: {}, sub: true, },
                            yousha: { mark: true, marktext: "击虚 有杀", intro: {}, sub: true, },
                        },
                        ai: {
                            order: function () {
                                return get.order({ name: 'sha' }) + 0.1;
                            },
                            result: {
                                target: function (player, target) {
                                    var raweffect = function (player, target) {
                                        if (player.countCards('h', 'sha')) {
                                            return get.effect(target, { name: 'sha' }, player, target);
                                        }
                                        else {
                                            var att = get.attitude(player, target);
                                            var nh = target.countCards('h');
                                            if (att > 0) {
                                                if (target.getEquip('baiyin') && target.isDamaged() &&
                                                    get.recoverEffect(target, player, player) > 0) {
                                                    if (target.hp == 1 && !target.hujia) return 1.6;
                                                    if (target.hp == 2) return 0.01;
                                                    return 0;
                                                }
                                            }
                                            var es = target.getCards('e');
                                            var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                            var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                                            var noh = (nh == 0 || target.hasSkillTag('noh'));
                                            if (noh && (noe || noe2)) return 0;
                                            if (att <= 0 && !target.countCards('he')) return 1.5;
                                            return -1.5;
                                        }
                                    }
                                    var num = game.countPlayer(function (current) {
                                        return current != player && current.hp == target.hp && (raweffect(player, current) * get.attitude(player, current)) > 0
                                    });
                                    return raweffect(player, target) * Math.max(0, num - 1);
                                },
                            },
                            expose: 0.4,
                        },
                    }
                    lib.skill.baiyi = {
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        selectTarget: 2,
                        limited: true,
                        skillAnimation: true,
                        filter: function (event, player) {
                            return player.isDamaged() && game.players.length > 2;
                        },
                        multitarget: true,
                        multiline: true,
                        changeSeat: true,
                        // contentBefore:function(){
                        // player.$fullscreenpop('败移','thunder');
                        // },
                        content: function () {
                            player.awakenSkill('baiyi');
                            game.broadcastAll(function (target1, target2) {
                                game.swapSeat(target1, target2);
                            }, targets[0], targets[1])
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: function (player, target) {
                                    if (player.hasUnknown() && target != player.next && target != player.previous) return 0;
                                    var distance = Math.pow(get.distance(player, target, 'absolute'), 2);
                                    if (!ui.selected.targets.length) return distance;
                                    var distance2 = Math.pow(get.distance(player, ui.selected.targets[0], 'absolute'), 2);
                                    return Math.min(0, distance - distance2);
                                },
                            },
                        },
                        mark: true,
                        intro: {
                            content: "limited",
                        },
                        init: function (player, skill) {
                            player.storage[skill] = false;
                        },
                    }
                    lib.skill.resghuishi = {
                        audio: "sghuishi",
                        inherit: "sghuishi",
                        filterTarget: true,
                        content: function () {
                            'step 0'
                            player.awakenSkill('resghuishi');
                            var list = target.getSkills(null, false, false).filter(function (skill) {
                                var info = lib.skill[skill];
                                return info && info.juexingji && !target.awakenedSkills.contains(skill);
                            });
                            if (player.maxHp >= game.players.length && list.length > 0) {
                                if (list.length == 1) event._result = { control: list[0] };
                                else player.chooseControl(list).set('prompt', '选择一个觉醒技，令' + get.translation(target) + '可无视条件发动该技能');
                            }
                            else {
                                target.draw(4);
                                event.goto(2);
                            }
                            'step 1'
                            target.storage.resghuishi = result.control;
                            target.markSkill('resghuishi');
                            target.addSkill('resghuishi_mark');
                            target.markSkill('resghuishi_mark', '', '辉逝 ' + get.translation(result.control));
                            var info = lib.skill[result.control];
                            if (info.filter && !info.charlotte && !info.sghuishi_filter) {
                                info.sghuishi_filter = info.filter;
                                info.filter = function (event, player) {
                                    if (player.storage.resghuishi) return true;
                                    return this.sghuishi_filter.apply(this, arguments);
                                }
                            }
                            'step 2'
                            player.loseMaxHp(2);
                        },
                        intro: {
                            content: "发动【$】时无视条件",
                        },
                        ai: {
                            order: 0.1,
                            expose: 0.2,
                            result: {
                                target: function (player, target) {
                                    if (target != player && player.hasUnknown() || player.maxHp < (player.getDamagedHp() > 1 ? 5 : 6)) return 0;
                                    if (target == player && player.hasSkill('resghuishi') && game.hasPlayer(function (current) {
                                        return current.getAllHistory('damage').length == 0;
                                    })) return 4;
                                    var list = target.getSkills(null, false, false).filter(function (skill) {
                                        var info = lib.skill[skill];
                                        return info && info.juexingji && !target.awakenedSkills.contains(skill);
                                    });
                                    if (list.length || target.hasJudge('lebu') || target.hasSkillTag('nogain')) return 0;
                                    return 4;
                                },
                            },
                        },
                        enable: "phaseUse",
                        limited: true,
                        skillAnimation: true,
                        animationColor: "water",
                        mark: true,
                        init: function (player, skill) {
                            player.storage[skill] = false;
                        },
                        subSkill: {
                            mark: {
                                intro: {},
                                trigger: { player: ['phaseZhunbeiBefore', 'dieBefore'], }, forced: true,
                                content: function () {
                                    player.removeSkill('resghuishi_mark');
                                    player.unmarkSkill('resghuishi_mark');
                                }, sub: true,
                            },
                        },
                    }
                    lib.skill.reqianxin2 = {
                        trigger: { player: 'phaseZhunbeiBegin' },
                        forced: true,
                        popup: false,
                        charlotte: true,
                        init: function (player, skill) {
                            if (!player.storage[skill]) player.storage[skill] = [];
                        },
                        mark: true,
                        marktext: "遣信",
                        intro: { name: '遣信', },
                        onremove: true,
                        filter: function (event, player) {
                            var list = player.storage.reqianxin2;
                            if (Array.isArray(list)) {
                                var hs = player.getCards('h');
                                for (var i = 0; i < list.length; i++) {
                                    if (hs.contains(list[i][0]) && list[i][1].isIn()) return true;
                                }
                            }
                            return false;
                        },
                        content: function () {
                            'step 0'
                            var current = player.storage.reqianxin2.shift();
                            event.source = current[1];
                            if (!event.source.isIn() || !player.getCards('h').contains(current[0])) event.goto(3);
                            'step 1'
                            source.logSkill('reqianxin', player);
                            player.chooseControl().set('choiceList', [
                                '令' + get.translation(source) + '摸两张牌',
                                '令自己本回合的手牌上限-2',
                            ]).set('prompt', get.translation(source) + '发动了【遣信】，请选择一项').set('source', source).set('ai', function () {
                                var player = _status.event.player;
                                if (get.attitude(player, _status.event.source) > 0) return 0;
                                if (player.maxHp - player.countCards('h') > 1) return 1;
                                return Math.random() > 0.5 ? 0 : 1;
                            });
                            'step 2'
                            if (result.index == 0) source.draw(2);
                            else {
                                player.addTempSkill('reqianxin3')
                                player.addMark('reqianxin3', 2, false)
                            }
                            'step 3'
                            if (player.storage.reqianxin2.length) event.goto(0);
                            else player.removeSkill('reqianxin2');
                        },
                    }
                    lib.skill.reqianxin3 = {
                        mark: true,
                        marktext: "手牌上限-",
                        intro: {
                            name: '遣信',
                            content: '手牌上限-#',
                        },
                        onremove: true,
                        mod: {
                            maxHandcard: function (player, num) {
                                return num - player.countMark('reqianxin3');
                            },
                        },
                    }
                    lib.skill.yuanyu = {
                        audio: 2,
                        enable: "phaseUse",
                        usable: 1,
                        content: function () {
                            'step 0'
                            player.draw();
                            'step 1'
                            if (player.countCards('h') > 0) {
                                var suits = lib.suit.slice(0), cards = player.getExpansions('yuanyu');
                                for (var i of cards) suits.remove(get.suit(i, false));
                                var str = '选择一张手牌，作为“怨”置于武将牌上；同时选择一名其他角色，令该角色获得〖怨语〗的后续效果。'
                                if (suits.length) {
                                    str += '目前“怨”中未包含的花色：';
                                    for (var i of suits) str += get.translation(i);
                                }
                                player.chooseCardTarget({
                                    filterCard: true,
                                    filterTarget: lib.filter.notMe,
                                    position: 'h',
                                    prompt: '怨语：选择置于武将牌上的牌和目标',
                                    prompt2: str,
                                    suits: suits,
                                    forced: true,
                                    ai1: function (card) {
                                        var val = get.value(card), evt = _status.event;
                                        if (evt.suits.contains(get.suit(card, false))) return 8 - get.value(card);
                                        return 5 - get.value(card);
                                    },
                                    ai2: function (target) {
                                        var player = _status.event.player;
                                        if (player.storage.yuanyu_damage && player.storage.yuanyu_damage.contains(target)) return 0;
                                        return -get.attitude(player, target);
                                    },
                                });
                            }
                            else event.finish();
                            'step 2'
                            var target = result.targets[0];
                            player.addSkill('yuanyu_damage');
                            player.markAuto('yuanyu_damage', result.targets);
                            player.line(target, 'green');
                            if (!target.storage.yuanyu_mark) {
                                target.storage.yuanyu_mark = player;
                                target.addSkill('yuanyu_mark');
                            }
                            player.addToExpansion(result.cards, player, 'give').gaintag.add('yuanyu');
                            if (!player.storage.yuanyu1) player.storage.yuanyu1 = [];
                            player.storage.yuanyu1.add(get.suit(result.cards));
                            var str = [];
                            if (player.storage.yuanyu1.contains('heart')) str += '♥️️';
                            if (player.storage.yuanyu1.contains('diamond')) str += '♦️️';
                            if (player.storage.yuanyu1.contains('spade')) str += '♠️️';
                            if (player.storage.yuanyu1.contains('club')) str += '♣️️';
                            player.unmarkSkill('yuanyu');
                            player.storage.yuanyu = '';
                            player.markSkill("yuanyu", '', '怨语 ' + str);
                        },
                        marktext: "怨语",
                        intro: {
                            content: "expansion",
                            markcount: "expansion",
                        },
                        onremove: function (player, skill) {
                            var cards = player.getExpansions(skill);
                            if (cards.length) player.loseToDiscardpile(cards);
                            player.removeSkill('yuanyu_damage');
                        },
                        ai: {
                            order: 7,
                            result: {
                                player: 1,
                            },
                        },
                        subSkill: {
                            mark: true,
                            mark: {
                                mark: "character",
                                intro: {
                                    content: "已获得〖怨语〗效果",
                                    onunmark: true,
                                },
                                sub: true,
                            },
                            damage: {
                                trigger: {
                                    global: "damageSource",
                                },
                                forced: true,
                                charlotte: true,
                                onremove: function (player, skill) {
                                    if (player.storage[skill]) {
                                        for (var i of player.storage[skill]) {
                                            if (i.storage.yuanyu_mark == player) i.unmarkSkill('yuanyu_mark'); i.removeSkill('yuanyu_mark');
                                        }
                                    }
                                    delete player.storage[skill];
                                },
                                filter: function (event, player) {
                                    var source = event.source;
                                    return source && player.getStorage('yuanyu_damage').contains(source) && source.countCards('h') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    event.count = trigger.num;
                                    event.target = trigger.source;
                                    'step 1'
                                    event.count--;
                                    var suits = lib.suit.slice(0), cards = player.getExpansions('yuanyu');
                                    for (var i of cards) suits.remove(get.suit(i, false));
                                    var next = target.chooseCard('h', true, '将一张手牌置于' + get.translation(target) + '的武将牌上');
                                    next.set('suits', suits);
                                    next.set('ai', function (card) {
                                        var val = get.value(card), evt = _status.event;
                                        if (evt.suits.contains(get.suit(card, false))) return 5 - get.value(card);
                                        return 8 - get.value(card);
                                    });
                                    if (suits.length) {
                                        var str = '目前未包含的花色：';
                                        for (var i of suits) str += get.translation(i);
                                        next.set('prompt2', str);
                                    }
                                    'step 2'
                                    player.addToExpansion(result.cards, target, 'give').gaintag.add('yuanyu');
                                    if (!player.storage.yuanyu1) player.storage.yuanyu1 = [];
                                    player.storage.yuanyu1.add(get.suit(result.cards));
                                    var str = [];
                                    if (player.storage.yuanyu1.contains('heart')) str += '♥️️';
                                    if (player.storage.yuanyu1.contains('diamond')) str += '♦️️';
                                    if (player.storage.yuanyu1.contains('spade')) str += '♠️️';
                                    if (player.storage.yuanyu1.contains('club')) str += '♣️️';
                                    player.unmarkSkill('yuanyu');
                                    player.storage.yuanyu = '';
                                    player.markSkill("yuanyu", '', '怨语 ' + str);
                                    'step 3'
                                    if (event.count > 0 && target.countCards('he') > 0 && player.hasSkill('yuanyu_damage')) event.goto(1);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.xiyan = {
                        audio: 2,
                        trigger: {
                            player: "addToExpansionAfter",
                        },
                        filter: function (event, player) {
                            if (!event.gaintag.contains('yuanyu')) return false;
                            var cards = player.getExpansions('yuanyu');
                            if (cards.length < lib.suit.length) return false;
                            var suits = lib.suit.slice(0);
                            for (var i of cards) {
                                suits.remove(get.suit(i));
                                if (!suits.length) return true;
                            }
                            return false;
                        },
                        logTarget: () => _status.currentPhase,
                        forced: true,
                        content: function () {
                            'step 0'
                            player.removeSkill('yuanyu_damage');
                            delete player.storage.yuanyu1;
                            var cards = player.getExpansions('yuanyu');
                            player.gain(cards, 'gain2');
                            'step 1'
                            var target = _status.currentPhase;
                            if (player == target) {
                                player.addMark('xiyan_buff', 4, false);
                                player.addTempSkill('xiyan_buff');
                            }
                            else {
                                target.addMark('xiyan_debuff', 4, false);
                                target.addTempSkill('xiyan_debuff');
                            }
                        },
                        subSkill: {
                            buff: {
                                charlotte: true,
                                mark: true,
                                marktext: "手牌上限+",
                                intro: {
                                    content: "本回合手牌上限+#且使用牌无次数限制",
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('xiyan_buff');
                                    },
                                    cardUsable: function (card, player) {
                                        return Infinity;
                                    },
                                },
                                sub: true,
                            },
                            debuff: {
                                charlotte: true,
                                mark: true,
                                marktext: "手牌上限-",
                                intro: {
                                    content: "本回合手牌上限-#且不能使用基本牌",
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num - player.countMark('xiyan_debuff');
                                    },
                                    cardEnabled: function (card) {
                                        if (get.type(card) == 'basic') return false;
                                    },
                                    cardSavable: function (card) {
                                        if (get.type(card) == 'basic') return false;
                                    },
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.twjingce = {
                        marktext: "策",
                        intro: {
                            name: "策",
                            content: "mark",
                        },
                        audio: 2,
                        trigger: {
                            player: "useCard",
                        },
                        filter: function (event, player) {
                            var evt = event.getParent('phaseUse');
                            if (!evt || evt.player != player) return false;
                            var history = player.getHistory('useCard', function (evtx) {
                                return evtx.getParent('phaseUse') == evt;
                            });
                            return history && history.indexOf(event) == player.hp - 1;
                        },
                        frequent: true,
                        content: function () {
                            'step 0'
                            player.draw(player.hp);
                            'step 1'
                            if (player.getHistory('sourceDamage').length || player.getHistory('gain', function (evt) {
                                return evt.getParent('phaseUse') == trigger.getParent('phaseUse') && evt.getParent().name == 'draw';
                            }).length > 1) player.addMark('twjingce', 1);
                        },
                        subSkill: {
                            mark: {
                                mark: true, intro: {}, onremove: function (player) {
                                    player.unmarkSkill('twjingce_mark');
                                    delete player.storage.twjingce_mark;
                                }, sub: true,
                            },
                        },
                        group: "xinfu_guagua1",
                    }
                    lib.skill.xinfu_guagua1 = {
                        trigger: { player: "useCard2", }, forced: true,
                        filter: function (event, player) { 
                        var evt=event.getParent('phaseUse');
                        if(evt.player==player) return true;},
                        content: function () { player.addTempSkill("twjingce_mark"); player.addMark('twjingce_mark'); },
                    }
                    lib.skill.twgezhi = {
                        audio: 2,
                        trigger: {
                            player: "useCard",
                        },
                        direct: true,
                        filter: function (event, player) {
                            if (!player.countCards('h')) return false;
                            var evt = event.getParent('phaseUse');
                            if (!evt || evt.player != player) return false;
                            var type = get.type2(event.card, false);
                            return !player.hasHistory('useCard', function (evtx) {
                                return evtx != event && get.type2(evtx.card, false) == type && evtx.getParent('phaseUse') == evt;
                            }, event);
                        },
                        content: function () {
                            'step 0'
                            if (!event.isMine() && !event.isOnline()) game.delayx();
                            player.chooseCard('是否发动【革制】重铸一张牌？').set('ai', function (card) {
                                return 5.5 - get.value(card);
                            });
                            player.addTempSkill("twgezhi_mark");
                            if (!player.storage.twgezhi_mark1) player.storage.twgezhi_mark1 = [];
                            var str = '';
                            if (get.type(trigger.card) == 'trick') str = '锦';
                            if (get.type(trigger.card) == 'delay') str = '锦';
                            else if (get.type(trigger.card) == 'basic') str = '基';
                            else if (get.type(trigger.card) == 'equip') str = '装';
                            var num = '';
                            if (player.storage.twgezhi_mark1.indexOf(str) == -1) player.storage.twgezhi_mark1 += str;
                            if (player.storage.twgezhi_mark1.indexOf('基') != -1) num += '基';
                            if (player.storage.twgezhi_mark1.indexOf('锦') != -1) num += '锦';
                            if (player.storage.twgezhi_mark1.indexOf('装') != -1) num += '装';
                            player.storage.twgezhi_mark = '';
                            player.addMark("twgezhi_mark", num);
                            'step 1'
                            if (result.bool) {
                                player.logSkill('twgezhi');
                                player.loseToDiscardpile(result.cards);
                                player.draw();
                            }
                        },
                        group: "twgezhi_buff",
                        subSkill: {
                            mark: {
                                marktext: '革制 ', intro: { name: '革制', },
                                onremove: function (player) {
                                    player.removeMark('twgezhi_mark');
                                    delete player.storage.twgezhi_mark1;
                                },
                            },
                            buff: {
                                audio: "twgezhi",
                                trigger: {
                                    player: "phaseUseEnd",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return player.getHistory('lose', function (evt) {
                                        return evt.getParent(2).name == 'twgezhi' && evt.getParent('phaseUse') == event;
                                    }).length > 1;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('twgezhi'), '你可以令一名角色选择获得一个其未获得过的效果：⒈攻击范围+2；⒉手牌上限+2；⒊加1点体力上限。', function (card, player, target) {
                                        return !target.hasSkill('twgezhi_选项一') || !target.hasSkill('twgezhi_选项二') || !target.hasSkill('twgezhi_选项三');
                                    }).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('twgezhi', target);
                                        var list = [];
                                        for (var i = 1; i <= 3; i++) {
                                            var str = '选项' + get.cnNumber(i, true);
                                            if (!target.hasSkill('twgezhi_' + str)) list.push(str);
                                        }
                                        if (list.length == 1) event._result = { control: list[0] };
                                        else target.chooseControl(list).set('choiceList', ['令自己的攻击范围+2', '令自己的手牌上限+2', '令自己的体力上限+1']).set('ai', function () {
                                            var player = _status.event.player, controls = _status.event.controls;
                                            if (controls.contains('选项一') && game.hasPlayer(function (current) {
                                                return (get.realAttitude || get.attitude)(player, current) < 0 && get.distance(player, current, 'attack') > 1;
                                            })) return '选项一';
                                            if (controls.contains('选项二') && player.needsToDiscard()) return '选项二';
                                            if (controls.contains('选项三')) return '选项三';
                                            return controls.randomGet();
                                        });
                                    }
                                    else {
                                        event._triggered = null;
                                        event.finish();
                                    }
                                    'step 2'
                                    target.addSkill('twgezhi_' + result.control);
                                    if (result.control == '选项三') target.gainMaxHp();
                                    'step 3'
                                    game.delayx();
                                },
                                sub: true,
                            },
                            "选项一": {
                                charlotte: true,
                                mod: {
                                    attackFrom: function (from, to, distance) {
                                        return distance - 2;
                                    },
                                },
                                mark: true,
                                marktext: "攻击范围+2",
                                intro: {
                                    content: "攻击范围+2",
                                },
                                sub: true,
                            },
                            "选项二": {
                                charlotte: true,
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + 2;
                                    },
                                },
                                mark: true,
                                marktext: "手牌上限+2",
                                intro: {
                                    content: "手牌上限+2",
                                },
                                sub: true,
                            },
                            // "选项三":{
                            // charlotte:true,
                            // mark:true,
                            // marktext:" 体限+1 ",
                            // intro:{
                            // content:"体力上限+1",
                            // },
                            // sub:true,
                            // },
                        },
                    }
                    lib.skill.twfengji = {
                        audio: 2,
                        mahouSkill: true,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        filter: function (event, player) {
                            return !player.getExpansions('twfengji').length && !player.hasSkill('twfengji_mahou') && player.countCards('he');
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseCard('he', get.prompt2('twfengji')).set('ai', function (card) {
                                var name = card.name, num = 0;
                                for (var i = 0; i < ui.cardPile.childNodes.length; i++) {
                                    if (ui.cardPile.childNodes[i].name == name) num++;
                                }
                                if (num < 2) return false;
                                return 8 - get.value(card);
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('twfengji');
                                player.addToExpansion(result.cards, player, 'giveAuto').gaintag.add('twfengji');
                                player.chooseControl('1回合', '2回合', '3回合').set('prompt', '请选择施法时长').set('ai', function () {
                                    var player = _status.event.player;
                                    var safe = Math.min(player.getHandcardLimit(), player.countCards('h', 'shan'));
                                    if (safe < Math.min(3, game.countPlayer())) {
                                        var next = player.next;
                                        while (next != player && get.attitude(next, player) > 0) {
                                            safe++;
                                            next = next.next;
                                        }
                                    }
                                    return Math.max(2, Math.min(safe, 3, game.countPlayer())) - 1;
                                });
                            }
                            else event.finish();
                            'step 2'
                            player.storage.twfengji_mahou = [result.index + 1, result.index + 1];
                            player.addTempSkill('twfengji_mahou', { player: 'die' });
                            player.addTempSkill('twfengji_mark', { player: 'die' });
                            player.storage.twfengji_mark = [];
                            player.markSkill('twfengji_mark', '', '蜂集' + player.storage.twfengji_mahou[0] + ' - ' + player.storage.twfengji_mahou[1])
                        },
                        marktext: "示",
                        onremove: function (player, skill) {
                            var cards = player.getExpansions(skill);
                            if (cards.length) player.loseToDiscardpile(cards);
                        },
                        intro: {
                            content: "expansion",
                            markcount: "expansion",
                        },
                        subSkill: {
                            mark: {
                                intro: {
                                    name: "施法：蜂集",
                                    content: function (s, p) {
                                        var str = '施法：蜂集-剩余回合：'
                                        str += p.storage.twfengji_mahou[1];
                                        str += '<br>施法：蜂集-成功摸牌数：'
                                        str += p.storage.twfengji_mahou[0];
                                        return str;
                                    },
                                }, sub: true,
                            },
                            mahou: {
                                trigger: {
                                    global: "phaseBegin",
                                },
                                forced: true,
                                popup: false,
                                charlotte: true,
                                content: function () {
                                    var list = player.storage.twfengji_mahou;
                                    list[1]--;
                                    if (list[1] == 0) {
                                        game.log(player, '的“蜂集”魔法生效');
                                        player.logSkill('twfengji');
                                        var cards = player.getExpansions('twfengji');
                                        if (cards.length) {
                                            var cards2 = [], num = list[0];
                                            for (var card of cards) {
                                                for (var i = 0; i < num; i++) {
                                                    var card2 = get.cardPile2(function (cardx) {
                                                        return cardx.name == card.name && !cards2.contains(cardx);
                                                    });
                                                    if (card2) cards2.push(card2);
                                                    else break;
                                                }
                                            }
                                            game.delayx();
                                            if (cards2.length) player.gain(cards2, 'gain2');
                                            player.loseToDiscardpile(cards);
                                        }
                                        player.removeSkill('twfengji_mahou');
                                        player.removeSkill('twfengji_mark');
                                    }
                                    else {
                                        game.log(player, '的“蜂集”魔法剩余', '#g' + (list[1]) + '回合');
                                        player.markSkill('twfengji_mahou');
                                        player.unmarkSkill('twfengji_mark');
                                        player.storage.twfengji_mark = [];
                                        player.markSkill('twfengji_mark', '', '蜂集' + player.storage.twfengji_mahou[0] + ' - ' + player.storage.twfengji_mahou[1])
                                    }
                                },
                                ai: {
                                    threaten: 2.5,
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.twharvestinori = {
                        audio: 2,
                        mahouSkill: true,
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return !player.hasSkill('twharvestinori_mahou') && player.countCards('h', lib.skill.twharvestinori.filterCard) > 0;
                        },
                        filterCard: {
                            color: "black",
                        },
                        check: function (card) {
                            return 8 - get.value(card);
                        },
                        content: function () {
                            'step 0'
                            player.chooseControl('1回合', '2回合', '3回合').set('prompt', '请选择施法时长').set('ai', function () {
                                var player = _status.event.player;
                                var safe = player.hp;
                                if (safe < Math.min(3, game.countPlayer())) {
                                    var next = player.next;
                                    while (next != player && get.attitude(next, player) > 0) {
                                        safe++;
                                        next = next.next;
                                    }
                                }
                                return Math.max(1, Math.min(safe, 3, game.countPlayer())) - 1;
                            });
                            'step 1'
                            player.storage.twharvestinori_mahou = [result.index + 1, result.index + 1];
                            player.addTempSkill('twharvestinori_mahou', { player: 'die' });
                            player.addTempSkill('twharvestinori_mark', { player: 'die' });
                            player.storage.twharvestinori_mark = [];
                            player.markSkill('twharvestinori_mark', '', '丰祈' + player.storage.twharvestinori_mahou[0] * 2 + ' - ' + player.storage.twharvestinori_mahou[1])
                        },
                        ai: {
                            order: 8,
                            result: {
                                player: 1,
                            },
                        },
                        subSkill: {
                            mark: {
                                intro: {
                                    name: "施法：丰祈",
                                    content: function (s, p) {
                                        var str = '施法：丰祈-剩余回合：'
                                        str += p.storage.twharvestinori_mahou[1];
                                        str += '<br>施法：丰祈-摸牌数：'
                                        str += p.storage.twharvestinori_mahou[0] * 2;
                                        return str;
                                    },
                                }, sub: true,
                            },
                            mahou: {
                                trigger: {
                                    global: "phaseEnd",
                                },
                                forced: true,
                                popup: false,
                                charlotte: true,
                                content: function () {
                                    var list = player.storage.twharvestinori_mahou;
                                    list[1]--;
                                    if (list[1] == 0) {
                                        game.log(player, '的“丰祈”魔法生效');
                                        player.logSkill('twharvestinori');
                                        var num = list[0] * 2;
                                        player.draw(num);
                                        player.removeSkill('twharvestinori_mahou');
                                        player.removeSkill('twharvestinori_mark');
                                    }
                                    else {
                                        game.log(player, '的“丰祈”魔法剩余', '#g' + (list[1]) + '回合');
                                        player.markSkill('twharvestinori_mahou');
                                        player.unmarkSkill('twharvestinori_mark');
                                        player.storage.twharvestinori_mark = [];
                                        player.markSkill('twharvestinori_mark', '', '丰祈' + player.storage.twharvestinori_mahou[0] * 2 + ' - ' + player.storage.twharvestinori_mahou[1])
                                    }
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.twzhouhu = {
                        audio: 2,
                        mahouSkill: true,
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return !player.hasSkill('twzhouhu_mahou') && player.countCards('h', lib.skill.twzhouhu.filterCard) > 0;
                        },
                        filterCard: {
                            color: "red",
                        },
                        check: function (card) {
                            if (_status.event.player.isHealthy()) return 0;
                            return 7 - get.value(card);
                        },
                        content: function () {
                            'step 0'
                            player.chooseControl('1回合', '2回合', '3回合').set('prompt', '请选择施法时长').set('ai', function () {
                                var player = _status.event.player;
                                var safe = 1;
                                if (safe < Math.min(3, game.countPlayer(), player.getDamagedHp())) {
                                    var next = player.next;
                                    while (next != player && get.attitude(next, player) > 0) {
                                        safe++;
                                        next = next.next;
                                    }
                                }
                                return Math.max(1, Math.min(safe, 3, game.countPlayer(), player.getDamagedHp())) - 1;
                            });
                            'step 1'
                            player.storage.twzhouhu_mahou = [result.index + 1, result.index + 1];
                            player.addTempSkill('twzhouhu_mahou', { player: 'die' });
                            player.addTempSkill('twzhouhu_mark', { player: 'die' });
                            player.storage.twzhouhu_mark = [];
                            player.markSkill('twzhouhu_mark', '', '咒护' + player.storage.twzhouhu_mahou[0] + ' - ' + player.storage.twzhouhu_mahou[1]);
                        },
                        ai: {
                            order: 2,
                            result: {
                                player: 1,
                            },
                        },
                        subSkill: {
                            mark: {
                                intro: {
                                    name: "施法：咒护",
                                    content: function (s, p) {
                                        var str = '施法：咒护-剩余回合：'
                                        str += p.storage.twzhouhu_mahou[1];
                                        str += '<br>施法：咒护-回复体力数：'
                                        str += p.storage.twzhouhu_mahou[0];
                                        return str;
                                    },
                                }, sub: true,
                            },
                            mahou: {
                                trigger: {
                                    global: "phaseEnd",
                                },
                                forced: true,
                                popup: false,
                                charlotte: true,
                                content: function () {
                                    var list = player.storage.twzhouhu_mahou;
                                    list[1]--;
                                    if (list[1] == 0) {
                                        game.log(player, '的“咒护”魔法生效');
                                        player.logSkill('twzhouhu');
                                        var num = list[0];
                                        player.recover(num);
                                        player.removeSkill('twzhouhu_mahou');
                                        player.removeSkill('twzhouhu_mark');
                                    }
                                    else {
                                        game.log(player, '的“咒护”魔法剩余', '#g' + (list[1]) + '回合');
                                        player.markSkill('twzhouhu_mahou');
                                        player.unmarkSkill('twzhouhu_mark');
                                        player.storage.twzhouhu_mark = [];
                                        player.markSkill('twzhouhu_mark', '', '咒护' + player.storage.twzhouhu_mahou[0] + ' - ' + player.storage.twzhouhu_mahou[1])
                                    }
                                },
                                sub: true,
                            },
                        },
                    }
                    //咒护
                    lib.skill.twzuhuo = {
                        audio: 2,
                        mahouSkill: true,
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return !player.hasSkill('twzuhuo_mahou') && player.countCards('he', lib.skill.twzuhuo.filterCard) > 0;
                        },
                        filterCard: function (card) {
                            return get.type(card) != 'basic';
                        },
                        position: "he",
                        check: function (card) {
                            return 7 - get.value(card);
                        },
                        content: function () {
                            'step 0'
                            player.chooseControl('1回合', '2回合', '3回合').set('prompt', '请选择施法时长').set('ai', function () {
                                var player = _status.event.player;
                                var safe = Math.min(player.getHandcardLimit(), player.countCards('h', 'shan'));
                                if (safe < Math.min(3, game.countPlayer())) {
                                    var next = player.next;
                                    while (next != player && get.attitude(next, player) > 0) {
                                        safe++;
                                        next = next.next;
                                    }
                                }
                                return Math.max(2, Math.min(safe, 3, game.countPlayer())) - 1;
                            });
                            'step 1'
                            player.storage.twzuhuo_mahou = [result.index + 1, result.index + 1];
                            player.addTempSkill('twzuhuo_mahou', { player: 'die' });
                            player.addTempSkill('twzuhuo_mark', { player: 'die' });
                            player.storage.twzuhuo_mark = [];
                            player.markSkill('twzuhuo_mark', '', '阻祸' + player.storage.twzuhuo_mahou[0] + ' - ' + player.storage.twzuhuo_mahou[1]);
                        },
                        ai: {
                            order: 2,
                            result: {
                                player: 1,
                            },
                        },
                        subSkill: {
                            mark: {
                                intro: {
                                    name: "施法：阻祸",
                                    content: function (s, p) {
                                        var str = '施法：阻祸-剩余回合：'
                                        str += p.storage.twzuhuo_mahou[1];
                                        str += '<br>施法：阻祸-可抵消次数：'
                                        str += p.storage.twzuhuo_mahou[0];
                                        return str;
                                    },
                                }, sub: true,
                            },
                            mahou: {
                                trigger: {
                                    global: "phaseEnd",
                                },
                                forced: true,
                                popup: false,
                                charlotte: true,
                                content: function () {
                                    var list = player.storage.twzuhuo_mahou;
                                    list[1]--;
                                    if (list[1] == 0) {
                                        game.log(player, '的“阻祸”魔法生效');
                                        player.logSkill('twzuhuo');
                                        var num = list[0];
                                        player.addSkill('twzuhuo_effect');
                                        player.addMark('twzuhuo_effect', num, false);
                                        player.removeSkill('twzuhuo_mahou');
                                        player.removeSkill('twzuhuo_mark');
                                    }
                                    else {
                                        game.log(player, '的“阻祸”魔法剩余', '#g' + (list[1]) + '回合');
                                        player.markSkill('twzuhuo_mahou');
                                        player.unmarkSkill('twzuhuo_mark');
                                        player.storage.twzuhuo_mark = [];
                                        player.markSkill('twzuhuo_mark', '', '阻祸' + player.storage.twzuhuo_mahou[0] + ' - ' + player.storage.twzuhuo_mahou[1])
                                    }
                                },
                                sub: true,
                            },
                            effect: {
                                charlotte: true,
                                onremove: true,
                                trigger: {
                                    player: "damageBegin2",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.hasMark('twzuhuo_effect');
                                },
                                content: function () {
                                    trigger.cancel();
                                    player.removeMark('twzuhuo_effect', 1, false);
                                    if (!player.countMark('twzuhuo_effect')) player.removeSkill('twzuhuo_effect');
                                },
                                marktext: "阻祸︎",
                                intro: {
                                    onremove: true,
                                    content: "防止接下来的#次伤害",
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.rezaiqi = {
                        count: function () {
                            var num = 0;
                            game.countPlayer2(function (current) {
                                current.getHistory('lose', function (evt) {
                                    if (evt.position == ui.discardPile) {
                                        for (var i = 0; i < evt.cards.length; i++) {
                                            if (get.color(evt.cards[i]) == 'red') num++;
                                        }
                                    }
                                })
                            });
                            game.getGlobalHistory('cardMove', function (evt) {
                                if (evt.name == 'cardsDiscard') {
                                    for (var i = 0; i < evt.cards.length; i++) {
                                        if (get.color(evt.cards[i]) == 'red') num++;
                                    }
                                }
                            })
                            return num;
                        },
                        audio: 2,
                        direct: true,
                        filter: function (event, player) {
                            return lib.skill.rezaiqi.count() > 0;
                        },
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget([1, lib.skill.rezaiqi.count()], get.prompt2('rezaiqi')).ai = function (target) {
                                return get.attitude(_status.event.player, target);
                            };
                            player.unmarkSkill('rezaiqizheng');
                            delete player.storage.rezaiqizheng;
                            'step 1'
                            if (result.bool) {
                                var targets = result.targets;
                                targets.sortBySeat();
                                player.line(targets, 'fire');
                                player.logSkill('rezaiqi', targets);
                                event.targets = targets;
                            }
                            else event.finish();
                            'step 2'
                            event.current = targets.shift();
                            if (player.isHealthy()) event._result = { index: 0 };
                            else event.current.chooseControl().set('choiceList', [
                                '摸一张牌',
                                '令' + get.translation(player) + '回复一点体力',
                            ]).set('ai', function () {
                                if (get.attitude(event.current, player) > 0) return 1;
                                return 0;
                            });
                            'step 3'
                            if (result.index == 1) {
                                event.current.line(player);
                                player.recover();
                            }
                            else event.current.draw();
                            game.delay();
                            if (targets.length) event.goto(2);
                        },
                        group: "rezaiqizheng",
                    }
                    lib.skill.rezaiqizheng = {
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter"],
                        },
                        marktext: "再起",
                        intro: { name: '再起' },
                        forced: true,
                        filter: function (event, player) {
                            if (player != _status.currentPhase) return false;
                            if (event.name == 'lose' && event.position != ui.discardPile) return false;
                            var num = event.cards.length;
                            for (var i = 0; i < event.cards.length; i++) {
                                var card = event.cards[i];
                                if (get.color(card) == 'red') player.addMark('rezaiqizheng')
                            }
                        },
                        content: function () { },
                    }
                    //晋张春华
                    lib.skill.xuanmu2 = {
                        trigger: {
                            player: "damageBegin4",
                        },
                        forced: true,
                        marktext: "宣穆",
                        mark: true,
                        intro: {
                            name: "宣穆",
                            content: '免疫伤害',
                        },
                        popup: false,
                        content: function () {
                            trigger.cancel();
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage') && !player.hasSkillTag('jueqing', false, target)) return 'zerotarget';
                                },
                            },
                        },
                    }
                    lib.skill.xinbenxi = {
                        group: ["xinbenxi_summer", "xinbenxi_damage"],
                        audio: 2,
                        trigger: {
                            player: "useCard2",
                        },
                        forced: true,
                        mod: {
                            globalFrom: function (from, to, distance) {
                                if (_status.currentPhase == from) {
                                    return distance - from.storage.xinbenxi;
                                }
                            },
                            wuxieRespondable: function (card, player, target, current) {
                                if (player != current && player.storage.xinbenxi_directHit.contains(card)) {
                                    return false;
                                }
                            },
                        },
                        init: function (player) {
                            player.storage.xinbenxi_directHit = [];
                            player.storage.xinbenxi_damage = [];
                            player.storage.xinbenxi_unequip = [];
                            player.storage.xinbenxi = 0;
                        },
                        filter: function (trigger, player) {
                            return _status.currentPhase == player && trigger.targets && trigger.targets.length == 1 && (get.name(trigger.card) == 'sha' || get.type(trigger.card) == 'trick') && !game.hasPlayer(function (current) {
                                return get.distance(player, current) > 1;
                            });
                        },
                        filterx: function (event, player) {
                            var info = get.info(event.card);
                            if (info.allowMultiple == false) return false;
                            if (event.targets && !info.multitarget) {
                                if (game.hasPlayer(function (current) {
                                    return lib.filter.targetEnabled2(event.card, player, current) && !event.targets.contains(current);
                                })) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        content: function () {
                            "step 0";
                            event.videoId = lib.status.videoId++;
                            var func = function (card, id, bool) {
                                var list = ['为XXX多指定一个目标', '令XXX无视防具', '令XXX不可被抵消', '当XXX造成伤害时摸一张牌'];
                                var choiceList = ui.create.dialog('【奔袭】：请选择一至两项', 'forcebutton');
                                choiceList.videoId = id;
                                for (var i = 0; i < list.length; i++) {
                                    list[i] = list[i].replace(/XXX/g, card);
                                    var str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">';
                                    if (i == 0 && !bool) str += '<div style="opacity:0.5">';
                                    str += list[i];
                                    if (i == 0 && !bool) str += '</div>';
                                    str += '</div>';
                                    var next = choiceList.add(str);
                                    next.firstChild.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                    next.firstChild.link = i;
                                    for (var j in lib.element.button) {
                                        next[j] = lib.element.button[j];
                                    }
                                    choiceList.buttons.add(next.firstChild);
                                }
                                return choiceList;
                            };
                            if (player.isOnline2()) {
                                player.send(func, get.translation(trigger.card), event.videoId, lib.skill.xinbenxi.filterx(trigger, player));
                            }
                            event.dialog = func(get.translation(trigger.card), event.videoId, lib.skill.xinbenxi.filterx(trigger, player));
                            if (player != game.me || _status.auto) {
                                event.dialog.style.display = 'none';
                            }
                            var next = player.chooseButton();
                            next.set('dialog', event.videoId);
                            next.set('forced', true);
                            next.set('selectButton', [1, 2]);
                            next.set('filterButton',
                                function (button) {
                                    if (button.link == 0) {
                                        return _status.event.bool1;
                                    }
                                    ;
                                    return true;
                                });
                            next.set('bool1', lib.skill.xinbenxi.filterx(trigger, player));
                            next.set('ai',
                                function (button) {
                                    var player = _status.event.player;
                                    var event = _status.event.getTrigger();
                                    switch (button.link) {
                                        case 0: {
                                            if (game.hasPlayer(function (current) {
                                                return lib.filter.targetEnabled2(event.card, player, current) && !event.targets.contains(current) && get.effect(current, event.card, player, player) > 0;
                                            })) return 1.6 + Math.random();
                                            return 0;
                                        }
                                        case 1: {
                                            if (event.targets.filter(function (current) {
                                                var eff1 = get.effect(current, event.card, player, player);
                                                player._xinbenxi_ai = true;
                                                var eff2 = get.effect(current, event.card, player, player);
                                                delete player._xinbenxi_ai;
                                                return eff1 > eff2;
                                            }).length) return 1.9 + Math.random();
                                            return Math.random();
                                        }
                                        case 2: {
                                            var num = 1.3;
                                            if (event.card.name == 'sha' && event.targets.filter(function (current) {
                                                if (current.mayHaveShan() && get.attitude(player, current) <= 0) {
                                                    if (current.hasSkillTag('useShan')) num = 1.9;
                                                    return true;
                                                }
                                                return false;
                                            }).length) return num + Math.random();
                                            return 0.5 + Math.random();
                                        }
                                        case 3: {
                                            return (get.tag(event.card, 'damage') || 0) + Math.random();
                                        }
                                    }
                                });
                            "step 1";
                            if (player.isOnline2()) {
                                player.send('closeDialog', event.videoId);
                            }
                            event.dialog.close();
                            var map = [function (trigger, player, event) {
                                player.chooseTarget('请选择' + get.translation(trigger.card) + '的额外目标', true,
                                    function (card, player, target) {
                                        var player = _status.event.player;
                                        if (_status.event.targets.contains(target)) return false;
                                        return lib.filter.targetEnabled2(_status.event.card, player, target);
                                    }).set('targets', trigger.targets).set('card', trigger.card).set('ai',
                                        function (target) {
                                            var trigger = _status.event.getTrigger();
                                            var player = _status.event.player;
                                            return get.effect(target, trigger.card, player, player);
                                        });
                            },
                            function (trigger, player, event) {
                                player.storage.xinbenxi_unequip.add(trigger.card);
                            },
                            function (trigger, player, event) {
                                player.storage.xinbenxi_directHit.add(trigger.card);
                                trigger.nowuxie = true;
                                trigger.customArgs.default.directHit2 = true;
                            },
                            function (trigger, player, event) {
                                player.storage.xinbenxi_damage.add(trigger.card);
                            }];
                            for (var i = 0; i < result.links.length; i++) {
                                game.log(player, '选择了', '#g【奔袭】', '的', '#y选项' + get.cnNumber(result.links[i] + 1, true));
                                map[result.links[i]](trigger, player, event);
                            }
                            if (!result.links.contains(0)) event.finish();
                            "step 2";
                            if (result.targets) {
                                player.line(result.targets);
                                trigger.targets.addArray(result.targets);
                            }
                        },
                        ai: {
                            unequip: true,
                            "unequip_ai": true,
                            "directHit_ai": true,
                            skillTagFilter: function (player, tag, arg) {
                                if (tag == 'unequip') {
                                    if (arg && player.storage.xinbenxi_unequip.contains(arg.card)) return true;
                                    return false;
                                }
                                if (_status.currentPhase != player || game.hasPlayer(function (current) {
                                    return get.distance(player, current) > 1;
                                })) return false;
                                if (tag == 'directHit_ai') return arg.card.name == 'sha';
                                if (arg.card.name != 'sha' && arg.card.name != 'chuqibuyi') return false;
                                var card = arg.target.getEquip(2);
                                if (card && card.name.indexOf('bagua') != -1) return true;
                                if (player._xinbenxi_ai) return false;
                            },
                        },
                        subSkill: {
                            mark: { intro: {}, sub: true, }, mark2: { mark: true, marktext: "奔袭 生效", intro: {}, sub: true, },
                            damage: {
                                sub: true,
                                trigger: {
                                    global: "damageBegin1",
                                },
                                audio: 2,
                                forced: true,
                                filter: function (event, player) {
                                    return event.card && player.storage.xinbenxi_damage.contains(event.card);
                                },
                                content: function () { player.draw() },
                            },
                            summer: {
                                sub: true,
                                trigger: {
                                    player: ["phaseAfter", "useCardAfter", "useCard"],
                                },
                                silent: true,
                                filter: function (event, player) {
                                    return player == _status.currentPhase;
                                },
                                content: function () {
                                    if (trigger.name == 'phase') {
                                        player.storage.xinbenxi = 0;
                                        return;
                                    }
                                    else if (event.triggername == 'useCard') {
                                        player.logSkill('xinbenxi');
                                        player.storage.xinbenxi++;
                                        player.syncStorage('xinbenxi');

                                        return;
                                    }
                                    else {
                                        player.storage.xinbenxi_unequip.remove(event.card);
                                        player.storage.xinbenxi_directHit.remove(event.card);
                                        player.storage.xinbenxi_damage.remove(event.card);
                                        // player.unmarkSkill('xinbenxi_mark')
                                    }
                                    if (game.hasPlayer(function (current) { return get.distance(player, current) > 1; })) {
                                        var cc = player.storage.xinbenxi;
                                        player.storage.xinbenxi_mark = '';
                                        player.addTempSkill("xinbenxi_mark");
                                        player.addMark('xinbenxi_mark', cc);
                                    } else {
                                        player.unmarkSkill('xinbenxi_mark');
                                        player.addTempSkill("xinbenxi_mark2");
                                    }
                                },
                                forced: true,
                                popup: false,
                            },
                        },
                    }
                    lib.skill.xibing2 = {
                        mark: true,
                        marktext: "息兵",
                        intro: { name: '息兵', },
                        mod: {
                            cardEnabled2: function (card) {
                                if (get.position(card) == 'h') return false;
                            },
                        },
                    },
                        lib.skill.caozhao = {
                            audio: 2,
                            enable: "phaseUse",
                            usable: 1,
                            filter: function (event, player) {
                                if (player.countCards('h') == 0 || !game.hasPlayer(function (current) {
                                    return current != player && current.hp <= player.hp;
                                })) return false;
                                var list = player.getStorage('caozhao');
                                for (var i of lib.inpile) {
                                    if (!list.contains(i) && ['basic', 'trick'].contains(get.type(i))) return true;
                                }
                                return false;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    var list = player.getStorage('caozhao'), vcards = [];
                                    for (var i of lib.inpile) {
                                        if (!list.contains(i)) {
                                            var type = get.type(i);
                                            if (type == 'basic' || type == 'trick') vcards.push([type, '', i]);
                                        }
                                    }
                                    return ui.create.dialog('草诏', [vcards, 'vcard']);
                                },
                                check: function (button) {
                                    return _status.event.player.getUseValue({ name: button.link[2], isCard: true }, null, true);
                                },
                                backup: function (links, player) {
                                    return {
                                        audio: 'caozhao',
                                        cardname: links[0][2],
                                        filterCard: true,
                                        position: 'h',
                                        check: function (card) {
                                            return player.getUseValue({ name: lib.skill.caozhao_backup.cardname }) - ((player.getUseValue(card, null, true) + 0.1) / (get.value(card) / 6));
                                        },
                                        filterTarget: function (card, player, target) {
                                            return target != player && target.hp <= player.hp;
                                        },
                                        discard: false,
                                        lose: false,
                                        content: function () {
                                            'step 0'
                                            player.showCards(cards, get.translation(player) + '发动【草诏】，声明' + get.translation(lib.skill.caozhao_backup.cardname));
                                            if (!player.storage.caozhao) player.storage.caozhao = [];
                                            player.storage.caozhao.push(lib.skill.caozhao_backup.cardname);
                                            player.addSkill("caozhao_mark");
                                            player.addMark("caozhao_mark");
                                            'step 1'
                                            target.chooseControl().set('choiceList', [
                                                '令' + get.translation(player) + '将' + get.translation(cards[0]) + '的牌名改为' + get.translation(lib.skill.caozhao_backup.cardname),
                                                '失去1点体力',
                                            ]).set('ai', function (event, player) {
                                                var target = _status.event.getParent().player;
                                                if (get.attitude(player, target) > 0) return 0;
                                                if (player.hp > 3 || (player.hp > 1 && player.hasSkill('zhaxiang'))) return 1;
                                                if (player.hp > 2) return Math.random() > 0.5 ? 0 : 1;
                                                return 0;
                                            });
                                            'step 2'
                                            if (result.index == 1) {
                                                target.addExpose(0.2);
                                                target.loseHp();
                                                event.finish();
                                            }
                                            else {
                                                player.chooseTarget('是否将' + get.translation(lib.skill.caozhao_backup.cardname) + '（' + get.translation(cards[0]) + '）交给一名其他角色？', lib.filter.notMe).set('ai', () => -1);
                                            }
                                            'step 3'
                                            if (result.bool) {
                                                var target = result.targets[0];
                                                player.line(target, 'green');
                                                if (!target.storage.caozhao_info) target.storage.caozhao_info = {};
                                                target.storage.caozhao_info[cards[0].cardid] = lib.skill.caozhao_backup.cardname;
                                                target.addSkill('caozhao_info');
                                                target.gain(cards, player, 'give').gaintag.add('caozhao');
                                            }
                                            else {
                                                if (!player.storage.caozhao_info) player.storage.caozhao_info = {};
                                                player.storage.caozhao_info[cards[0].cardid] = lib.skill.caozhao_backup.cardname;
                                                player.addGaintag(cards, 'caozhao');
                                                player.addSkill('caozhao_info');
                                            }
                                        },
                                        ai: {
                                            result: {
                                                player: 2,
                                                target: 0.1,
                                            },
                                        },
                                    }
                                },
                                prompt: function (links, player) {
                                    return '将一张手牌声明为' + get.translation(links[0][2]);
                                },
                            },
                            ai: {
                                order: 1,
                                result: {
                                    player: 1,
                                },
                            },
                            subSkill: {
                                mark: {
                                    intro: {
                                        content: function (s, p) {
                                            var str = '已使用牌名：'
                                            str += get.translation(p.storage.caozhao);
                                            return str;
                                        },
                                    }, sub: true,
                                },
                            },
                        }
                    lib.skill.olxibing = {
                        audio: 2,
                        trigger: {
                            player: "damageEnd",
                            source: "damageSource",
                        },
                        filter: function (event, player) {
                            return event.player && event.source && event.player != event.source &&
                                event.player.isAlive() && event.source.isAlive() &&
                                (event.player.countCards('he') > 0 || event.source.countCards('he') > 0);
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            var target = (player == trigger.player ? trigger.source : trigger.player);
                            event.target = target;
                            player.chooseTarget(get.prompt('olxibing'), '弃置自己或' + get.translation(target) + '的两张牌，然后手牌数较少的角色摸两张牌且不能对你使用牌直到回合结束', function (card, player, target) {
                                if (target != player && target != _status.event.target) return false;
                                return target.countCards('he') > 0;
                            }).set('target', target).set('ai', function (targetx) {
                                var player = _status.event.player, target = _status.event.target;
                                if (target == targetx) {
                                    if (get.attitude(player, target) > 0) return 0;
                                    var cards = target.getCards('he', function (card) {
                                        return lib.filter.canBeDiscarded(card, player, target);
                                    }).sort(function (a, b) {
                                        return get.buttonValue(b) - get.buttonValue(a);
                                    });
                                    if ((target.countCards('h') - player.countCards('h')) >= Math.max(0, Math.min(2, cards.length) - target.countCards('e', function (card) {
                                        var index = cards.indexOf(card);
                                        return index != -1 && index < 2;
                                    }))) return 1;
                                    return 0;
                                }
                                var cards = player.getCards('he', function (card) {
                                    return lib.filter.cardDiscardable(card, player, 'olxibing')
                                }).sort(function (a, b) {
                                    return get.useful(a) - get.useful(b);
                                });
                                if (player.countCards('h') - target.countCards('h') < Math.max(0, Math.min(cards.length, 2) - player.countCards('e', function (card) {
                                    var index = cards.indexOf(card);
                                    return index != -1 && index < 2;
                                })) && (cards.length < 2 || get.value(cards[1]) < 5.5)) return 0.8;
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('olxibing', target);
                                var target = result.targets[0];
                                if (target == player) player.chooseToDiscard('he', 2, true);
                                else player.discardPlayerCard(target, 'he', true, 2);
                            }
                            else event.finish();
                            'step 2'
                            if (player.isIn() && target.isIn()) {
                                var hs = player.countCards('h'), ts = target.countCards('h');
                                if (hs != ts) {
                                    var drawer = hs > ts ? target : player;
                                    drawer.draw(2);
                                    drawer.addTempSkill('olxibing_mark');
                                    player.addTempSkill('olxibing2');
                                    player.markAuto('olxibing2', [drawer]);
                                }
                            }
                        },
                        subSkill: { mark: { mark: true, intro: {}, sub: true, }, },
                    }
                    lib.skill.spdiancai = {
                        audio: 2,
                        trigger: {
                            global: "phaseJieshuBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player != event.player && player.hasHistory('lose', function (evt) {
                                return evt.hs && evt.hs.length > 0;
                            });
                        },
                        content: function () {
                            'step 0'
                            var num = 0;
                            player.getHistory('lose', function (evt) {
                                if (evt.hs) num += evt.hs.length;
                            });
                            num = Math.min(num, game.countPlayer());
                            player.chooseTarget(get.prompt('spdiancai'), [1, num], '令至多' + get.cnNumber(num) + '名角色各摸一张牌').set('ai', function (target) {
                                return get.attitude(_status.event.player, target);
                            });
                            player.unmarkSkill('spdiancai_kk');
                            delete player.storage.spdiancai_kk;
                            'step 1'
                            if (result.bool) {
                                var targets = result.targets.sortBySeat(trigger.player);
                                player.logSkill('spdiancai', targets);
                                if (targets.length == 1) {
                                    targets[0].draw();
                                    event.finish();
                                }
                                else game.asyncDraw(targets);
                            }
                            else event.finish();
                            'step 2'
                            game.delayx();

                        },
                        group: "spdiancai_kk",
                        subSkill: {
                            kk: {
                                intro: { content: '回合结束可以选择#名角色摸一张牌' },
                                trigger: {
                                    player: "loseBegin",
                                },
                                forced: true,
                                priority: 10,
                                silent: true,
                                filter: function (event, player) {
                                    if (player != _status.currentPhase) return true; return false;
                                },
                                content: function () {
                                    var xx = trigger.cards.length;
                                    player.addMark('spdiancai_kk', xx);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.zlshoufu = {
                        enable: "phaseUse",
                        usable: 1,
                        delay: false,
                        content: function () {
                            'step 0'
                            player.draw();
                            'step 1'
                            var filterTarget = function (card, player, target) {
                                return target != player && !target.hasSkill('zlshoufu2');
                            };
                            if (!player.countCards('h') || !game.hasPlayer(function (current) {
                                return filterTarget(null, player, current);
                            })) event.finish();
                            else player.chooseCardTarget({
                                forced: true,
                                prompt: '将一张手牌作为“箓”置于其他角色的武将牌上',
                                filterTarget: filterTarget,
                                filterCard: true,
                                position: 'h',
                                ai1: function (card) {
                                    if (get.type(card, false) == 'equip') return 1 - get.value(card);
                                    return 7 - get.value(card);
                                },
                                ai2: function (target) {
                                    var player = _status.event.player;
                                    var att = get.attitude(player, target);
                                    if (att > 0) return -att;
                                    return -att / get.distance(player, target, 'absolute');
                                },
                            });
                            'step 2'
                            var target = result.targets[0];
                            var cards = result.cards;
                            target.addToExpansion(cards, player, 'give').gaintag.add('zlshoufu2');
                            var str = '';
                            if (get.type2(result.cards[0]) == 'trick') str = '锦囊牌';
                            else if (get.type2(result.cards[0]) == 'basic') str = '基本牌';
                            else str = '装备牌';
                            target.markSkill('zlshoufu2', '', '授符 ' + str)
                            player.line(target, 'green');
                            target.addSkill('zlshoufu2');
                            'step 3'
                            game.delayx();
                        },
                        ai: {
                            notemp: true,
                            order: 1,
                            result: {
                                player: function (player) {
                                    if (game.hasPlayer(function (target) {
                                        return target != player && !target.hasSkill('zlshoufu2') && get.attitude(player, target) < 0;
                                    }) || !game.hasPlayer(function (target) {
                                        return target != player && !target.hasSkill('zlshoufu2') && get.attitude(player, target) > 0;
                                    })) return 1;
                                    return 0;
                                },
                            },
                        },
                    }
                    lib.skill.xinquanbian = {
                        audio: "quanbian",
                        preHidden: true,
                        trigger: {
                            player: ["useCard", "respond"],
                        },
                        filter: function (event, player) {
                            var phase = event.getParent('phaseUse');
                            if (!phase || phase.player != player) return false;
                            var suit = get.suit(event.card);
                            if (!lib.suit.contains(suit) || !lib.skill.quanbian.hasHand(event)) return false;
                            return player.getHistory('useCard', function (evt) {
                                return evt != event && get.suit(evt.card) == suit && lib.skill.quanbian.hasHand(evt) && evt.getParent('phaseUse') == phase;
                            }).length + player.getHistory('respond', function (evt) {
                                return evt != event && get.suit(evt.card) == suit && lib.skill.quanbian.hasHand(evt) && evt.getParent('phaseUse') == phase;
                            }).length == 0;
                        },
                        content: function () {
                            'step 0'
                            var cc = get.suit(trigger.card);
                            if (!player.storage.xinquanbian2) player.storage.xinquanbian2 = [];
                            player.storage.xinquanbian2.add(cc);
                            var str = '';
                            if (player.storage.xinquanbian2.contains('heart')) str += '♥️️';
                            if (player.storage.xinquanbian2.contains('diamond')) str += '♦️️';
                            if (player.storage.xinquanbian2.contains('spade')) str += '♠️️';
                            if (player.storage.xinquanbian2.contains('club')) str += '♣️️';
                            player.addTempSkill("xinquanbian_mark");
                            player.storage.xinquanbian_mark = '';
                            player.addMark("xinquanbian_mark", str);
                            var cards = get.cards(Math.min(5, player.maxHp));
                            game.cardsGotoOrdering(cards);
                            var suit = get.suit(trigger.card);
                            var next = player.chooseToMove('权变：获得一张不为' + get.translation(suit) + '花色的牌并排列其他牌');
                            next.set('suit', suit);
                            next.set('list', [
                                ['牌堆顶', cards],
                                ['获得'],
                            ])
                            next.set('filterMove', function (from, to, moved) {
                                var suit = _status.event.suit;
                                if (moved[0].contains(from.link)) {
                                    if (typeof to == 'number') {
                                        if (to == 1) {
                                            if (moved[1].length) return false;
                                            return get.suit(from.link, false) != suit;
                                        }
                                        return true;
                                    }
                                    if (moved[1].contains(to.link)) return get.suit(from.link, false) != suit;
                                    return true;
                                }
                                else {
                                    if (typeof to == 'number') return true;
                                    return get.suit(to.link, false) != suit;
                                }
                            });
                            next.set('processAI', function (list) {
                                var cards = list[0][1].slice(0).sort(function (a, b) {
                                    return get.value(b) - get.value(a);
                                }), gains = [];
                                for (var i of cards) {
                                    if (get.suit(i, false) != _status.event.suit) {
                                        cards.remove(i);
                                        gains.push(i);
                                        break;
                                    }
                                }
                                return [cards, gains];
                            });

                            'step 1'
                            if (result.bool) {
                                var list = result.moved;
                                if (list[1].length) player.gain(list[1], 'gain2');
                                while (list[0].length) {
                                    ui.cardPile.insertBefore(list[0].pop(), ui.cardPile.firstChild);
                                }
                                game.updateRoundNumber();
                            }
                        },
                        group: ["xinquanbian_count", "xinquanbian_xg"],
                        subSkill: {
                            mark: {
                                intro: {}, onremove: function (player) {
                                    player.unmarkSkill('xinquanbian_mark');
                                    delete player.storage.xinquanbian2;
                                    delete player.storage.xinquanbian_mark;
                                }, sub: true,
                            },
                        },
                    }
                    lib.skill.xinquanbian_xg = {
                        trigger: { player: "phaseZhunbeiBegin", }, forced: true, audio: false, content: function () {
                            var cc = player.maxHp;
                            player.storage.xinquanbian_count_mark = '';
                            player.addTempSkill("xinquanbian_count_mark");
                            player.markSkill("xinquanbian_count_mark", '', '权变 ' + cc);
                        },
                    }
                    lib.skill.xinquanbian_count = {
                        trigger: { player: 'useCard1' },
                        silent: true,
                        firstDo: true,
                        filter: function (event, player) {
                            return player.isPhaseUsing() && lib.skill.quanbian.hasHand(event) && get.type(event.card) != 'equip';
                        },
                        content: function () {
                            var stat = player.getStat('skill');
                            if (!stat.quanbian) stat.quanbian = 0;
                            stat.quanbian++;
                            var cc = player.maxHp - stat.quanbian;
                            player.storage.xinquanbian_count_mark = '';
                            player.unmarkSkill("xinquanbian_count_mark");
                            player.addTempSkill("xinquanbian_count_mark");
                            player.markSkill("xinquanbian_count_mark", '', '权变 ' + cc);
                        },
                        mod: {
                            cardEnabled2: function (card, player) {
                                var stat = player.getStat('skill');
                                if (stat.quanbian && stat.quanbian >= player.maxHp && get.position(card) == 'h' && get.type(card, player) != 'equip') return false;
                            },
                        },
                        subSkill: { mark: { marktext: "权变", intro: { name: "权变" }, sub: true, }, },
                    },
                        lib.skill.gxlianhua = {
                            derivation: ["reyingzi", "reguanxing", "xinzhiyan", "gongxin"],
                            audio: 2,
                            init: function (player, skill) {
                                if (!player.storage[skill]) player.storage[skill] = {
                                    red: 0, black: 0,
                                }
                            },
                            marktext: "丹血",
                            intro: {
                                name: "丹血",
                                markcount: function (storage) {
                                    return storage.red + storage.black;
                                },
                                content: function (storage) {
                                    return '共有' + (storage.red + storage.black) + '个标记';
                                },
                            },
                            trigger: {
                                global: "damageEnd",
                            },
                            forced: true,
                            filter: function (event, player) {
                                return event.player != player && event.player.isAlive() && _status.currentPhase != player;
                            },
                            content: function () {
                                player.storage.gxlianhua[player.getFriends().contains(trigger.player) ? 'red' : 'black']++;
                                player.markSkill('gxlianhua');
                            },
                            group: "gxlianhua_harmonia",
                            subSkill: {
                                harmonia: {
                                    forced: true,
                                    audio: "gxlianhua",
                                    sub: true,
                                    trigger: {
                                        player: "phaseZhunbeiBegin",
                                    },
                                    content: function () {
                                        var cards = [];
                                        var cards2 = [];
                                        var skill = '';
                                        var red = player.storage.gxlianhua.red;
                                        var black = player.storage.gxlianhua.black;
                                        player.storage.gxlianhua = { red: 0, black: 0 };
                                        player.unmarkSkill('gxlianhua');
                                        if (red + black < 4) {
                                            cards = ['tao'];
                                            skill = 'reyingzi';
                                        }
                                        else if (red > black) {
                                            cards = ['wuzhong'];
                                            skill = 'reguanxing';
                                        }
                                        else if (red < black) {
                                            cards = ['shunshou'];
                                            skill = 'xinzhiyan';
                                        }
                                        else {
                                            cards = ['sha', 'juedou'];
                                            skill = 'gongxin';
                                        }
                                        for (var i = 0; i < cards.length; i++) {
                                            var card = get.cardPile(function (shiona) {
                                                return shiona.name == cards[i];
                                            });
                                            if (card) cards2.push(card);
                                        }
                                        player.addTempSkill(skill);
                                        if (cards2.length) player.gain(cards2, 'gain2', 'log');
                                    },
                                },
                            },
                        }


                    lib.skill.zhafu = {
                        audio: 2,
                        enable: "phaseUse",
                        limited: true,
                        skillAnimation: true,
                        animationColor: "wood",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            player.awakenSkill('zhafu');
                            target.addSkill('zhafu_hf');
                            target.storage.zhafu_hf = player;
                        },
                        subSkill: {
                            hf: {
                                trigger: {
                                    player: "phaseDiscardBegin",
                                },
                                forced: true,
                                popup: false,
                                charlotte: true,
                                mark: true,
                                marktext: "扎符",
                                intro: {},
                                onremove: true,
                                content: function () {
                                    'step 0'
                                    if (player.countCards('h') <= 1 || player.storage.zhafu_hf.isDead()) event.finish();
                                    'step 1'
                                    player.storage.zhafu_hf.logSkill('zhafu_hf', player);
                                    player.chooseCard('h', true, '选择保留一张手牌，将其余的手牌交给' + get.translation(player.storage.zhafu_hf)).ai = get.value;
                                    'step 2'
                                    var cards = player.getCards('h');
                                    cards.remove(result.cards[0]);
                                    player.storage.zhafu_hf.gain(cards, player, 'giveAuto');
                                    'step 3'
                                    player.removeSkill('zhafu_hf');
                                },
                                sub: true,
                            },
                        },
                        mark: true,
                        intro: {
                            content: "limited",
                        },
                        init: function (player, skill) {
                            player.storage[skill] = false;
                        },
                    }
                    lib.skill.yechou2 = {
                        mark: true,
                        marktext: "业仇",
                        intro: {
                            content: "每个回合结束时失去1点体力直到回合开始",
                        },
                        trigger: {
                            global: "phaseAfter",
                        },
                        forced: true,
                        content: function () { player.loseHp() },
                    }
                    lib.skill.huamu = {
                        audio: 2,
                        trigger: {
                            player: "useCardAfter",
                        },
                        filter: function (event, player) {
                            var color = get.color(event.card);
                            if (color == 'none') return false;
                            if (!player.hasHistory('lose', function (evt) {
                                return evt.hs.length > 0 && evt.getParent() == event;
                            }) || !event.cards.filterInD('oe').length) return false;
                            var history = game.getGlobalHistory('useCard');
                            var index = history.indexOf(event);
                            if (index < 1) return false;
                            var evt = history[index - 1], color2 = get.color(evt.card);
                            return color != color2 && color2 != 'none';
                        },
                        "prompt2": (event) => '将' + get.translation(event.cards.filterInD('oe')) + '置于武将牌上',
                        check: function (event, player) {
                            if (!game.hasPlayer(function (current) {
                                return current.hasSkill('qianmeng', null, null, false) && get.attitude(player, current) > 0;
                            })) return false;
                            var cards = event.cards.filterInD('e');
                            if (!cards.length) return true;
                            var card = cards[0];
                            if (get.owner(card) == player) {
                                if (get.value(card, player) <= 0) return true;
                                var subtype = get.subtype(card);
                                if (player.hasCard('hs', function (card) {
                                    return get.subtype(card) == subtype && player.canUse(card, player) && get.effect(player, card, player, player) > 0;
                                })) return true;
                            }
                            return false;
                        },
                        content: function () {
                            var cards = trigger.cards.filterInD('oe');
                            player.addToExpansion(cards, 'gain2').gaintag.add('huamu');
                        },
                        ai: {
                            reverseOrder: true,
                            combo: "qianmeng",
                        },
                        mod: {
                            aiOrder: function (player, card, num) {
                                if (typeof card == 'object') {
                                    var history = game.getGlobalHistory('useCard');
                                    if (!history.length) return;
                                    var evt = history[history.length - 1];
                                    if (evt && evt.card && get.color(evt.card) != 'none' && get.color(card) != 'none' && get.color(evt.card) != get.color(card)) {
                                        return num + 4;
                                    }
                                }
                            },
                        },
                        marktext: "\0",
                        intro: {
                            name: "灵杉&玉树",
                            markcount: function (storage, player) {
                                var red = [], black = [];
                                var cards = player.getExpansions('huamu');
                                for (var i of cards) {
                                    var color = get.color(i, false);
                                    (color == 'red' ? red : black).push(i);
                                }
                                return ('灵杉' + black.length + ' ' + '玉树' + red.length);
                            },
                            content: "expansion",
                            mark: function (dialog, storage, player) {
                                var red = [], black = [];
                                var cards = player.getExpansions('huamu');
                                for (var i of cards) {
                                    var color = get.color(i, false);
                                    (color == 'red' ? red : black).push(i);
                                }
                                if (black.length) {
                                    dialog.addText('灵杉(黑)');
                                    dialog.addSmall(black);
                                }
                                if (red.length) {
                                    dialog.addText('玉树(红)');
                                    dialog.addSmall(red);
                                }
                            },
                        },
                    }
                    lib.skill.biaozhao = {
                        audio: 2,
                        intro: {
                            content: "expansion",
                            markcount: "expansion",
                        },
                        onremove: function (player, skill) {
                            var cards = player.getExpansions(skill);
                            if (cards.length) player.loseToDiscardpile(cards);
                        },
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.countCards('he') > 0 && !player.getExpansions('biaozhao').length;
                        },
                        content: function () {
                            'step 0'
                            player.chooseCard('he', get.prompt('biaozhao'), '将一张牌置于武将牌上作为“表”').ai = function (card) {
                                return 6 - get.value(card);
                            }
                            'step 1'
                            if (result.bool) {
                                player.logSkill('biaozhao');
                                player.addToExpansion(result.cards, player, 'give').gaintag.add('biaozhao');
                                var cc = get.translation(get.suit(result.cards[0]));
                                var xx = get.strNumber(result.cards[0].number)
                                player.markSkill('biaozhao', '', '表召 ' + cc + xx)
                            }
                        },
                        ai: {
                            notemp: true,
                        },
                        group: ["biaozhao2", "biaozhao3"],
                    }


                    lib.skill.rebiaozhao = {
                        audio: "biaozhao",
                        intro: {
                            content: "expansion",
                            markcount: "expansion",
                        },
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.countCards('he') > 0 && !player.getExpansions('rebiaozhao').length;
                        },
                        content: function () {
                            'step 0'
                            player.chooseCard('he', get.prompt('rebiaozhao'), '将一张牌置于武将牌上作为“表”').ai = function (card) {
                                return 6 - get.value(card);
                            }
                            'step 1'
                            if (result.bool) {
                                player.logSkill('rebiaozhao');
                                player.addToExpansion(player, 'give', result.cards).gaintag.add('rebiaozhao');
                                var cc = get.translation(get.suit(result.cards[0]));
                                var xx = get.strNumber(result.cards[0].number)
                                player.markSkill('rebiaozhao', '', '表召 ' + cc + xx)
                            }
                        },
                        onremove: function (player, skill) {
                            var cards = player.getExpansions(skill);
                            if (cards.length) player.loseToDiscardpile(cards);
                        },
                        ai: {
                            notemp: true,
                        },
                        group: ["rebiaozhao2", "rebiaozhao3"],
                    }
                    lib.skill.liezhi = {
                        audio: 2,
                        group: "liezhi_damage",
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return !player.hasSkill('liezhi_disable');
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('liezhi'), '弃置至多两名其他角色区域内的各一张牌', [1, 2], function (card, player, target) {
                                return target != player && target.countDiscardableCards(player, 'hej') > 0;
                            }).ai = function (target) {
                                var player = _status.event.player;
                                return get.effect(target, { name: 'guohe' }, player, player);
                            };
                            'step 1'
                            if (result.bool) {
                                result.targets.sortBySeat();
                                event.targets = result.targets;
                                player.line(result.targets, 'green');
                                player.logSkill('liezhi', result.targets);
                            }
                            else event.finish();
                            'step 2'
                            event.current = targets.shift();
                            player.discardPlayerCard(event.current, 'hej', true)
                            if (targets.length) event.redo();
                        },
                        subSkill: {
                            disable: {
                                sub: true,
                                trigger: {
                                    player: "phaseAfter",
                                },
                                forced: true,
                                mark: true,
                                marktext: "烈直 失效",
                                intro: { name: '烈直' },
                                silent: true,
                                popup: false,
                                charlotte: true,
                                content: function () { player.removeSkill('liezhi_disable') },
                            },
                            damage: {
                                trigger: {
                                    player: "damage",
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                content: function () { player.addSkill('liezhi_disable') },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.juguan = {
                        audio: 2,
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return event.filterCard({
                                name: 'sha',
                            }, player, event) || event.filterCard({
                                name: 'juedou',
                            }, player, event);
                        },
                        chooseButton: {
                            dialog: function () {
                                return ui.create.dialog('拒关', [['sha', 'juedou'], 'vcard']);
                            },
                            filter: function (button, player) {
                                var evt = _status.event.getParent();
                                return evt.filterCard({
                                    name: button.link[2],
                                }, player, evt);
                            },
                            check: function (button) {
                                return _status.event.player.getUseValue({
                                    name: button.link[2],
                                }) * (button.link[2] == 'juedou' ? 3 : 1);
                            },
                            backup: function (links) {
                                return {
                                    audio: 'juguan',
                                    viewAs: { name: links[0][2] },
                                    filterCard: true,
                                    check: function (card) {
                                        return 6 - get.value(card);
                                    },
                                    position: 'h',
                                    onuse: function (result, player) {
                                        player.addTempSkill('juguan_effect');
                                    },
                                }
                            },
                            prompt: function (links) {
                                return '将一张手牌当做' + get.translation(links[0][2]) + '使用';
                            },
                        },
                        ai: {
                            order: function (item, player) {
                                return Math.max(get.order({ name: 'sha' }), get.order({ name: 'juedou' })) + 0.2;
                            },
                            result: {
                                player: 1,
                            },
                        },
                        subSkill: {
                            effect: {
                                trigger: {
                                    global: "damage",
                                },
                                forced: true,
                                charlotte: true,
                                firstDo: true,
                                silent: true,
                                popup: false,
                                filter: function (event, player) {
                                    var evt = event.getParent('useCard');
                                    return event.card && evt && event.card == evt.card && evt.skill == 'juguan_backup' && evt.player == player;
                                },
                                content: function () {
                                    player.addSkill('juguan_draw');
                                    player.markSkill('juguan_draw', '', '拒关 ' + get.translation(trigger.player))
                                    player.markAuto('juguan_draw', [trigger.player]);
                                },
                                sub: true,
                            },
                            draw: {
                                audio: "juguan",
                                trigger: {
                                    player: "phaseDrawBegin",
                                },
                                forced: true,
                                charlotte: true,
                                onremove: true,
                                content: function () {
                                    player.removeSkill('juguan_draw');
                                    if (!trigger.numFixed) trigger.num += 2;
                                },
                                group: "juguan_clear",
                                intro: {
                                    content: "若没有受到$的伤害，则下个摸牌阶段多摸两张牌",
                                },
                                sub: true,
                            },
                            clear: {
                                trigger: {
                                    player: "damage",
                                },
                                forced: true,
                                charlotte: true,
                                firstDo: true,
                                silent: true,
                                popup: false,
                                filter: function (event, player) {
                                    return player.storage.juguan_draw && player.storage.juguan_draw.contains(event.source);
                                },
                                content: function () {
                                    player.unmarkAuto('juguan_draw', [trigger.source]);
                                    if (!player.storage.juguan_draw || !player.storage.juguan_draw.length) player.removeSkill('juguan_draw');
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.rekuanshi = {
                        audio: "kuanshi",
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt2('rekuanshi')).set('animate', false).set('ai', function (target) {
                                var att = get.attitude(player, target);
                                if (target.hp < 3) att /= 1.5;
                                return att;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('rekuanshi');
                                player.addTempSkill('rekuanshi_effect', { player: 'phaseBegin' });
                                player.storage.rekuanshi_effect = result.targets[0];
                                if (player == game.me || player.isUnderControl()) {
                                    player.storage.rekuanshi_mark = '';
                                    player.addTempSkill("rekuanshi_mark", { player: 'phaseBegin' });
                                    player.markSkill("rekuanshi_mark", '', '宽释 ' + get.translation(result.targets[0]));
                                }
                                game.delayx();
                            }
                        },
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            effect: {
                                audio: "kuanshi",
                                trigger: {
                                    global: "damageEnd",
                                },
                                forced: true,
                                charlotte: true,
                                logTarget: "player",
                                filter: function (event, player) {
                                    if (event.player != player.storage.rekuanshi_effect || event.player.isHealthy()) return false;
                                    var history = event.player.getHistory('damage', null, event), num = 0;
                                    for (var i of history) num += i.num;
                                    return num > 1 && (num - event.num) < 2;
                                },
                                content: function () {
                                    trigger.player.recover();
                                    //decadeUI.animation.playSpine({ name: 'kuanshi', speed: 1, }, { scale: 0.8, x: [0, 0.55], parent: player });
                                    dcdAnim.loadSpine(xixiguagua.kuanshi.name, "skel", function () {
                                        dcdAnim.playSpine(xixiguagua.kuanshi, { scale: 0.8, speed: 1, x: [0, 0.55], parent: player });
                                    });
                                    player.unmarkSkill('rekuanshi_mark')
                                    player.removeSkill('rekuanshi_effect');
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.kuanshi = {
                        audio: 2,
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt2('kuanshi')).set('ai', function (target) {
                                if (get.attitude(_status.event.player, target) > 0) {
                                    return 1 / Math.sqrt(target.hp + 1);
                                }
                                return 0;
                            }).animate = false;
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('kuanshi');
                                target.storage.kuanshi2 = player;
                                target.addSkill('kuanshi2');
                                if (player == game.me || player.isUnderControl()) {
                                    player.storage.kuanshi_mark = '';
                                    player.addTempSkill("kuanshi_mark", { player: 'phaseZhunbeiBegin' });
                                    player.markSkill("kuanshi_mark", '', '宽释 ' + get.translation(target));
                                }
                            }
                        },
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            mark2: { mark: true, marktext: "宽释 生效", intro: { name: '宽释 生效' }, sub: true, },
                        },
                    }

                    // lib.skill.kuanshi2 = {
                        // trigger: {
                            // player: "damageBegin4",
                        // },
                        // forced: true,
                        // filter: function (event, player) {
                            // return event.num > 1;
                        // },
                        // content: function () {
                            // trigger.cancel();
                            // player.storage.kuanshi2.skip('phaseDraw');
                            // player.storage.kuanshi2.unmarkSkill("kuanshi_mark");
                            // player.storage.kuanshi2.addTempSkill("kuanshi_mark2", { player: 'phaseZhunbeiBegin' });
                            // player.removeSkill('kuanshi2');
                            // //decadeUI.animation.playSpine({ name: 'kuanshi', speed: 1, }, { scale: 1, parent: player });
                            // dcdAnim.loadSpine(xixiguagua.kuanshi.name, "skel", function () {
                                // dcdAnim.playSpine(xixiguagua.kuanshi, { scale: 1, speed: 1,  parent: player });
                            // });
                            // game.delay(1);
                        // },
                        // group: "kuanshi2_remove",
                        // onremove: true,
                        // subSkill: {
                            // remove: {
                                // trigger: {
                                    // global: ["phaseZhunbeiBegin", "dieAfter"],
                                // },
                                // forced: true,
                                // popup: false,
                                // filter: function (event, player) {
                                    // return event.player == player.storage.kuanshi2;
                                // },
                                // content: function () {
                                    // player.removeSkill('kuanshi2');
                                    // player.storage.kuanshi2.unmarkSkill("kuanshi_mark2");
                                    // player.storage.kuanshi2.unmarkSkill("kuanshi_mark");
                                // },
                                // sub: true,
                            // },
                        // },
                    // }

                    // lib.skill.qianju={
                    // trigger:{player:"changeHp",},forced:true,
                    // content:function(){var cc=player.getDamagedHp();
                    // player.unmarkSkill('qianju_mark');  
                    // if(cc>0){
                    // player.storage.qianju_mark='';
                    // player.addSkill("qianju_mark");  
                    // player.markSkill("qianju_mark",'','千驹 -'+cc)};},
                    // subSkill:{mark:{intro:{},sub:true,},},
                    // mod:{
                    // globalFrom:function(from,to,distance){
                    // return distance-(from.getDamagedHp());
                    // },
                    // },
                    // }
                    lib.skill.shouxi = {
                        audio: 2,
                        trigger: {
                            target: "useCardToTargeted",
                        },
                        direct: true,
                        init: function (player) {
                            if (!player.storage.shouxi) player.storage.shouxi = [];
                        },
                        filter: function (event, player) {
                            return event.card.name == 'sha' && event.player.isAlive();
                        },
                        content: function () {
                            'step 0'
                            var list = lib.inpile.filter(function (i) {
                                if (player.storage.shouxi.contains(i)) return false;
                                var type = get.type(i);
                                if (type == 'basic' || type == 'trick') return true;
                                return false;
                            });
                            for (var i = 0; i < list.length; i++) {
                                list[i] = [get.type(list[i]), '', list[i]];
                            }
                            player.chooseButton([get.prompt('shouxi', trigger.player), [list, 'vcard']]).set('ai', function (button) {
                                return Math.random();
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('shouxi');
                                var name = result.links[0][2];
                                event.vcard = result.links;
                                event.cardname = name;
                                player.storage.shouxi.add(name);
                                player.addSkill("shouxi_mark");
                                player.addMark("shouxi_mark");
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            var name = event.cardname;
                            trigger.player.chooseToDiscard(function (card) {
                                return card.name == _status.event.cardname;
                            }).set('ai', function (card) {
                                if (_status.event.att < 0) {
                                    return 10 - get.value(card);
                                }
                                return 0;
                            }).set('att', get.attitude(trigger.player, player)).set('cardname', name).set('dialog', ['守玺：请弃置一张【' + get.translation(name) + '】，否则此【杀】对' + get.translation(player) + '无效', [event.vcard, 'vcard']]);
                            'step 3'
                            if (result.bool == false) {
                                trigger.excluded.push(player);
                            }
                            else {
                                trigger.player.gainPlayerCard(player);
                            }
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if (card.name == 'sha' && get.attitude(player, target) < 0) {
                                        return 0.3;
                                    }
                                },
                            },
                        },
                        subSkill: {
                            mark: {
                                intro: {
                                    content: function (s, p) {
                                        var str = '已记录牌名：'
                                        str += get.translation(p.storage.shouxi);
                                        return str;
                                    },
                                }, sub: true,
                            },
                        },
                    }
                    lib.skill.reluoyi2 = {
                        trigger: {
                            source: "damageBegin1",
                        },
                        marktext: '裸衣',
                        mark: true,
                        intro: {
                            name: '裸衣',
                            content: '你使用【杀】或【决斗】造成伤害时，伤害+1。'
                        },
                        filter: function (event) {
                            return event.card && (event.card.name == 'sha' || event.card.name == 'juedou') && event.notLink();
                        },
                        forced: true,
                        content: function () {
                            trigger.num++;
                        },
                        ai: {
                            damageBonus: true,
                        },
                    }
                    lib.skill.duanchang = {
                        audio: 2,
                        audioname: ["re_caiwenji"],
                        forbid: ["boss"],
                        trigger: {
                            player: "die",
                        },
                        forced: true,
                        forceDie: true,
                        skillAnimation: true,
                        animationColor: "gray",
                        filter: function (event) {
                            return event.source && event.source.isIn();
                        },
                        content: function () {
                            trigger.source.clearSkills();
                            trigger.source.addSkill('duanchang_mark')
                        },
                        logTarget: "source",
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 0.2;
                                return 1.5;
                            },
                            effect: {
                                target: function (card, player, target, current) {
                                    if (!target.hasFriend()) return;
                                    if (target.hp <= 1 && get.tag(card, 'damage')) return [1, 0, 0, -2];
                                },
                            },
                        },
                        subSkill: { mark: { marktext: "断肠", mark: true, intro: { name: '断肠' }, sub: true, }, },
                    }
                    lib.skill.rezongshi_paoxiao = {
                        mark: true,
                        marktext: "杀 不限次数",
                        intro: { name: '无限杀', },
                        mod: {
                            cardUsable: function (card, player, num) {
                                if (card.name == 'sha') return Infinity;
                            },
                        },
                    },
                    
            

                        lib.skill.rezishou = {
                            audio: "zishou",
                            audioname: ["re_liubiao"],
                            trigger: {
                                player: "phaseDrawBegin2",
                            },
                            check: function (event, player) {
                                return player.countCards('h') <= (player.hasSkill('zongshi') ? player.maxHp : (player.hp - 2)) || player.skipList.contains('phaseUse') || !player.countCards('h', function (card) {
                                    return get.tag(card, 'damage') && player.hasUseTarget(card);
                                });
                            },
                            filter: function (event, player) {
                                return !event.numFixed;
                            },
                            content: function () {
                                trigger.num += game.countGroup();
                                player.addTempSkill('rezishou2');
                                player.addTempSkill("rezishou_mark");
                                player.markSkill("rezishou_mark", '', '自守');
                            },
                            ai: {
                                threaten: 1.5,
                            },
                            subSkill: { mark: { intro: {}, sub: true, }, },
                        }
                    lib.skill.decadezishou = {
                        audio: 2,
                        inherit: "rezishou",
                        group: "decadezishou_zhiheng",
                        ai: {
                            threaten: 1.8,
                        },
                        audioname: ["re_liubiao"],
                        trigger: {
                            player: "phaseDrawBegin2",
                        },
                        check: function (event, player) {
                            return player.countCards('h') <= (player.hasSkill('zongshi') ? player.maxHp : (player.hp - 2)) || player.skipList.contains('phaseUse') || !player.countCards('h', function (card) {
                                return get.tag(card, 'damage') && player.hasUseTarget(card);
                            });
                        },
                        filter: function (event, player) {
                            return !event.numFixed;
                        },
                        content: function () {
                            trigger.num += game.countGroup();
                            player.addTempSkill('rezishou2');
                            player.addTempSkill("decadezishou_mark");
                            player.markSkill("decadezishou_mark", '', '自守');
                        },
                        subSkill: { mark: { intro: {}, sub: true, }, },
                    }
                    lib.skill.zishou = {
                        audio: 2,
                        audioname: ["re_liubiao"],
                        trigger: {
                            player: "phaseDrawBegin2",
                        },
                        check: function (event, player) {
                            return player.countCards('h') <= (player.hasSkill('zongshi') ? player.maxHp : (player.hp - 2)) || player.skipList.contains('phaseUse');
                        },
                        filter: function (event, player) {
                            return !event.numFixed;
                        },
                        content: function () {
                            trigger.num += game.countGroup();
                            player.addTempSkill('zishou2');
                            player.unmarkSkill('rezongshi_paoxiao');
                            player.addTempSkill("zishou_mark");
                            player.markSkill("zishou_mark", '', '自守');
                        },
                        ai: {
                            threaten: 1.5,
                        },
                        subSkill: { mark: { intro: {}, sub: true, }, },
                    }
                    lib.skill.xinfu_duanfa = {
                        init: function (player) {
                            player.storage.xinfu_duanfa = 0;
                        },
                        audio: 2,
                        enable: "phaseUse",
                        position: "he",
                        filter: function (card, player) {
                            return player.storage.xinfu_duanfa < player.maxHp;
                        },
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        selectCard: function () {
                            var player = _status.event.player;
                            return [1, player.maxHp - player.storage.xinfu_duanfa];
                        },
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        delay: false,
                        content: function () {
                            player.draw(cards.length);
                            player.storage.xinfu_duanfa += cards.length;
                            player.addTempSkill('xinfu_duanfa_mark');
                            player.addMark('xinfu_duanfa_mark', cards.length)
                        },
                        group: "xinfu_duanfa_clear",
                        subSkill: {
                            mark: { intro: {}, onremove: function (player) { player.unmarkSkill('xinfu_duanfa_mark'); delete player.storage.xinfu_duanfa_mark; }, sub: true, },
                            clear: {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                content: function () {
                                    player.storage.xinfu_duanfa = 0;
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: 1,
                            },
                        },
                    }
                    lib.skill.xinchoufa = {
                        audio: "choufa",
                        inherit: "choufa",
                        content: function () {
                            'step 0'
                            player.choosePlayerCard(target, 'h', true);
                            'step 1'
                            player.showCards(result.cards, get.translation(player) + '对' + get.translation(target) + '发动了【筹伐】');
                            var type = get.type2(result.cards[0], target), hs = target.getCards('h', function (card) {
                                return card != result.cards[0] && get.type2(card, target) != type;
                            });
                            if (hs.length) {
                                target.addGaintag(hs, 'xinchoufa');
                                target.addTempSkill('xinchoufa2', { player: 'phaseAfter' });
                                target.addTempSkill('xinchoufa_mark', { player: 'phaseAfter' });
                                var str;
                                if (get.type2(result.cards[0], target) == 'trick') str = '锦囊牌';
                                else if (get.type2(result.cards[0], target) == 'basic') str = '基本牌';
                                else str = '装备牌';
                                target.storage.xinchoufa_mark = '';
                                target.markSkill("xinchoufa_mark", '', '筹伐 ' + str);
                            }
                        },
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return game.hasPlayer(function (current) {
                                return lib.skill.choufa.filterTarget(null, player, current);
                            });
                        },
                        filterTarget: function (card, player, target) {
                            return target != player && !target.hasSkill('choufa2') && target.countCards('h') > 0;
                        },
                        ai: {
                            order: 9,
                            result: {
                                target: function (player, target) {
                                    return -target.countCards('h');
                                },
                            },
                        },
                        subSkill: { mark: { intro: {}, sub: true, }, },
                    }
                    lib.skill.zhaoran2 = {
                        audio: "zhaoran",
                        global: "zhaoran3",
                        trigger: {
                            player: "loseAfter",
                            global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter", "addToExpansionAfter"],
                        },
                        forced: true,
                        charlotte: true,
                        init: function (player, skill) {
                            if (!player.storage[skill]) player.storage[skill] = [];
                        },
                        onremove: true,
                        filter: function (event, player) {
                            var evt = event.getl(player);
                            if (!evt || !evt.hs || !evt.hs.length) return false;
                            var list = player.getStorage('zhaoran2');
                            for (var i of evt.hs) {
                                var suit = get.suit(i, player);
                                if (!list.contains(suit) && !player.countCards('h', { suit: suit })) return true;
                            }
                            return false;
                        },
                        content: function () {
                            'step 0'
                            if (trigger.delay === false) game.delayx();
                            var list = [];
                            var suits = get.copy(player.storage.zhaoran2);
                            suits.addArray(player.getCards('h').map(function (card) {
                                return get.suit(card);
                            }));
                            var evt = trigger.getl(player);
                            for (var i of evt.hs) {
                                var suit = get.suit(i, player);
                                if (!suits.contains(suit)) list.add(suit);
                            }
                            event.count = list.length;
                            player.markAuto('zhaoran2', list);
                            player.addTempSkill("zhaoran2_mark");
                            if (!player.storage.zhaoran22) player.storage.zhaoran22 = [];
                            player.storage.zhaoran22.add(suit);
                            var str = '';
                            if (player.storage.zhaoran22.contains('heart')) str += '♥️️';
                            if (player.storage.zhaoran22.contains('diamond')) str += '♦️️';
                            if (player.storage.zhaoran22.contains('spade')) str += '♠️️';
                            if (player.storage.zhaoran22.contains('club')) str += '♣️️';
                            player.storage.zhaoran2_mark = '';
                            player.addMark("zhaoran2_mark", str);
                            'step 1'
                            event.count--;
                            var filterTarget = function (card, player, target) {
                                return target != player && target.countDiscardableCards(player, 'he') > 0;
                            }
                            if (!game.hasPlayer(function (current) {
                                return filterTarget(null, player, current);
                            })) event._result = { bool: false };
                            else player.chooseTarget(filterTarget, '弃置一名其他角色的一张牌或摸一张牌').set('ai', function (target) {
                                var att = get.attitude(player, target);
                                if (att >= 0) return 0;
                                if (target.countCards('he', function (card) {
                                    return get.value(card) > 5;
                                })) return -att;
                                return 0;
                            });
                            'step 2'
                            if (!result.bool) player.draw();
                            else {
                                var target = result.targets[0];
                                player.line(target, 'green');
                                player.discardPlayerCard(target, true, 'he');
                            }
                            if (event.count > 0) event.goto(1);
                        },
                        subSkill: {
                            mark: {
                                intro: {}, onremove: function (player) {
                                    player.removeMark('zhaoran22');
                                    player.unmarkSkill('zhaoran2_mrk');
                                    delete player.storage.zhaoran22;
                                    delete player.storage.zhaoran2_mark;
                                }, sub: true,
                            },
                        },
                    }
                    lib.skill.zhishi = {
                        audio: 2,
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt2('zhishi')).set('ai', function (target) {
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                if (att <= 4) return 0;
                                if (target.hasSkillTag('nogain')) att /= 10;
                                return att;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('zhishi', target);
                                player.storage.zhishi_mark = target;
                                player.addTempSkill('zhishi_mark', { player: 'phaseBegin' });
                                player.addTempSkill('zhishi_xg', { player: 'phaseBegin' });
                                player.storage.zhishi_xg = '';
                                player.markSkill("zhishi_xg", '', '指誓 ' + get.translation(target));
                            }
                        },
                        ai: {
                            expose: 0.3,
                        },
                        subSkill: {
                            xg: { intro: {}, sub: true, },
                            mark: {
                                trigger: {
                                    global: ["dying", "useCardToTargeted"],
                                },
                                direct: true,
                                charlotte: true,
                                filter: function (event, player) {
                                    if (!player.getExpansions('xunli').length) return false;
                                    var target = player.storage.zhishi_mark;
                                    if (event.name == 'dying') return event.player == target;
                                    return event.card.name == 'sha' && event.target == target;
                                },
                                content: function () {
                                    'step 0'
                                    var target = player.storage.zhishi_mark;
                                    event.target = target;
                                    player.chooseButton([get.prompt('zhishi', target), '<div class="text center">弃置任意张“疠”并令其摸等量的牌</div>', player.getExpansions('xunli')], [1, Infinity]).set('ai', function (button) {
                                        var player = _status.event.player, target = player.storage.zhishi_mark;
                                        if (target.hp < 1 && target != get.zhu(player)) return 0;
                                        if (target.hasSkillTag('nogain')) return 0;
                                        return 3 - player.getUseValue(card, false);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('zhishi', target);
                                        player.loseToDiscardpile(result.links);
                                        target.draw(result.links.length);
                                    }
                                },
                                // mark:"character",
                                // intro:{
                                // content:"决定帮助$，具体帮不帮另说",
                                // },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.neifa_basic = {
                        mark: true,
                        marktext: '内伐 基本牌',
                        onremove: true,
                        intro: {
                            name: '内伐 - 基本牌',
                            content: '本回合内不能使用锦囊牌和装备牌，且使用【杀】选择目标时可以多选择1个目标，且使用【杀】的目标次数上限+#。',
                        },
                        mod: {
                            cardEnabled: function (card, player) {
                                if (['trick', 'equip'].contains(get.type(card, 'trick'))) return false;
                            },
                            cardSavable: function (card, player) {
                                if (['trick', 'equip'].contains(get.type(card, 'trick'))) return false;
                            },
                            cardUsable: function (card, player, num) {
                                if (card.name == 'sha') {
                                    return num + player.countMark('neifa_basic');
                                }
                            },
                        },
                        trigger: { player: 'useCard2' },
                        filter: function (event, player) {
                            if (event.card.name != 'sha') return false;
                            return game.hasPlayer(function (current) {
                                return !event.targets.contains(current) && player.canUse(event.card, current);
                            });
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('neifa'), '为' + get.translation(trigger.card) + '额外指定一个目标', function (card, player, target) {
                                return !_status.event.sourcex.contains(target) && player.canUse(_status.event.card, target);
                            }).set('sourcex', trigger.targets).set('ai', function (target) {
                                var player = _status.event.player;
                                return get.effect(target, _status.event.card, player, player);
                            }).set('card', trigger.card);
                            'step 1'
                            if (result.bool) {
                                if (!event.isMine() && !event.isOnline()) game.delayx();
                                event.targets = result.targets;
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            player.logSkill('neifa', event.targets);
                            trigger.targets.addArray(event.targets);
                        },
                    },
                        lib.skill.neifa_nobasic = {
                            trigger: { player: 'useCard2' },
                            direct: true,
                            mark: true,
                            marktext: '内伐 非基本',
                            onremove: true,
                            mod: {
                                cardEnabled: function (card, player) {
                                    if (get.type(card) == 'basic') return false;
                                },
                                cardSavable: function (card, player) {
                                    if (get.type(card) == 'basic') return false;
                                },
                            },
                            intro: {
                                name: '内伐 - 非基本牌',
                                content: '本回合内不能使用基本牌，且使用普通锦囊牌选择目标时可以多选择1个目标，且本回合的出牌阶段内前两次使用装备牌时摸#张牌。'
                            },
                            filter: function (event, player) {
                                if (get.type(event.card) != 'trick') return false;
                                if (event.targets && event.targets.length > 0) return true;
                                var info = get.info(event.card);
                                if (info.allowMultiple == false) return false;
                                if (event.targets && !info.multitarget) {
                                    if (game.hasPlayer(function (current) {
                                        return !event.targets.contains(current) && lib.filter.targetEnabled2(event.card, player, current) && lib.filter.targetInRange(event.card, player, current);
                                    })) {
                                        return true;
                                    }
                                }
                                return false;
                            },
                            content: function () {
                                'step 0'
                                var prompt2 = '为' + get.translation(trigger.card) + '增加或减少一个目标'
                                player.chooseTarget(get.prompt('neifa'), function (card, player, target) {
                                    var player = _status.event.player;
                                    if (_status.event.targets.contains(target)) return true;
                                    return lib.filter.targetEnabled2(_status.event.card, player, target) && lib.filter.targetInRange(_status.event.card, player, target);
                                }).set('prompt2', prompt2).set('ai', function (target) {
                                    var trigger = _status.event.getTrigger();
                                    var player = _status.event.player;
                                    return get.effect(target, trigger.card, player, player) * (_status.event.targets.contains(target) ? -1 : 1);
                                }).set('targets', trigger.targets).set('card', trigger.card);
                                'step 1'
                                if (result.bool) {
                                    if (!event.isMine() && !event.isOnline()) game.delayx();
                                    event.targets = result.targets;
                                }
                                else {
                                    event.finish();
                                }
                                'step 2'
                                if (event.targets) {
                                    player.logSkill('neifa', event.targets);
                                    if (trigger.targets.contains(event.targets[0])) trigger.targets.removeArray(event.targets);
                                    else trigger.targets.addArray(event.targets);
                                }
                            },
                            group: 'neifa_use',
                            ai: {
                                reverseOrder: true,
                                skillTagFilter: function (player) {
                                    if (player.storage.counttrigger && player.storage.counttrigger.neifa_use >= 2) return false;
                                },
                                effect: {
                                    target: function (card, player, target) {
                                        if ((!player.storage.counttrigger || !player.storage.counttrigger.neifa_use || player.storage.counttrigger.neifa_use < 2) && player == target && get.type(card) == 'equip') return [1, 3];
                                    },
                                },
                            },
                        },
                        lib.skill.xinfu_guanchao = {
                            subSkill: {
                                dizeng: {
                                    trigger: {
                                        player: "useCard",
                                    },
                                    audio: "xinfu_guanchao",
                                    forced: true,
                                    mod: {
                                        aiOrder: function (player, card, num) {
                                            if (typeof card.number != 'number') return;
                                            var history = player.getHistory('useCard', function (evt) {
                                                return evt.isPhaseUsing();
                                            });
                                            if (history.length == 0) return num + 10 * (14 - card.number);
                                            var num = get.number(history[0].card);
                                            if (!num) return;
                                            for (var i = 1; i < history.length; i++) {
                                                var num2 = get.number(history[i].card);
                                                if (!num2 || num2 <= num) return;
                                                num = num2;
                                            }
                                            if (card.number > num) return num + 10 * (14 - card.number);
                                        },
                                    },
                                    filter: function (event, player) {
                                        var history = player.getHistory('useCard', function (evt) {
                                            return evt.isPhaseUsing();
                                        });
                                        if (history.length < 2) return false;
                                        if (!num2 || num2 <= num) { player.unmarkSkill('xinfu_guanchaog2_mark2') };
                                        var num = get.number(history[0].card);
                                        if (!num) return false;
                                        for (var i = 1; i < history.length; i++) {
                                            var num2 = get.number(history[i].card);
                                            if (!num2 || num2 <= num) return false;
                                            num = num2;
                                        }
                                        return true;
                                    },
                                    content: function () {
                                        player.draw();
                                        var number = get.number(trigger.card, player);
                                        player.storage.xinfu_guanchaog2_mark2 = '';
                                        player.addMark("xinfu_guanchaog2_mark2", number);
                                    },
                                    sub: true,
                                },
                                dijian: {
                                    init: function (player) {
                                        player.storage.guanchao = 0;
                                    },
                                    onremove: function (player) {
                                        delete player.storage.guanchao;
                                    },
                                    trigger: {
                                        player: "useCard",
                                    },
                                    audio: "xinfu_guanchao",
                                    forced: true,
                                    mod: {
                                        aiOrder: function (player, card, num) {
                                            if (typeof card.number != 'number') return;
                                            var history = player.getHistory('useCard', function (evt) {
                                                return evt.isPhaseUsing();
                                            });
                                            if (history.length == 0) return num + 10 * card.number;
                                            var num = get.number(history[0].card);
                                            if (!num) return;
                                            for (var i = 1; i < history.length; i++) {
                                                var num2 = get.number(history[i].card);
                                                if (!num2 || num2 >= num) return;
                                                num = num2;
                                            }
                                            if (card.number < num) return num + 10 * card.number;
                                        },
                                    },
                                    filter: function (event, player) {
                                        var history = player.getHistory('useCard', function (evt) {
                                            return evt.isPhaseUsing();
                                        });
                                        if (history.length < 2) return false;
                                        if (!num2 || num2 >= num) { player.unmarkSkill('xinfu_guanchaog2_mark') };
                                        var num = get.number(history[0].card);
                                        if (!num) return false;
                                        for (var i = 1; i < history.length; i++) {
                                            var num2 = get.number(history[i].card);
                                            if (!num2 || num2 >= num) return false;
                                            num = num2;
                                        }
                                        return true;
                                    },
                                    content: function () {
                                        player.draw();
                                        var number = get.number(trigger.card, player);
                                        player.storage.xinfu_guanchaog2_mark = '';
                                        player.addMark("xinfu_guanchaog2_mark", number);
                                    },
                                    sub: true,
                                },
                            },
                            audio: 2,
                            trigger: {
                                player: "phaseUseBegin",
                            },
                            direct: true,
                            content: function () {
                                'step 0'
                                var list = ['递增', '递减', '取消'];
                                player.chooseControl(list).set('prompt', get.prompt2('xinfu_guanchao')).set('ai', function () {
                                    return [0, 1].randomGet();
                                });
                                'step 1'
                                switch (result.control) {
                                    case '递增': {
                                        player.logSkill('xinfu_guanchao');
                                        player.addTempSkill('xinfu_guanchao_dizeng', 'phaseUseEnd');
                                        player.addTempSkill('xinfu_guanchaog3', 'phaseUseEnd');
                                        player.addTempSkill('xinfu_guanchaog2_mark2', 'phaseUseEnd');

                                        break;
                                    }
                                    case '递减': {
                                        player.logSkill('xinfu_guanchao');
                                        player.addTempSkill('xinfu_guanchao_dijian', 'phaseUseEnd');
                                        player.addTempSkill('xinfu_guanchaog2', 'phaseUseEnd');
                                        player.addTempSkill('xinfu_guanchaog2_mark', 'phaseUseEnd');
                                        break;
                                    }
                                    case '取消': {
                                        break;
                                    }
                                }
                            },
                        }
                    lib.skill.xinfu_guanchaog2 = {
                        trigger: { player: "useCard2", }, forced: true, usable: 1,
                        content: function () {
                            var number = get.number(trigger.card, player);
                            player.storage.xinfu_guanchaog2_mark = '';
                            player.addMark("xinfu_guanchaog2_mark", number);
                        },
                        subSkill: {
                            mark: { marktext: "观潮 减", mark: true, intro: { name: '观潮' }, onremove: function (player) { player.unmarkSkill('xinfu_guanchaog2_mark'); delete player.storage.xinfu_guanchaog2_mark; }, sub: true, },
                            mark2: { marktext: "观潮 增", mark: true, intro: { name: '观潮' }, onremove: function (player) { player.unmarkSkill('xinfu_guanchaog2_mark2'); delete player.storage.xinfu_guanchaog2_mark2; }, sub: true, },
                        },
                    }
                    lib.skill.xinfu_guanchaog3 = {
                        trigger: { player: "useCard2", }, forced: true, usable: 1,
                        content: function () {
                            var number = get.number(trigger.card, player);
                            player.storage.xinfu_guanchaog2_mark2 = '';
                            player.addMark("xinfu_guanchaog2_mark2", number);
                        },
                    }

                    lib.skill.spyilie = {
                        audio: 2,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseControl('选项一', '选项二', '背水！', 'cancel2').set('choiceList', [
                                '本阶段内使用【杀】的次数上限+1',
                                '本回合内使用【杀】被【闪】抵消时摸一张牌',
                                '背水！失去1点体力并依次执行上述所有选项',
                            ]).set('ai', function () {
                                if (player.countCards('hs', function (card) {
                                    return get.name(card) == 'sha' && player.hasValueTarget(card);
                                }) > player.getCardUsable({ name: 'sha' })) return 0;
                                return 1;
                            });
                            'step 1'
                            if (result.control != 'cancel2') {
                                player.logSkill('spyilie');
                                game.log(player, '选择了', '#g【毅烈】', '的', '#y' + result.control);
                                if (result.index % 2 == 0) player.addTempSkill('spyilie_add', 'phaseUseEnd');
                                if (result.index > 0) player.addTempSkill('spyilie_miss');
                                if (result.index == 2) player.loseHp();
                            }
                        },
                        subSkill: {
                            add: {
                                charlotte: true,
                                mark: true,
                                marktext: "毅烈 次数+1",
                                intro: {},
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + 1;
                                    },
                                },
                                sub: true,
                            },
                            miss: {
                                charlotte: true,
                                audio: "spyilie",
                                mark: true,
                                marktext: "毅烈 被闪摸牌",
                                intro: {},
                                trigger: {
                                    player: "shaMiss",
                                },
                                forced: true,
                                content: function () {
                                    player.draw();
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.zhishi = {
                        audio: 2,
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        direct: true,

                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt2('zhishi')).set('ai', function (target) {
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                if (att <= 4) return 0;
                                if (target.hasSkillTag('nogain')) att /= 10;
                                return att;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('zhishi', target);
                                player.storage.zhishi_mark = target;
                                player.addTempSkill('zhishi_mark', { player: 'phaseBegin' });
                                player.addTempSkill('zhishi_xg', { player: 'phaseBegin' });
                                player.storage.zhishi_xg = '';
                                player.markSkill("zhishi_xg", '', '指誓 ' + get.translation(target));
                            }
                        },
                        ai: {
                            expose: 0.3,
                        },
                        subSkill: {
                            xg: { intro: {}, sub: true, },
                            mark: {
                                trigger: {
                                    global: ["dying", "useCardToTargeted"],
                                },
                                direct: true,
                                charlotte: true,
                                filter: function (event, player) {
                                    if (!player.getExpansions('xunli').length) return false;
                                    var target = player.storage.zhishi_mark;
                                    if (event.name == 'dying') return event.player == target;
                                    return event.card.name == 'sha' && event.target == target;
                                },
                                content: function () {
                                    'step 0'
                                    var target = player.storage.zhishi_mark;
                                    event.target = target;
                                    player.chooseButton([get.prompt('zhishi', target), '<div class="text center">弃置任意张“疠”并令其摸等量的牌</div>', player.getExpansions('xunli')], [1, Infinity]).set('ai', function (button) {
                                        var player = _status.event.player, target = player.storage.zhishi_mark;
                                        if (target.hp < 1 && target != get.zhu(player)) return 0;
                                        if (target.hasSkillTag('nogain')) return 0;
                                        return 3 - player.getUseValue(card, false);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('zhishi', target);
                                        player.loseToDiscardpile(result.links);
                                        target.draw(result.links.length);
                                    }
                                },
                                // mark:"character",
                                // intro:{
                                // content:"决定帮助$，具体帮不帮另说",
                                // },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.taoluan = {
                        audio: 2,
                        enable: ["chooseToUse", "chooseToRespond"],
                        filter: function (event, player) {
                            if (!player.countCards('hse') || player.hasSkill('taoluan3')) return false;
                            for (var i of lib.inpile) {
                                var type = get.type(i);
                                if ((type == 'basic' || type == 'trick') && lib.filter.filterCard({ name: i }, player, event)) return true;
                            }
                            return false;
                        },
                        hiddenCard: function (player, name) {
                            return (!player.getStorage('taoluan').contains(name) && player.countCards('hes') > 0 && !player.hasSkill('taoluan3') && lib.inpile.contains(name));
                        },
                        init: function (player) {
                            if (!player.storage.taoluan) player.storage.taoluan = [];
                        },
                        onremove: true,
                        chooseButton: {
                            dialog: function (event, player) {
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    var name = lib.inpile[i];
                                    if (player.storage.taoluan && player.storage.taoluan.contains(name)) continue;
                                    if (name == 'sha') {
                                        if (event.filterCard({ name: name }, player, event)) list.push(['基本', '', 'sha']);
                                        for (var j of lib.inpile_nature) {
                                            if (event.filterCard({ name: name, nature: j }, player, event)) list.push(['基本', '', 'sha', j]);
                                        }
                                    }
                                    else if (get.type(name) == 'trick' && event.filterCard({ name: name }, player, event)) list.push(['锦囊', '', name]);
                                    else if (get.type(name) == 'basic' && event.filterCard({ name: name }, player, event)) list.push(['基本', '', name]);
                                }
                                if (list.length == 0) {
                                    return ui.create.dialog('滔乱已无可用牌');
                                }
                                return ui.create.dialog('滔乱', [list, 'vcard']);
                            },
                            filter: function (button, player) {
                                return _status.event.getParent().filterCard({ name: button.link[2] }, player, _status.event.getParent());
                            },
                            check: function (button) {
                                var player = _status.event.player;
                                if (player.countCards('hs', button.link[2]) > 0) return 0;
                                if (button.link[2] == 'wugu') return 0;
                                var effect = player.getUseValue(button.link[2]);
                                if (effect > 0) return effect;
                                return 0;
                            },
                            backup: function (links, player) {
                                return {
                                    filterCard: true,
                                    audio: 'taoluan',
                                    selectCard: 1,
                                    popname: true,
                                    check: function (card) {
                                        return 6 - get.value(card);
                                    },
                                    position: 'hes',
                                    viewAs: { name: links[0][2], nature: links[0][3] },
                                    onuse: function (result, player) {
                                        player.storage.taoluan.add(result.card.name);
                                        player.addSkill("taoluan_mark");
                                        player.addMark("taoluan_mark");

                                    },
                                }
                            },
                            prompt: function (links, player) {
                                return '将一张牌当做' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '使用';
                            },
                        },
                        ai: {
                            skillTagFilter: function (player) {
                                if (!player.countCards('hes') || player.hasSkill('taoluan3')) return false;
                                if (!player.storage.taoluan.contains('tao')) { }
                                else if (player.isDying() && !player.storage.taoluan.contains('jiu')) { }
                                else return false;
                            },
                            order: 4,
                            result: {
                                player: function (player) {
                                    var allshown = true, players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].ai.shown == 0) {
                                            allshown = false;
                                        }
                                        if (players[i] != player && players[i].countCards('h') && get.attitude(player, players[i]) > 0) {
                                            return 1;
                                        }
                                    }
                                    if (allshown) return 1;
                                    return 0;
                                },
                            },
                            threaten: 1.9,
                        },
                        group: ["taoluan2"],
                        subSkill: {
                            mark: {
                                intro: {
                                    content: function (s, p) {
                                        var str = '已使用牌名：'
                                        str += get.translation(p.storage.taoluan);
                                        return str;
                                    },
                                }, sub: true,
                            },
                        },
                    };
                    lib.skill.taoluan3 = {
                        init: function (player) {
                            player.shixiaoSkill("taoluan");
                        },
                        onremove: function (player) {
                            player.unshixiaoSkill("taoluan");
                        }
                    };

                    lib.skill.yinyi = {
                        audio: 2,
                        trigger: {
                            player: "damageBegin1",
                        },
                        forced: true,
                        usable: 1,
                        filter: function (event, player) {
                            return event.source && event.source.hp != player.hp && !lib.linked.contains(event.nature) && event.source.countCards('h') != player.countCards('h');
                        },
                        content: function () {
                            player.unmarkSkill('yinyi1_mark')
                            trigger.cancel();
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'damage')) {
                                        if (player.hp == target.hp) return;
                                        var cards = [card];
                                        if (card.cards && card.cards.length) cards.addArray(card.cards);
                                        if (ui.selected.cards.length) cards.addArray(ui.selected.cards);
                                        if (player.countCards('h', function (card) {
                                            return !cards.contains(card);
                                        }) == target.countCards('h')) return;
                                        return 'zerotarget';
                                    }
                                },
                            },
                        },
                        group: "yinyi1",
                    }
                    lib.skill.yinyi1 = { trigger: { global: "phaseZhunbeiBegin", }, forced: true, audio: false, content: function () { player.addSkill("yinyi1_mark"); player.markSkill("yinyi1_mark"); }, subSkill: { mark: { marktext: "隐逸", mark: true, intro: { name: '隐逸', }, sub: true, }, }, };
                    lib.skill.spyajun = {
                        audio: 2,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            var hs = player.getCards('h');
                            return hs.length > 0 && !player.hasSkillTag('noCompareSource') && player.hasHistory('gain', function (evt) {
                                for (var i of evt.cards) {
                                    if (hs.contains(i)) return true;
                                }
                                return false;
                            }) && game.hasPlayer(function (current) {
                                return current != player && player.canCompare(current);
                            });
                        },
                        content: function () {
                            'step 0'
                            var cards = [], hs = player.getCards('h');
                            player.getHistory('gain', function (evt) {
                                cards.addArray(evt.cards);
                            });
                            cards = cards.filter(function (i) {
                                return hs.contains(i);
                            });
                            player.chooseCardTarget({
                                prompt: get.prompt('spyajun'),
                                prompt2: '操作提示：选择一张本回合新获得的牌作为拼点牌，然后选择一名拼点目标',
                                cards: cards,
                                filterCard: function (card) {
                                    return _status.event.cards.contains(card);
                                },
                                filterTarget: function (card, player, target) {
                                    return player.canCompare(target);
                                },
                                ai1: function (card) {
                                    return get.number(card) - get.value(card);
                                },
                                ai2: function (target) {
                                    return -get.attitude(_status.event.player, target) * Math.sqrt(5 - Math.min(4, target.countCards('h'))) * (target.hasSkillTag('noh') ? 0.5 : 1);
                                },
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('spyajun', target);
                                var next = player.chooseToCompare(target);
                                if (!next.fixedResult) next.fixedResult = {};
                                next.fixedResult[player.playerid] = result.cards[0];
                            }
                            else event.finish();
                            'step 2'
                            if (result.bool) {
                                var cards = [result.player, result.target].filterInD('d');
                                if (cards.length) {
                                    player.chooseButton(['是否将一张牌置于牌堆顶？', cards]).set('ai', function (button) {
                                        if (get.color(button.link) == 'black') return 1;
                                        return 0;
                                    });
                                }
                                else event.finish();
                            }
                            else {
                                // player.addMark('spyajun_less',1,false);
                                player.addTempSkill('spyajun_less');
                                event.finish();
                            }
                            'step 3'
                            if (result.bool) {
                                var card = result.links[0];
                                card.fix();
                                ui.cardPile.insertBefore(card, ui.cardPile.firstChild);
                                game.updateRoundNumber();
                                game.log(player, '将', card, '置于牌堆顶');
                            }
                        },
                        group: "spyajun_draw",
                        subSkill: {
                            draw: {
                                audio: "spyajun",
                                trigger: {
                                    player: "phaseDrawBegin2",
                                },
                                forced: true,
                                locked: false,
                                filter: function (event, player) {
                                    return !event.numFixed;
                                },
                                content: function () {
                                    trigger.num++;
                                },
                                sub: true,
                            },
                            less: {
                                onremove: true,
                                charlotte: true,
                                marktext: "雅俊 没赢",
                                mark: true,
                                intro: {
                                    content: "手牌上限-1",
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num - 1;
                                    },
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.bingjie = {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        check: function (event, player) {
                            return player.maxHp > 3 && player.isDamaged() && player.hasCard(function (card) {
                                return game.hasPlayer(function (current) {
                                    return current != player && get.attitude(player, current) < 0 && player.canUse(card, current, null, true) && get.effect(current, card, player, player) > 0;
                                }) && player.hasValueTarget(card);
                            }, 'hs');
                        },
                        content: function () {
                            'step 0'
                            player.loseMaxHp();
                            'step 1'
                            player.addTempSkill('bingjie_effect');
                            game.delayx();
                        },
                        subSkill: {
                            effect: {
                                audio: "bingjie",
                                trigger: {
                                    player: "useCardToPlayered",
                                },
                                mark: true,
                                intro: { name: '秉节' },
                                forced: true,
                                charlotte: true,
                                logTarget: "target",
                                filter: function (event, player) {
                                    return event.target != player && (event.card.name == 'sha' || get.type(event.card, false) == 'trick') && event.target.countCards('he') > 0;
                                },
                                content: function () {
                                    trigger.target.chooseToDiscard('he', true);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.cslilu = {
                        audio: 2,
                        trigger: {
                            player: "phaseDrawBegin1",
                        },
                        filter: function (event, player) {
                            return !event.numFixed;
                        },
                        check: function (event, player) {
                            return Math.min(player.maxHp, 5) - player.countCards('h') > 3 || game.hasPlayer(function (current) {
                                return current != player && get.attitude(player, current) > 0;
                            });
                        },
                        content: function () {
                            'step 0'
                            trigger.changeToZero();
                            'step 1'
                            player.drawTo(Math.min(player.maxHp, 5));
                            'step 2'
                            if (player.countCards('h') > 0) {
                                var str = '将至少一张手牌交给一名其他角色';
                                var num = player.countMark('cslilu');
                                if (num < player.countCards('h')) {
                                    if (num > 0) str += ('。若给出的牌数大于' + get.cnNumber(num) + '张，则你');
                                    else str += '，并';
                                    str += '加1点体力上限并回复1点体力'
                                }
                                player.chooseCardTarget({
                                    prompt: str,
                                    filterCard: true,
                                    filterTarget: lib.filter.notMe,
                                    selectCard: [1, Infinity],
                                    forced: true,
                                    ai1: function (card) {
                                        if (ui.selected.cards.length < _status.event.goon) {
                                            if (get.tag(card, 'damage') && game.hasPlayer(function (current) {
                                                current != player && get.attitude(player, current) > 0 && !current.hasSkillTag('nogain') && !current.hasJudge('lebu') && current.hasValueTarget(card);
                                            })) return 1;
                                            return 1 / Math.max(0.1, get.value(card));
                                        }
                                        return 0;
                                    },
                                    ai2: function (target) {
                                        return Math.sqrt(5 - Math.min(4, target.countCards('h'))) * get.attitude(_status.event.player, target);
                                    },
                                    goon: function () {
                                        if (!game.hasPlayer(function (current) {
                                            return current != player && get.attitude(player, current) > 0 && !current.hasSkillTag('nogain') && !current.hasJudge('lebu');
                                        })) return 1;
                                        if (num < player.countCards('h')) return num + 1;
                                        return 1;
                                    }(),
                                });
                            }
                            else event.finish();
                            'step 3'
                            if (result.bool) {
                                var num = player.countMark('cslilu');
                                result.targets[0].gain(result.cards, player, 'giveAuto');
                                if (result.cards.length > num) {
                                    player.storage.cslilu_mark = '';
                                    player.addSkill('cslilu_mark');
                                    player.addMark('cslilu_mark', result.cards.length);
                                    player.gainMaxHp();
                                    player.recover();
                                } else {
                                    player.storage.cslilu_mark = '';
                                    player.addSkill('cslilu_mark');
                                    player.addMark('cslilu_mark', result.cards.length);
                                }
                                player.storage.cslilu = result.cards.length;
                                player.markSkill('cslilu');
                            }
                        },
                        subSkill: { mark: { intro: {}, sub: true, }, },
                    }
                    // lib.skill.jinglve = {
                        // audio: 2,
                        // enable: "phaseUse",
                        // usable: 1,
                        // filter: function (event, player) {
                            // if (player.hasSkill('jinglve2')) return false;
                            // return game.hasPlayer(function (current) {
                                // return current != player && current.countCards('h') > 0;
                            // });
                        // },
                        // filterTarget: function (card, player, target) {
                            // return target != player && target.countCards('h') > 0;
                        // },
                        // content: function () {
                            // 'step 0'
                            // if (!player.storage.jinglve4) player.storage.jinglve4 = [];
                            // player.storage.jinglve4.add(target);
                            // player.chooseButton(['选择一张牌作为「死士」', target.getCards('h')], true).set('ai', function (button) {
                                // var target = _status.event.getParent().target;
                                // var card = button.link;
                                // var val = target.getUseValue(card);
                                // if (val > 0) return val;
                                // return get.value(card);
                            // });
                            // 'step 1'
                            // if (result.bool) {
                                // var gg = ' ';
                                // if (player == game.me || player.isUnderControl()) {
                                    // var xx = get.translation(result.links[0].name).slice(0, 2);
                                    // var cc = get.translation(get.suit(result.links[0]));
                                    // var zz = get.number(result.links[0]);
                                    // if (zz == undefined) zz = ''; else { if ([1, 11, 12, 13].contains(zz)) { zz = { '1': 'A', '11': 'J', '12': 'Q', '13': 'K' }[zz]; } }
                                    // var gg = cc + zz + xx;
                                // }
                                // target.storage.jinglve_mark = '';
                                // target.addSkill("jinglve_mark");
                                // target.markSkill("jinglve_mark", '', '死士 ' + gg);
                                // player.storage.jinglve2 = target;
                                // player.storage.jinglve3 = result.links[0];
                                // player.addSkill('jinglve2');
                            // }
                        // },
                        // ai: {
                            // order: 12,
                            // result: {
                                // target: -1,
                            // },
                        // },
                        // subSkill: { mark: { intro: { name: '死士', }, sub: true, }, },
                    // }
                    // lib.skill.jinglve2 = {
                        // mark: true,
                        // intro: {
                            // name: "死士",
                            // mark: function (dialog, content, player) {
                                // dialog.addText('记录目标');
                                // dialog.add([content]);
                                // if (player == game.me || player.isUnderControl()) {
                                    // dialog.addText('死士牌');
                                    // dialog.add([player.storage.jinglve3]);
                                // }
                            // },
                        // },
                        // onremove: function (player) {
                            // player.storage.jinglve2.unmarkSkill('jinglve_mark');
                            // delete player.storage.jinglve2;
                            // delete player.storage.jinglve3;
                        // },
                        // trigger: {
                            // global: ["dieEnd", "loseEnd", "gainEnd"],
                        // },
                        // silent: true,
                        // lastDo: true,
                        // charlotte: true,
                        // filter: function (event, player) {
                            // if (event.name != 'gain' && event.player != player.storage.jinglve2) return false;
                            // return event.name == 'die' || (event.cards.contains(player.storage.jinglve3) && (event.name == 'gain' || event.position != ui.ordering && event.position != ui.discardPile));
                        // },
                        // content: function () {
                            // player.removeSkill('jinglve2');
                            // player.storage.jinglve2.removeSkill('jinglve_mark');
                        // },
                        // group: "jinglve3",
                        // forced: true,
                        // popup: false,
                    // }
                    // lib.skill.jinglve3 = {
                        // audio: "jinglve",
                        // trigger: {
                            // global: ["loseAfter", "useCard", "phaseAfter", "cardsDiscardAfter"],
                        // },
                        // filter: function (event, player) {
                            // if (event.player && event.player != player.storage.jinglve2) return false;
                            // if (event.name == 'phase') return event.player.getCards('hej').contains(player.storage.jinglve3);
                            // if (!event.cards.contains(player.storage.jinglve3)) return false;
                            // return event.name == 'useCard' || get.position(player.storage.jinglve3, true) == 'd' || event.position == ui.discardPile;
                        // },
                        // forced: true,
                        // charlotte: true,
                        // logTarget: "player",
                        // content: function () {
                            // if (trigger.name == 'useCard') {
                                // trigger.all_excluded = true;
                                // trigger.targets.length = 0;
                            // }
                            // else {
                                // if (trigger.name == 'phase') {
                                    // player.gain(player.storage.jinglve3, trigger.player, 'giveAuto');
                                // }
                                // else if (get.position(player.storage.jinglve3, true) == 'd') player.gain(player.storage.jinglve3, 'gain2');
                            // }
                            // player.removeSkill('jinglve2');
                        // },
                    // }
                    lib.skill.rezhoufu = {
                        audio: "zhoufu",
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return player.countCards('he') > 0;
                        },
                        filterCard: true,
                        filterTarget: function (card, player, target) {
                            return target != player && !target.getExpansions('rezhoufu2').length;
                        },
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        position: "he",
                        discard: false,
                        lose: false,
                        delay: false,
                        content: function () {
                            if (!target.storage.rezhoufu2_markcount) target.storage.rezhoufu2_markcount = 0;
                            target.addToExpansion(cards, player, 'give').gaintag.add('rezhoufu2');
                            var cc = get.suit(cards, player, 'give');
                            var xx = get.translation(cc);
                            target.storage.rezhoufu2 = '';
                            target.addSkill("rezhoufu2");
                            target.markSkill("rezhoufu2", '', '咒缚 ' + xx);
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: -1,
                            },
                        },
                        group: ["rezhoufu_judge", "rezhoufu_losehp"],
                        subSkill: {
                            judge: {
                                audio: "zhoufu",
                                trigger: {
                                    global: "judgeBefore",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return !event.directresult && event.player.getExpansions('rezhoufu2').length;
                                },
                                logTarget: "player",
                                content: function () {
                                    var cards = [trigger.player.getExpansions('rezhoufu2')[0]];
                                    trigger.directresult = cards[0];
                                    trigger.player.unmarkSkill("rezhoufu2");
                                },
                                sub: true,
                            },
                            losehp: {
                                audio: "zhoufu",
                                trigger: {
                                    global: "phaseEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current.hasHistory('lose', function (evt) {
                                            if (!evt || !evt.xs || !evt.xs.length) return false;
                                            for (var i in evt.gaintag_map) {
                                                if (evt.gaintag_map[i].contains('rezhoufu2')) return true;
                                            }
                                            return false;
                                        });
                                    });
                                },
                                logTarget: function (current) {
                                    return game.filterPlayer(function (current) {
                                        return current.hasHistory('lose', function (evt) {
                                            if (!evt || !evt.xs || !evt.xs.length) return false;
                                            for (var i in evt.gaintag_map) {
                                                if (evt.gaintag_map[i].contains('rezhoufu2')) return true;
                                            }
                                            return false;
                                        });
                                    }).sortBySeat();
                                },
                                content: function () {
                                    var targets = game.filterPlayer(function (current) {
                                        return current.hasHistory('lose', function (evt) {
                                            if (!evt || !evt.xs || !evt.xs.length) return false;
                                            for (var i in evt.gaintag_map) {
                                                if (evt.gaintag_map[i].contains('rezhoufu2')) return true;
                                            }
                                            return false;
                                        });
                                    }).sortBySeat();
                                    while (targets.length) {
                                        targets.shift().loseHp();
                                    }
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.xinzhoufu = {
                        audio: "zhoufu",
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return player.countCards('he') > 0;
                        },
                        filterCard: true,
                        filterTarget: function (card, player, target) {
                            return target != player && !target.getExpansions('xinzhoufu2').length;
                        },
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        position: "he",
                        discard: false,
                        lose: false,
                        delay: false,
                        content: function () {
                            target.addToExpansion(cards, player, 'give').gaintag.add('xinzhoufu2');
                            var cc = get.suit(cards, player, 'give');
                            var xx = get.translation(cc);
                            target.storage.xinzhoufu2 = '';
                            target.addSkill("xinzhoufu2");
                            target.markSkill("xinzhoufu2", '', '咒缚 ' + xx);
                        },
                        ai: {
                            order: 9,
                            result: {
                                target: function (player, target) {
                                    if (player.inRange(target)) return -1.3;
                                    return -1;
                                },
                            },
                        },
                        group: ["xinzhoufu_judge"],
                        subSkill: {
                            judge: {
                                audio: "zhoufu",
                                trigger: {
                                    global: "judgeBefore",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return !event.directresult && event.player.getExpansions('xinzhoufu2').length;
                                },
                                logTarget: "player",
                                content: function () {
                                    var cards = [trigger.player.getExpansions('xinzhoufu2')[0]];
                                    trigger.directresult = cards[0];
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.zhuitao = {
                        audio: 2,
                        direct: true,
                        locked: false,
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        filter: function (event, player) {
                            var storage = player.getStorage('zhuitao');
                            return game.hasPlayer(function (current) {
                                return current != player && !storage.contains(current);
                            });
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('zhuitao'), '令自己至一名其他角色的距离-1', function (card, player, target) {
                                return target != player && !player.getStorage('zhuitao').contains(target);
                            }).set('ai', function (target) {
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                if (att < 0 && get.distance(player, target) == 2) return 100;
                                return get.distance(player, target) * (1 - get.sgn(att) / 3);
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('zhuitao', result.targets[0]);
                                player.markAuto('zhuitao', result.targets);
                                var target = result.targets[0];
                                target.addSkill('zhuitao_c')
                                game.delayx();
                            }
                        },
                        mod: {
                            globalFrom: function (player, target, distance) {
                                if (player.getStorage('zhuitao').contains(target)) return distance - 1;
                            },
                        },
                        group: "zhuitao_remove",
                        subSkill: {
                            c: { mark: true, marktext: "追讨", intro: {}, sub: true, },
                            remove: {
                                audio: "zhuitao",
                                trigger: {
                                    source: "damageSource",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.getStorage('zhuitao').contains(event.player);
                                    if (target.hasSkill('zhuitao_c')) return true;
                                },
                                logTarget: "player",
                                content: function () {
                                    player.unmarkAuto('zhuitao', [trigger.player]);
                                    var target = trigger.player;
                                    if (target.hasSkill('zhuitao_c')) target.removeSkill('zhuitao_c');
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.decadejingce = {
                        audio: 2,
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        frequent: true,
                        filter: function (event, player) {
                            return player.getHistory('useCard').length >= player.hp;
                        },
                        content: function () {
                            'step 0'
                            var list = [], history = player.getHistory('useCard');
                            for (var i of history) {
                                list.add(get.suit(i.card));
                                if (list.length >= player.hp) break;
                            }
                            if (list.length >= player.hp) event.goon = true;
                            else player.chooseControl('摸牌阶段', '出牌阶段').set('prompt', '精策：选择要执行的额外阶段');
                            'step 1'
                            if (event.goon || result.index == 0) {
                                var next = player.phaseDraw();
                                event.next.remove(next);
                                trigger.getParent().next.push(next);
                                player.unmarkSkill('decadejingce1_mark');
                                player.removeSkill('decadejingce1_xg');
                                player.unmarkSkill('decadejingce1_xg');
                            }
                            if (event.goon || result.index == 1) {
                                var next = player.phaseUse();
                                event.next.remove(next);
                                trigger.getParent().next.push(next);
                                player.unmarkSkill('decadejingce1_mark');
                                player.removeSkill('decadejingce1_xg');
                                player.unmarkSkill('decadejingce1_xg');
                                player.addMark('decadejingce', 1, false)
                            }
                        },
                        group: ['decadejingce1'],
                    }
                    lib.skill.decadejingce1 = {
                        trigger: { player: 'useCard2', }, forced: true, audio: false,
                        filter: function (event, player) {
                            if (event.name == 'phase') return true;
                            if (player != _status.currentPhase) return false; return true;
                        },
                        content: function () {
                            if (player.countMark('decadejingce') == 0) {
                                player.addTempSkill("decadejingce1_xg");
                                player.addMark("decadejingce1_xg")
                            }
                            player.addTempSkill("decadejingce1_mark");
                            if (!player.storage.decadejingce1_mark1) player.storage.decadejingce1_mark1 = [];
                            player.storage.decadejingce1_mark1.add(get.suit(trigger.card));
                            var str = '';
                            var cc = get.suit(trigger.card);
                            if (player.storage.decadejingce1_mark1.contains('heart')) str += '♥️️';
                            if (player.storage.decadejingce1_mark1.contains('diamond')) str += '♦️️';
                            if (player.storage.decadejingce1_mark1.contains('spade')) str += '♠️️';
                            if (player.storage.decadejingce1_mark1.contains('club')) str += '♣️️';
                            player.storage.decadejingce1_mark = '';
                            if (player.countMark('decadejingce') == 0) {
                                player.addMark("decadejingce1_mark", str);
                            }
                        },
                        subSkill: {
                            mark: {
                                marktext: '精策', intro: { name: '精策', },
                                onremove: function (player) {
                                    player.removeMark('decadejingce1_mark1');
                                    player.removeMark('decadejingce1_xg');
                                    delete player.storage.decadejingce1_mark1;
                                    delete player.storage.decadejingce1_xg;
                                    delete player.storage.decadejingce;
                                },
                            },
                            xg: {
                                marktext: '精策', intro: { name: '精策', }, onremove: function (player) {
                                    player.removeMark('decadejingce1_mark1');
                                    player.removeMark('decadejingce1_xg');
                                    delete player.storage.decadejingce1_mark1;
                                    delete player.storage.decadejingce1_xg;
                                    delete player.storage.decadejingce;
                                }, sub: true,
                            },
                        },
                    };
                    lib.skill.fengjie = {
                        audio: 2,
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return game.hasPlayer((current) => (current != player));
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget('请选择【奉节】的目标', '选择一名其他角色并获得如下效果直到你下回合开始：一名角色的结束阶段开始时，你将手牌摸至（至多摸至四张）或弃置至与其体力值相等。', lib.filter.notMe, true).set('ai', function (target) {
                                return (target.hp - player.countCards('h')) / get.threaten(target);
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.line(target, 'green');
                                game.log(player, '选择了', target);
                                player.storage.fengjie2 = target;
                                player.addTempSkill('fengjie2', { player: 'phaseBegin' });
                                game.delayx();
                                player.storage.fengjie_mark = '';
                                player.addTempSkill("fengjie_mark", { player: 'phaseBegin' });
                                player.markSkill("fengjie_mark", '', '奉节 ' + get.translation(target));
                            }
                        },
                        subSkill: { mark: { intro: {}, sub: true, }, },
                    }
                    lib.skill.xingbu = {
                        audio: 2,
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        "prompt2": "展示牌堆顶的三张牌，并根据其中红色牌的数量，令一名其他角色获得一种效果",
                        check: function (event, player) {
                            return game.hasPlayer(function (current) {
                                return current != player && get.attitude(player, current) > 0;
                            });
                        },
                        content: function () {
                            'step 0'
                            var cards = get.cards(3);
                            for (var i = cards.length - 1; i--; i >= 0) {
                                ui.cardPile.insertBefore(cards[i], ui.cardPile.firstChild);
                            }
                            game.updateRoundNumber();
                            event.cards = cards;
                            //game.cardsGotoOrdering(cards);
                            player.showCards(cards, get.translation(player) + '发动了【星卜】');
                            'step 1'
                            var num = 0;
                            for (var i of cards) {
                                if (get.color(i, false) == 'red') num++;
                            }
                            player.chooseTarget('选择一名其他角色获得星卜效果（' + get.cnNumber(num) + '张）', lib.filter.notMe, true).set('ai', function (target) {
                                var player = _status.event.player, num = _status.event.getParent().num;
                                var att = get.attitude(player, target);
                                if (num < 3) att *= (-1);
                                if (num == 2 && target.hasJudge('lebu')) att *= (-1.4);
                                return att;
                            });
                            if (num == 0) num = 1;
                            event.num = num;
                            'step 2'
                            if (result.bool) {
                                var skill = 'xingbu_effect' + num, target = result.targets[0];
                                player.line(target, 'green');
                                game.log(player, '选择了', target);
                                target.addTempSkill(skill, { player: 'phaseEnd' });
                                target.addMark(skill, 1, false);
                                game.delayx();
                            }
                        },
                        subSkill: {
                            "effect1": {
                                charlotte: true,
                                onremove: true,
                                marktext: "星卜 荧惑守心",
                                intro: {
                                    content: "准备阶段开始时弃置#张手牌",
                                },
                                trigger: {
                                    player: "phaseZhunbeiBegin",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.countCards('h') > 0;
                                },
                                content: function () {
                                    player.chooseToDiscard('h', true, player.countMark('xingbu_effect1'));
                                },
                                sub: true,
                            },
                            "effect2": {
                                charlotte: true,
                                onremove: true,
                                marktext: "星卜 白虹贯日",
                                intro: {
                                    content: "使用【杀】的次数上限-#，跳过弃牌阶段",
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num - player.countMark('xingbu_effect2');
                                    },
                                },
                                trigger: {
                                    player: "phaseDiscardBegin",
                                },
                                forced: true,
                                content: function () {
                                    trigger.cancel();
                                },
                                sub: true,
                            },
                            "effect3": {
                                charlotte: true,
                                onremove: true,
                                marktext: "星卜 五星连珠",
                                intro: {
                                    content: "摸牌阶段多摸2*#张牌，使用【杀】的次数上限+#。",
                                },
                                trigger: {
                                    player: ["phaseDrawBegin2"],
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return !event.numFixed;
                                },
                                content: function () {
                                    if (trigger.name == 'phaseDraw') trigger.num += (player.countMark('xingbu_effect3') * 2);
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.countMark('xingbu_effect3');
                                    },
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.xuezhao = {
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return player.maxHp > 0 && player.countCards('h') > 0;
                        },
                        filterCard: true,
                        position: "h",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        selectTarget: function () {
                            return [1, _status.event.player.maxHp];
                        },
                        check: function (card) {
                            return 2 * (_status.event.player.maxHp + 2) - get.value(card);
                        },
                        content: function () {
                            'step 0'
                            if (!target.countCards('he')) event._result = { bool: false };
                            else target.chooseCard('he', '交给' + get.translation(player) + '一张牌并摸一张牌，或不能响应其使用的牌直到回合结束').set('ai', function (card) {
                                var player = _status.event.player, target = _status.event.getParent().player, val = get.value(card);
                                if (get.attitude(player, target) > 0) {
                                    if (get.name(card, target) == 'sha' && target.hasValueTarget(card)) return 30 - val;
                                    return 20 - val;
                                }
                                return -val;
                            });
                            'step 1'
                            if (result.bool) {
                                player.addTempSkill('xuezhao_sha');
                                player.addMark('xuezhao_sha', 1, false);
                                player.gain(result.cards, target, 'giveAuto');
                                target.draw();
                            }
                            else {
                                player.addTempSkill('xuezhao_hit');
                                target.addTempSkill('xuezhao_mark');
                                player.markAuto('xuezhao_hit', [target]);
                            }
                        },
                        ai: {
                            threaten: 2.4,
                            order: 3.6,
                            result: {
                                player: function (player, target) {
                                    if (get.attitude(target, player) > 0) {
                                        if (target.countCards('e', function (card) {
                                            return get.value(card, target) < 0;
                                        })) return 3;
                                        return Math.sqrt(target.countCards('he'));
                                    }
                                    if (target.mayHaveShan() && player.countCards('hs', function (card) {
                                        return !ui.selected.cards.contains(card) && get.name(card) == 'sha' && player.canUse(card, target) && get.effect(target, card, player, player) != 0;
                                    })) return -Math.sqrt(Math.abs(get.attitude(player, target))) / 2;
                                    return 0.1;
                                },
                            },
                        },
                        subSkill: {
                            mark: { mark: true, marktext: "血昭 不可响应", intro: {}, sub: true, },
                            sha: {
                                charlotte: true,
                                onremove: true,
                                marktext: "血昭 次数+",
                                intro: {
                                    content: "多杀#刀，誓诛曹贼！",
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.countMark('xuezhao_sha');
                                    },
                                },
                                sub: true,
                            },
                            hit: {
                                charlotte: true,
                                onremove: true,
                                // marktext:"诏",
                                // intro:{
                                // content:"$篡汉，其心可诛！",
                                // },
                                trigger: {
                                    player: "useCard1",
                                },
                                forced: true,
                                popup: false,
                                content: function () {
                                    trigger.directHit.addArray(player.getStorage('xuezhao_hit'));
                                },
                                ai: {
                                    "directHit_ai": true,
                                    skillTagFilter: function (player, tag, arg) {
                                        return player.getStorage('xuezhao_hit').contains(arg.target);
                                    },
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.guowu = {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        preHidden: true,
                        content: function () {
                            'step 0'
                            var hs = player.getCards('h');
                            player.showCards(hs, get.translation(player) + '发动了【帼舞】');
                            var list = [];
                            for (var i of hs) {
                                list.add(get.type2(i, player));
                                if (list.length >= 3) break;
                            }
                            if (list.length >= 1) {
                                var card = get.discardPile(function (i) {
                                    return i.name == 'sha';
                                });
                                if (card) player.gain(card, 'gain2');
                            }
                            if (list.length >= 2) player.addTempSkill('guowu_dist', 'phaseUseAfter');
                            if (list.length >= 3) player.addTempSkill('guowu_add', 'phaseUseAfter');
                            player.addTempSkill('guowu_mark', 'phaseUseAfter');
                            player.addMark("guowu_mark", list.length)
                        },
                        subSkill: {
                            mark: { intro: {}, onremove: function (player) { delete player.storage.guowu_mark; }, sub: true, },
                            dist: {
                                charlotte: true,
                                mod: {
                                    targetInRange: () => true,
                                },
                                sub: true,
                            },
                            add: {
                                charlotte: true,
                                trigger: {
                                    player: "useCard1",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    var info = get.info(event.card, false);
                                    if (info.allowMultiple == false) return false;
                                    if (event.card.name != 'sha' && info.type != 'trick') return false;
                                    if (event.targets && !info.multitarget) {
                                        if (game.hasPlayer(function (current) {
                                            return !event.targets.contains(current) && lib.filter.targetEnabled2(event.card, player, current) && lib.filter.targetInRange(event.card, player, current);
                                        })) {
                                            return true;
                                        }
                                    }
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    var num = game.countPlayer(function (current) {
                                        return !trigger.targets.contains(current) && lib.filter.targetEnabled2(trigger.card, player, current) && lib.filter.targetInRange(trigger.card, player, current);
                                    });
                                    player.chooseTarget('帼舞：是否为' + get.translation(trigger.card) + '增加' + (num > 1 ? '至多两个' : '一个') + '目标？', [1, Math.min(2, num)], function (card, player, target) {
                                        var trigger = _status.event.getTrigger();
                                        var card = trigger.card;
                                        return !trigger.targets.contains(target) && lib.filter.targetEnabled2(card, player, target) && lib.filter.targetInRange(card, player, target);
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        var card = _status.event.getTrigger().card;
                                        return get.effect(target, card, player, player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        if (player != game.me && !player.isOnline()) game.delayx();
                                    }
                                    else event.finish();
                                    'step 2'
                                    var targets = result.targets.sortBySeat();
                                    player.logSkill('guowu_add', targets);
                                    trigger.targets.addArray(targets);
                                    if (get.mode() == 'guozhan') player.removeSkill('guowu_add');
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.xinfu_daigong = {
                        usable: 1,
                        audio: 2,
                        trigger: {
                            player: "damageBegin4",
                        },
                        filter: function (event, player) {
                            return event.source != undefined && player.countCards('h') > 0;
                        },
                        content: function () {
                            'step 0'
                            player.showHandcards();
                            player.unmarkSkill('xinfu_daigong1_mark');
                            'step 1'
                            var cards = player.getCards('h');
                            var suits = [];
                            for (var i = 0; i < cards.length; i++) {
                                suits.add(get.suit(cards[i]));
                            }
                            trigger.source.chooseCard('he', '交给' + get.translation(player) + '一张满足条件的牌，否则防止此伤害。', function (card) {
                                return !_status.event.suits.contains(get.suit(card));
                            }).set('suits', suits).ai = function (card) {
                                var player = _status.event.player;
                                var target = _status.event.getParent('xinfu_daigong').player;
                                if (get.damageEffect(target, player, player) > 0) return 6.5 - get.value(card);
                                return 0;
                            };
                            'step 2'
                            if (result.bool) {
                                trigger.source.give(result.cards, player, true);
                            }
                            else trigger.cancel();
                        },
                        group: ["xinfu_daigong1"],
                    }
                    lib.skill.xinfu_daigong1 = { trigger: { global: "phaseZhunbeiBegin", }, forced: true, audio: false, content: function () { player.addSkill("xinfu_daigong1_mark"); player.markSkill("xinfu_daigong1_mark"); }, subSkill: { mark: { marktext: "怠攻", mark: true, intro: { name: '怠攻', }, sub: true, }, }, };
                    lib.skill.chongxu = {
                        enable: "phaseUse",
                        usable: 1,
                        content: function () {
                            'step 0'
                            player.chooseToPlayBeatmap(lib.skill.chongxu.beatmaps[0]);
                            'step 1'
                            if (event.isMine()) {
                                result.rank[0] = 'S';
                                result.accuracy = 100;
                            }
                            var score = Math.floor(Math.min(5, result.accuracy / 17));
                            event.score = score;
                            game.log(player, '的演奏评级为', '#y' + result.rank[0], '，获得积分点数', '#y' + score, '分');
                            if (score < 3) {
                                if (score >= 2) player.draw();
                                event.finish();
                                return;
                            }
                            var list = [];
                            if (player.countMark('miaojian') < 2 && player.hasSkill('miaojian')) list.push('修改【妙剑】');
                            if (player.countMark('shhlianhua') < 2 && player.hasSkill('shhlianhua')) list.push('修改【莲华】');
                            if (list.length) {
                                list.push('全部摸牌');
                                player.chooseControl(list).set('prompt', '冲虚：修改技能' + (score == 5 ? '并摸一张牌' : '') + '；或摸' + Math.floor(score / 2) + '张牌');
                            }
                            else event._result = { control: '全部摸牌' };
                            'step 2'
                            var score = event.score;
                            if (result.control != '全部摸牌') {
                                score -= 3;
                                var skill = result.control == '修改【妙剑】' ? 'miaojian' : 'shhlianhua';
                                player.addMark(skill, 1, false);
                                var cc = player.countMark('shhlianhua') + 1 + '级';
                                player.storage.chongxu_mark = '';
                                player.addSkill("chongxu_mark");
                                player.addMark("chongxu_mark", cc);
                                var xx = player.countMark('miaojian') + 1 + '级';
                                player.storage.chongxu_mark2 = '';
                                player.addSkill("chongxu_mark2");
                                player.addMark("chongxu_mark2", xx);
                                game.log(player, '修改了技能', '#g【' + get.translation(skill) + '】');
                            }
                            if (score > 1) player.draw(Math.floor(score / 2));
                        },
                        ai: {
                            order: 10,
                            result: {
                                player: 1,
                            },
                        },
                        subSkill: {
                            mark: { marktext: "莲华", intro: { name: '莲华', }, sub: true, },
                            mark2: { marktext: "妙剑", intro: { name: '妙剑', }, sub: true, },
                        },
                        group: "chongxu_xg",
                        beatmaps: [{ "name": "鳥の詩", "filename": "tori_no_uta", "timeleap": [1047, 3012, 4978, 5469, 5961, 6452, 6698, 7435, 8909, 10875, 12840], "current": -546, "judgebar_height": 0.14, "range1": [86, 110], "range2": [92, 104], "range3": [96, 100], "speed": 25 }, { "name": "竹取飛翔　～ Lunatic Princess", "filename": "taketori_hishou", "timeleap": [1021, 1490, 1959, 2896, 3834, 4537, 4771, 5709, 6646, 7585, 8039, 8494, 9403, 10291, 11180, 11832, 12049, 12920, 13345, 13771, 14196], "current": -500, "judgebar_height": 0.14, "range1": [86, 110], "range2": [92, 104], "range3": [96, 100], "speed": 25, "judgebar_color": "linear-gradient(rgba(240, 120, 123, 1), rgba(230, 115, 113, 1))" }],
                        derivation: "chongxu_faq",
                    }
                    lib.skill.chongxu_xg = {
                        trigger: { global: ["gameDrawEnd"], }, forced: true,
                        content: function () {
                            var cc = player.countMark('shhlianhua') + 1 + '级';
                            player.storage.chongxu_mark = '';
                            player.addSkill("chongxu_mark");
                            player.addMark("chongxu_mark", cc);
                            var xx = player.countMark('miaojian') + 1 + '级';
                            player.storage.chongxu_mark2 = '';
                            player.addSkill("chongxu_mark2");
                            player.addMark("chongxu_mark2", xx);
                        },
                    }
                    lib.skill.bingqing = {
                        audio: 2,
                        trigger: {
                            player: "useCardAfter",
                        },
                        direct: true,
                        filter: function (event, player) {
                            var suit = get.suit(event.card);
                            if (!lib.suit.contains(suit)) return false;
                            var evt = event.getParent('phaseUse');
                            if (!evt || player != evt.player) return false;
                            var list = [], history = player.getHistory('useCard');
                            if (history.length < 2) return false;
                            for (var i of history) {
                                if (i.getParent('phaseUse') != evt) continue;
                                var suit2 = get.suit(i.card);
                                if (!lib.suit.contains(suit2)) continue;
                                if (i != event && suit2 == suit) return false;
                                list.add(suit2);
                            }
                            return list.length > 1 && list.length < 5;
                        },
                        content: function () {
                            'step 0'
                            var suit = get.suit(trigger.card);
                            var evt = event.getParent('phaseUse');
                            var list = [], history = player.getHistory('useCard');
                            for (var i of history) {
                                if (i.getParent('phaseUse') != evt) continue;
                                var suit2 = get.suit(i.card);
                                if (!lib.suit.contains(suit2)) continue;
                                list.add(suit2);
                            };
                            var prompt, filterTarget, ai;
                            switch (list.length) {
                                case 2:
                                    prompt = '令一名角色摸两张牌';
                                    filterTarget = function (card, player, target) {
                                        return true;
                                    };
                                    ai = function (target) {
                                        var player = _status.event.player;
                                        var att = get.attitude(player, target);
                                        if (target.hasSkill('nogain')) att /= 10;
                                        return att / Math.sqrt(Math.min(5, 1 + target.countCards('h')));
                                    }
                                    break;
                                case 3:
                                    prompt = '弃置一名角色区域内的一张牌';
                                    filterTarget = function (card, player, target) {
                                        return target.hasCard(function (card) {
                                            return lib.filter.canBeDiscarded(card, player, target);
                                        }, 'hej');
                                    };
                                    ai = function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, { name: 'guohe_copy' }, player, player);
                                    }
                                    break;
                                case 4:
                                    prompt = '对一名其他角色造成1点伤害';
                                    filterTarget = function (card, player, target) {
                                        return target != player;
                                    };
                                    ai = function (target) {
                                        var player = _status.event.player;
                                        return get.damageEffect(target, player, player);
                                    }
                                    break;
                                default:
                                    event.finish();
                                    return;
                            }
                            event.num = list.length;
                            player.chooseTarget(get.prompt('bingqing'), prompt, filterTarget).set('ai', ai);
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('bingqing', target);
                                event.target = target;
                                event.goto(num);
                            }
                            else event.finish();
                            'step 2'
                            target.draw(2);
                            event.finish();
                            'step 3'
                            player.discardPlayerCard(target, true, 'hej');
                            event.finish();
                            'step 4'
                            target.damage();
                        },
                        group: ["bingqing1"],
                    };
                    lib.skill.bingqing1 = {
                        trigger: { player: 'useCard2', }, forced: true, audio: false,
                        filter: function (event, player) {
                          //  if (event.name == 'phaseUse') return true;
                            var evt=event.getParent('phaseUse');              
                             if(evt.player==player) return true
                          //  if (player != _status.currentPhase) return false; return true;
                        },
                        content: function () {
                            player.addTempSkill("bingqing1_mark");
                            if (!player.storage.bingqing1_mark1) player.storage.bingqing1_mark1 = [];
                            player.storage.bingqing1_mark1.add(get.suit(trigger.card));
                            var str = '';
                            var cc = get.suit(trigger.card);
                            if (player.storage.bingqing1_mark1.contains('heart')) str += '♥️️';
                            if (player.storage.bingqing1_mark1.contains('diamond')) str += '♦️️';
                            if (player.storage.bingqing1_mark1.contains('spade')) str += '♠️️';
                            if (player.storage.bingqing1_mark1.contains('club')) str += '♣️️';
                            player.storage.bingqing1_mark = '';
                            player.addMark("bingqing1_mark", str);
                        },
                        subSkill: {
                            mark: {
                                marktext: '秉清', intro: { name: '秉清', },
                                onremove: function (player) {
                                    player.removeMark('bingqing1_mark1');
                                    delete player.storage.bingqing1_mark1;
                                },
                            },
                        },
                    };
                    lib.skill.remeibu = {
                        audio: "meibu",
                        trigger: {
                            global: "phaseUseBegin",
                        },
                        filter: function (event, player) {
                            return event.player != player && event.player.isAlive() && event.player.inRange(player) && player.countCards('he') > 0;
                        },
                        direct: true,
                        derivation: ["rezhixi"],
                        checkx: function (event, player) {
                            if (get.attitude(player, event.player) >= 0) return false;
                            return event.player.countCards('h') > event.player.hp;
                        },
                        content: function () {
                            "step 0"
                            var check = lib.skill.new_meibu.checkx(trigger, player);
                            player.chooseToDiscard(get.prompt2('remeibu', trigger.player), 'he').set('ai', function (card) {
                                if (_status.event.check) return 6 - get.value(card);
                                return 0;
                            }).set('check', check).set('logSkill', ['remeibu', trigger.player]);
                            "step 1"
                            if (result.bool) {
                                var target = trigger.player;
                                var card = result.cards[0];
                                player.line(target, 'green');
                                player.markAuto('remeibu_gain', [get.suit(card, player)]);
                                player.addTempSkill('remeibu_gain');
                                target.addTempSkill('rezhixi', 'phaseUseEnd');
                                var suit = get.suit(card);
                                var cc = get.translation(suit);
                                target.storage.remeibu_mark = '';
                                target.addTempSkill("remeibu_mark");
                                target.addMark("remeibu_mark", cc);
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            gain: {
                                trigger: {
                                    global: "loseAfter",
                                },
                                forced: true,
                                charlotte: true,
                                popup: false,
                                onremove: true,
                                filter: function (event, player) {
                                    return event.getParent(3).name == 'rezhixi' && player.getStorage('remeibu_gain').contains(get.suit(event.cards[0], event.player)) && get.position(event.cards[0]) == 'd';
                                },
                                content: function () {
                                    player.gain(trigger.cards[0], 'gain2');
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.olhaoshi = {
                        trigger: {
                            player: "phaseDrawBegin2",
                        },
                        filter: function (event, player) {
                            return !event.numFixed;
                        },
                        check: function (event, player) {
                            return (player.countCards('h') + 2 + event.num) <= 5 || game.hasPlayer(function (target) {
                                return !game.hasPlayer(function (current) {
                                    return current != player && current != target && current.countCards('h') < target.countCards('h'); player.unmarkSkill('olhaoshi_mark');
                                }) && get.attitude(player, target) > 0;
                            });
                        },
                        content: function () {
                            trigger.num += 2;
                            player.addTempSkill('olhaoshi_give', 'phaseDrawAfter');
                        },
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            give: {
                                trigger: {
                                    player: "phaseDrawEnd",
                                },
                                forced: true,
                                charlotte: true,
                                popup: false,
                                filter: function (event, player) {
                                    return player.countCards('h') > 5;
                                },
                                content: function () {
                                    'step 0'
                                    var targets = game.filterPlayer(function (target) {
                                        return target != player && !game.hasPlayer(function (current) {
                                            return current != player && current != target && current.countCards('h') < target.countCards('h');
                                        });
                                    }), num = Math.floor(player.countCards('h') / 2);
                                    player.chooseCardTarget({
                                        position: 'h',
                                        filterCard: true,
                                        filterTarget: function (card, player, target) {
                                            return _status.event.targets.contains(target);
                                        },
                                        targets: targets,
                                        selectTarget: targets.length == 1 ? -1 : 1,
                                        selectCard: num,
                                        prompt: '将' + get.cnNumber(num) + '张手牌交给一名手牌数最少的其他角色',
                                        forced: true,
                                        ai1: function (card) {
                                            var goon = false, player = _status.event.player;
                                            for (var i of _status.event.targets) {
                                                if (get.attitude(i, target) > 0 && get.attitude(target, i) > 0) goon = true; break;
                                            }
                                            if (goon) {
                                                if (!player.hasValueTarget(card) || card.name == 'sha' && player.countCards('h', function (cardx) {
                                                    return cardx.name == 'sha' && !ui.selected.cards.contains(cardx);
                                                }) > player.getCardUsable('sha')) return 2;
                                                return Math.max(2, get.value(card) / 4);
                                            }
                                            return 1 / Math.max(1, get.value(card));
                                        },
                                        ai2: function (target) {
                                            return get.attitude(_status.event.player, target);
                                        },
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target, 'green');
                                        target.gain(result.cards, player, 'giveAuto');
                                        player.markAuto('olhaoshi_help', [target]);
                                        player.addTempSkill('olhaoshi_help', { player: 'phaseBeginStart' });
                                        player.unmarkSkill('olhaoshi_mark');
                                        player.storage.olhaoshi_mark = '';
                                        player.addTempSkill("olhaoshi_mark", { player: 'phaseBeginStart' });
                                        player.markSkill("olhaoshi_mark", '', '好施 ' + get.translation(target));
                                    }
                                },
                                sub: true,
                            },
                            help: {
                                trigger: {
                                    target: "useCardToTargeted",
                                },
                                direct: true,
                                charlotte: true,
                                onremove: true,
                                filter: function (event, player) {
                                    if (!player.storage.olhaoshi_help || !player.storage.olhaoshi_help.length) return false;
                                    if (event.card.name != 'sha' && get.type(event.card) != 'trick') return false;
                                    for (var i of player.storage.olhaoshi_help) {
                                        if (i.countCards('h') > 0) return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    if (!event.targets) event.targets = player.storage.olhaoshi_help.slice(0).sortBySeat();
                                    event.target = event.targets.shift();
                                    event.target.chooseCard('h', '好施：是否将一张手牌交给' + get.translation(player) + '？').set('ai', function (card) {
                                        var player = _status.event.player, target = _status.event.getTrigger().player;
                                        if (!_status.event.goon) {
                                            if (get.value(card, player) < 0 || get.value(card, target) < 0) return 1;
                                            return 0;
                                        }
                                        var cardx = _status.event.getTrigger().card;
                                        if (card.name == 'shan' && get.tag(cardx, 'respondShan') && target.countCards('h', 'shan') < player.countCards('h', 'shan')) return 2;
                                        if (card.name == 'sha' && (cardx.name == 'juedou' || get.tag(card, 'respondSha') && (target.countCards('h', 'sha') < player.countCards('h', 'sha')))) return 2;
                                        if (get.value(card, target) > get.value(card, player) || target.getUseValue(card) > player.getUseValue(card)) return 1;
                                        if (player.hasSkillTag('noh')) return 0.5 / Math.max(1, get.value(card, player));
                                        return 0;
                                    }).set('goon', get.attitude(event.target, player) > 0);
                                    'step 1'
                                    if (result.bool) {
                                        target.logSkill('olhaoshi_help', player);
                                        player.gain(result.cards, target, 'giveAuto');
                                    }
                                    if (targets.length) event.goto(0);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.decadexianzhen = {
                        audio: 2,
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player.canCompare(target);
                        },
                        filter: function (event, player) {
                            return player.countCards('h') > 0 && !player.hasSkill('decadexianzhen2') && !player.hasSkill('decadexianzhen3');
                        },
                        content: function () {
                            "step 0"
                            player.chooseToCompare(target);
                            "step 1"
                            if (result.bool) {
                                player.storage.decadexianzhen2 = target;
                                player.addTempSkill('decadexianzhen2');
                                target.addTempSkill('decadexianzhen_mark')
                            }
                            else {
                                player.addTempSkill('decadexianzhen3');
                                player.addTempSkill('decadexianzhen_mark2');
                            }
                        },
                        ai: {
                            order: function (name, player) {
                                var cards = player.getCards('h');
                                if (player.countCards('h', 'sha') == 0) {
                                    return 1;
                                }
                                for (var i = 0; i < cards.length; i++) {
                                    if (cards[i].name != 'sha' && get.number(cards[i]) > 11 && get.value(cards[i]) < 7) {
                                        return 9;
                                    }
                                }
                                return get.order({ name: 'sha' }) - 1;
                            },
                            result: {
                                player: function (player) {
                                    if (player.countCards('h', 'sha') > 0) return 0;
                                    var num = player.countCards('h');
                                    if (num > player.hp) return 0;
                                    if (num == 1) return -2;
                                    if (num == 2) return -1;
                                    return -0.7;
                                },
                                target: function (player, target) {
                                    var num = target.countCards('h');
                                    if (num == 1) return -1;
                                    if (num == 2) return -0.7;
                                    return -0.5
                                },
                            },
                            threaten: 1.3,
                        },
                        subSkill: {
                            mark: { marktext: "陷阵", mark: true, intro: { name: "陷阵", content: '你对其使用牌无次数限制和距离限制', }, sub: true, },
                            mark2: { marktext: "陷阵 没赢", mark: true, intro: { name: "陷阵 没赢", content: '不能使用牌', }, sub: true, },
                        },
                    }



                    lib.skill.xinxianzhen = {
                        audio: "xianzhen",
                        inherit: "xianzhen",
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player.canCompare(target);
                        },
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseToCompare(target);
                            "step 1"
                            if (result.bool) {
                                player.storage[event.name] = target;
                                player.addTempSkill(event.name + 2);
                                target.addTempSkill('xinxianzhen_mark')
                            }
                            else {
                                player.addTempSkill(event.name + 3);
                                player.addTempSkill('xinxianzhen_mark2');
                            }
                        },
                        ai: {
                            order: function (name, player) {
                                var cards = player.getCards('h');
                                if (player.countCards('h', 'sha') == 0) {
                                    return 1;
                                }
                                for (var i = 0; i < cards.length; i++) {
                                    if (cards[i].name != 'sha' && get.number(cards[i]) > 11 && get.value(cards[i]) < 7) {
                                        return 9;
                                    }
                                }
                                return get.order({ name: 'sha' }) - 1;
                            },
                            result: {
                                player: function (player) {
                                    if (player.countCards('h', 'sha') > 0) return 0;
                                    var num = player.countCards('h');
                                    if (num > player.hp) return 0;
                                    if (num == 1) return -2;
                                    if (num == 2) return -1;
                                    return -0.7;
                                },
                                target: function (player, target) {
                                    var num = target.countCards('h');
                                    if (num == 1) return -1;
                                    if (num == 2) return -0.7;
                                    return -0.5
                                },
                            },
                            threaten: 1.3,
                        },
                        subSkill: {
                            mark: { marktext: "陷阵", mark: true, intro: { name: "陷阵", content: '你对其使用牌无次数限制和距离限制', }, sub: true, },
                            mark2: { marktext: "陷阵 没赢", mark: true, intro: { name: "陷阵 没赢", content: '不能使用牌', }, sub: true, },
                        },
                    }
                    lib.skill.rexianzhen = {
                        audio: 2,
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player.canCompare(target);
                        },
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseToCompare(target);
                            "step 1"
                            if (result.player && get.name(result.player, player) == 'sha') player.addTempSkill('rexianzhen4');
                            if (result.bool) {
                                player.storage[event.name] = target;
                                player.addTempSkill(event.name + 2);
                                target.addTempSkill('rexianzhen_mark')
                            }
                            else {
                                player.addTempSkill(event.name + 3);
                                player.addTempSkill('rexianzhen_mark2');
                            }
                        },
                        ai: {
                            order: function (name, player) {
                                var cards = player.getCards('h');
                                if (player.countCards('h', 'sha') == 0) {
                                    return 1;
                                }
                                for (var i = 0; i < cards.length; i++) {
                                    if (cards[i].name != 'sha' && get.number(cards[i]) > 11 && get.value(cards[i]) < 7) {
                                        return 9;
                                    }
                                }
                                return get.order({ name: 'sha' }) - 1;
                            },
                            result: {
                                player: function (player) {
                                    if (player.countCards('h', 'sha') > 0) return 0;
                                    var num = player.countCards('h');
                                    if (num > player.hp) return 0;
                                    if (num == 1) return -2;
                                    if (num == 2) return -1;
                                    return -0.7;
                                },
                                target: function (player, target) {
                                    var num = target.countCards('h');
                                    if (num == 1) return -1;
                                    if (num == 2) return -0.7;
                                    return -0.5
                                },
                            },
                            threaten: 1.3,
                        },
                        subSkill: {
                            mark: { marktext: "陷阵", mark: true, intro: { name: "陷阵", content: '你对其使用牌无次数限制和距离限制', }, sub: true, },
                            mark2: { marktext: "陷阵 没赢", mark: true, intro: { name: "陷阵 没赢", content: '不能使用牌', }, sub: true, },
                        },
                    }
                    lib.skill.jiaozhao = {
                        mod: {
                            targetEnabled: function (card, player, target) {
                                if (card.storage && card.storage.jiaozhao && card.storage.jiaozhao == target) return false;
                            },
                        },
                        enable: "phaseUse",
                        usable: 1,
                        audio: 2,
                        check: function (card) {
                            return 8 - get.value(card);
                        },
                        filter: function (event, player) {
                            return player.countMark('xindanxin') < 2 && player.countCards('h') > 0;
                        },
                        filterCard: true,
                        discard: false,
                        lose: false,
                        delay: false,
                        locked: false,
                        content: function () {
                            'step 0'
                            player.showCards(cards);
                            'step 1'
                            if (player.countMark('xindanxin') > 1) {
                                event.target = player;
                            }
                            else {
                                var targets = game.filterPlayer();
                                targets.remove(player);
                                targets.sort(function (a, b) {
                                    return Math.max(1, get.distance(player, a)) - Math.max(1, get.distance(player, b));
                                });
                                var distance = Math.max(1, get.distance(player, targets[0]));
                                for (var i = 1; i < targets.length; i++) {
                                    if (Math.max(1, get.distance(player, targets[i])) > distance) {
                                        targets.splice(i); break;
                                    }
                                }
                                player.chooseTarget('请选择【矫诏】的目标', true, function (card, player, target) {
                                    return _status.event.targets.contains(target);
                                }).set('ai', function (target) {
                                    return get.attitude(_status.event.player, target);
                                }).set('targets', targets);
                            }
                            'step 2'
                            if (!event.target) {
                                event.target = result.targets[0];
                                player.line(result.targets, 'green');
                            }
                            if (!event.target) {
                                event.finish();
                                return;
                            }
                            var list = [];
                            for (var i = 0; i < lib.inpile.length; i++) {
                                var name = lib.inpile[i];
                                if (name == 'sha') {
                                    list.push(['基本', '', 'sha']);
                                    for (var j of lib.inpile_nature) list.push(['基本', '', 'sha', j]);
                                }
                                else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                else if (player.countMark('xindanxin') > 0 && get.type(name) == 'trick') list.push(['锦囊', '', name]);
                            }
                            event.target.chooseButton(['矫诏', [list, 'vcard']], true).set('ai', function (button) {
                                var player = _status.event.getParent().player, card = {
                                    name: button.link[2],
                                    nature: button.link[3],
                                    storage: {
                                        jiaozhao: player,
                                    }
                                };
                                return player.getUseValue(card, null, true) * _status.event.att;
                            }).set('att', get.attitude(event.target, player) > 0 ? 1 : -1);
                            'step 3'
                            var chosen = result.links[0][2];
                            var nature = result.links[0][3];
                            var fakecard = {
                                name: chosen,
                                storage: { jiaozhao: player },
                            };
                            if (nature) fakecard.nature = nature;
                            event.target.showCards(game.createCard({
                                name: chosen,
                                nature: nature,
                                suit: cards[0].suit,
                                number: cards[0].number,
                            }), get.translation(event.target) + '声明了' + get.translation(chosen));
                            player.storage.jiaozhao = cards[0];
                            player.storage.jiaozhao_card = fakecard;
                            game.broadcastAll(function (name, card) {
                                lib.skill.jiaozhao2.viewAs = fakecard;
                                card.addGaintag('jiaozhao');
                            }, fakecard, cards[0]);
                            player.addTempSkill('jiaozhao2', 'phaseUseEnd');
                            player.storage.jiaozhao_mark = '';
                            player.addTempSkill("jiaozhao_mark");
                            player.markSkill("jiaozhao_mark", '', '矫诏-' + get.translation(chosen));
                        },
                        ai: {
                            order: 9,
                            result: {
                                player: 1,
                            },
                        },
                        group: "jiaozhao3",
                        subSkill: { mark: { intro: {}, sub: true, }, },
                    }
                    lib.skill.rejiaozhao = {
                        audio: 2,
                        enable: "phaseUse",
                        group: "rejiaozhao_base",
                        mod: {
                            targetEnabled: function (card, player, target) {
                                if (player == target && card.storage && card.storage.rejiaozhao) return false;
                            },
                        },
                        filter: function (event, player) {
                            return (player.hasMark('redanxin') && player.countCards('h') && player.getStorage('rejiaozhao_clear').length < player.countMark('redanxin'));
                        },
                        chooseButton: {
                            dialog: function (event, player) {
                                var list = [], storage = player.getStorage('rejiaozhao_clear');
                                for (var name of lib.inpile) {
                                    var type = get.type(name);
                                    if ((type == 'basic' || type == 'trick') && !storage.contains(type)) {
                                        list.push([type, '', name]);
                                        if (name == 'sha') {
                                            for (var nature of lib.inpile_nature) list.push([type, '', name, nature]);
                                        }
                                    }
                                }
                                return ui.create.dialog('惮心', [list, 'vcard']);
                            },
                            filter: function (button, player) {
                                var card = { name: button.link[2], nature: button.link[3] };
                                if (player.countMark('redanxin') < 2) card.storage = { rejiaozhao: true };
                                var evt = _status.event.getParent();
                                return evt.filterCard(card, player, evt);
                            },
                            check: function (button) {
                                var card = { name: button.link[2], nature: button.link[3] }, player = _status.event.player;
                                if (player.countMark('redanxin') < 2) card.storage = { rejiaozhao: true };
                                return player.getUseValue(card, null, true);
                            },
                            backup: function (links, player) {
                                var next = {
                                    audio: 'redanxin',
                                    viewAs: { name: links[0][2], nature: links[0][3] },
                                    filterCard: true,
                                    position: 'h',
                                    popname: true,
                                    ai1: (card) => 8 - get.value(card),
                                    onuse: function (result, player) {
                                        player.addTempSkill('rejiaozhao_clear', 'phaseUseAfter');
                                        player.markAuto('rejiaozhao_clear', [get.type(result.card)])
                                    },
                                }
                                if (player.countMark('redanxin') < 2) next.viewAs.storage = { rejiaozhao: true };
                                return next;
                            },
                            prompt: function (links) {
                                return '将一张手牌当做' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '使用';
                            },
                        },
                        ai: {
                            order: 6,
                            result: {
                                player: 1,
                            },
                        },
                        derivation: ["rejiaozhao_lv2", "rejiaozhao_lv3"],
                        subSkill: {
                            clear: {
                                onremove: true,
                                sub: true,
                            },
                            base: {
                                audio: "rejiaozhao",
                                enable: "phaseUse",
                                usable: 1,
                                filter: function (event, player) {
                                    if (player.hasMark('redanxin')) return false;
                                    return player.countCards('h') > 0 && game.hasPlayer((current) => current != player);
                                },
                                filterCard: true,
                                position: "h",
                                discard: false,
                                lose: false,
                                check: function (card) {
                                    return 1 / Math.max(1, _status.event.player.getUseValue(card));
                                },
                                prompt: "出牌阶段限一次。你可以展示一张手牌，并令一名距离你最近的角色选择一种基本牌或普通锦囊牌的牌名。你可将此牌当做其声明的牌使用直到此阶段结束（你不是此牌的合法目标）。",
                                content: function () {
                                    'step 0'
                                    player.showCards(cards);
                                    'step 1'
                                    var targets = game.filterPlayer();
                                    targets.remove(player);
                                    targets.sort(function (a, b) {
                                        return Math.max(1, get.distance(player, a)) - Math.max(1, get.distance(player, b));
                                    });
                                    var distance = Math.max(1, get.distance(player, targets[0]));
                                    for (var i = 1; i < targets.length; i++) {
                                        if (Math.max(1, get.distance(player, targets[i])) > distance) {
                                            targets.splice(i); break;
                                        }
                                    }
                                    player.chooseTarget('请选择【矫诏】的目标', true, function (card, player, target) {
                                        return _status.event.targets.contains(target);
                                    }).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target);
                                    }).set('targets', targets);
                                    'step 2'
                                    if (!result.bool) {
                                        event.finish();
                                        return;
                                    }
                                    var target = result.targets[0];
                                    event.target = target;
                                    var list = [];
                                    for (var i = 0; i < lib.inpile.length; i++) {
                                        var name = lib.inpile[i];
                                        if (name == 'sha') {
                                            list.push(['基本', '', 'sha']);
                                            for (var j of lib.inpile_nature) list.push(['基本', '', 'sha', j]);
                                        }
                                        else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                        else if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                    }
                                    target.chooseButton(['矫诏', [list, 'vcard']], true).set('ai', function (button) {
                                        var player = _status.event.getParent().player, card = {
                                            name: button.link[2],
                                            nature: button.link[3],
                                            storage: {
                                                rejiaozhao: true,
                                            }
                                        };
                                        return player.getUseValue(card, null, true) * _status.event.att;
                                    }).set('att', get.attitude(event.target, player) > 0 ? 1 : -1);
                                    'step 3'
                                    var chosen = result.links[0][2];
                                    var nature = result.links[0][3];
                                    var fakecard = {
                                        name: chosen,
                                        storage: { rejiaozhao: true },
                                    };
                                    if (nature) fakecard.nature = nature;
                                    event.target.showCards(game.createCard({
                                        name: chosen,
                                        nature: nature,
                                        suit: cards[0].suit,
                                        number: cards[0].number,
                                    }), get.translation(event.target) + '声明了' + get.translation(chosen));
                                    player.storage.rejiaozhao_viewas = fakecard;
                                    cards[0].addGaintag('rejiaozhao')
                                    player.addTempSkill('rejiaozhao_viewas', 'phaseUseEnd');
                                    var cc = get.translation(chosen);
                                    player.storage.rejiaozhao_mark = '';
                                    player.addTempSkill("rejiaozhao_mark");
                                    player.markSkill("rejiaozhao_mark", '', '矫诏-' + cc);
                                },
                                ai: {
                                    order: 9,
                                    result: {
                                        player: 1,
                                    },
                                },
                                sub: true,
                            },
                            backup: {
                                audio: "rejiaozhao",
                                sub: true,
                            },
                            mark: { intro: {}, sub: true, },
                            viewas: {
                                enable: "phaseUse",
                                mod: {
                                    targetEnabled: function (card, player, target) {
                                        if (player == target && card.storage && card.storage.rejiaozhao) return false;
                                    },
                                },
                                filter: function (event, player) {
                                    if (!player.storage.rejiaozhao_viewas) return false;
                                    var cards = player.getCards('h', function (card) {
                                        return card.hasGaintag('rejiaozhao');
                                    });
                                    if (!cards.length) return false;
                                    if (!game.checkMod(cards[0], player, 'unchanged', 'cardEnabled2', player)) return false;
                                    var card = get.autoViewAs(player.storage.rejiaozhao_viewas, cards);
                                    return event.filterCard(card, player, event);
                                },
                                viewAs: function (cards, player) {
                                    return player.storage.rejiaozhao_viewas;
                                },
                                filterCard: function (card) {
                                    return card.hasGaintag('rejiaozhao');
                                },
                                selectCard: -1,
                                position: "h",
                                popname: true,
                                prompt: function () {
                                    return '将“矫诏”牌当做' + get.translation(_status.event.player.storage.rejiaozhao_viewas) + '使用';
                                },
                                onremove: function (player) {
                                    player.removeGaintag('rejiaozhao');
                                    delete player.storage.rejiaozhao_viewas;
                                },
                                ai: {
                                    order: 8,
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.olhaoshi = {
                        trigger: {
                            player: "phaseDrawBegin2",
                        },
                        filter: function (event, player) {
                            return !event.numFixed;
                        },
                        check: function (event, player) {
                            return (player.countCards('h') + 2 + event.num) <= 5 || game.hasPlayer(function (target) {
                                return !game.hasPlayer(function (current) {
                                    return current != player && current != target && current.countCards('h') < target.countCards('h'); player.unmarkSkill('olhaoshi_mark');
                                }) && get.attitude(player, target) > 0;
                            });
                        },
                        content: function () {
                            trigger.num += 2;
                            player.addTempSkill('olhaoshi_give', 'phaseDrawAfter');
                        },
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            give: {
                                trigger: {
                                    player: "phaseDrawEnd",
                                },
                                forced: true,
                                charlotte: true,
                                popup: false,
                                filter: function (event, player) {
                                    return player.countCards('h') > 5;
                                },
                                content: function () {
                                    'step 0'
                                    var targets = game.filterPlayer(function (target) {
                                        return target != player && !game.hasPlayer(function (current) {
                                            return current != player && current != target && current.countCards('h') < target.countCards('h');
                                        });
                                    }), num = Math.floor(player.countCards('h') / 2);
                                    player.chooseCardTarget({
                                        position: 'h',
                                        filterCard: true,
                                        filterTarget: function (card, player, target) {
                                            return _status.event.targets.contains(target);
                                        },
                                        targets: targets,
                                        selectTarget: targets.length == 1 ? -1 : 1,
                                        selectCard: num,
                                        prompt: '将' + get.cnNumber(num) + '张手牌交给一名手牌数最少的其他角色',
                                        forced: true,
                                        ai1: function (card) {
                                            var goon = false, player = _status.event.player;
                                            for (var i of _status.event.targets) {
                                                if (get.attitude(i, target) > 0 && get.attitude(target, i) > 0) goon = true; break;
                                            }
                                            if (goon) {
                                                if (!player.hasValueTarget(card) || card.name == 'sha' && player.countCards('h', function (cardx) {
                                                    return cardx.name == 'sha' && !ui.selected.cards.contains(cardx);
                                                }) > player.getCardUsable('sha')) return 2;
                                                return Math.max(2, get.value(card) / 4);
                                            }
                                            return 1 / Math.max(1, get.value(card));
                                        },
                                        ai2: function (target) {
                                            return get.attitude(_status.event.player, target);
                                        },
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target, 'green');
                                        target.gain(result.cards, player, 'giveAuto');
                                        player.markAuto('olhaoshi_help', [target]);
                                        player.addTempSkill('olhaoshi_help', { player: 'phaseBeginStart' });
                                        player.unmarkSkill('olhaoshi_mark');
                                        player.storage.olhaoshi_mark = '';
                                        player.addTempSkill("olhaoshi_mark", { player: 'phaseBeginStart' });
                                        player.markSkill("olhaoshi_mark", '', '好施 ' + get.translation(target));
                                    }
                                },
                                sub: true,
                            },
                            help: {
                                trigger: {
                                    target: "useCardToTargeted",
                                },
                                direct: true,
                                charlotte: true,
                                onremove: true,
                                filter: function (event, player) {
                                    if (!player.storage.olhaoshi_help || !player.storage.olhaoshi_help.length) return false;
                                    if (event.card.name != 'sha' && get.type(event.card) != 'trick') return false;
                                    for (var i of player.storage.olhaoshi_help) {
                                        if (i.countCards('h') > 0) return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    if (!event.targets) event.targets = player.storage.olhaoshi_help.slice(0).sortBySeat();
                                    event.target = event.targets.shift();
                                    event.target.chooseCard('h', '好施：是否将一张手牌交给' + get.translation(player) + '？').set('ai', function (card) {
                                        var player = _status.event.player, target = _status.event.getTrigger().player;
                                        if (!_status.event.goon) {
                                            if (get.value(card, player) < 0 || get.value(card, target) < 0) return 1;
                                            return 0;
                                        }
                                        var cardx = _status.event.getTrigger().card;
                                        if (card.name == 'shan' && get.tag(cardx, 'respondShan') && target.countCards('h', 'shan') < player.countCards('h', 'shan')) return 2;
                                        if (card.name == 'sha' && (cardx.name == 'juedou' || get.tag(card, 'respondSha') && (target.countCards('h', 'sha') < player.countCards('h', 'sha')))) return 2;
                                        if (get.value(card, target) > get.value(card, player) || target.getUseValue(card) > player.getUseValue(card)) return 1;
                                        if (player.hasSkillTag('noh')) return 0.5 / Math.max(1, get.value(card, player));
                                        return 0;
                                    }).set('goon', get.attitude(event.target, player) > 0);
                                    'step 1'
                                    if (result.bool) {
                                        target.logSkill('olhaoshi_help', player);
                                        player.gain(result.cards, target, 'giveAuto');
                                    }
                                    if (targets.length) event.goto(0);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.dcjianying = {
                        audio: 2,
                        locked: false,
                        mod: {
                            aiOrder: function (player, card, num) {
                                if (typeof card == 'object' && player.isPhaseUsing()) {
                                    var evt = lib.skill.dcjianying.getLastUsed(player);
                                    if (evt && evt.card && (get.suit(evt.card) && get.suit(evt.card) == get.suit(card) || evt.card.number && evt.card.number == get.number(card))) {
                                        return num + 10;
                                    }
                                }
                            },
                        },
                        trigger: {
                            player: "useCard",
                        },
                        frequent: true,
                        getLastUsed: function (player, event) {
                            var history = player.getAllHistory('useCard');
                            var index;
                            if (event) index = history.indexOf(event) - 1;
                            else index = history.length - 2;
                            if (index >= 0) return history[index];
                            return false;
                        },
                        filter: function (event, player) {
                            var evt = lib.skill.dcjianying.getLastUsed(player, event);
                            if (!evt || !evt.card) return false;
                            return get.suit(evt.card) != 'none' && get.suit(evt.card) == get.suit(event.card) ||
                                typeof get.number(evt.card, false) == 'number' && get.number(evt.card, false) == get.number(event.card);
                        },
                        content: function () {
                            player.draw();
                        },
                        group: "dcjianying2",
                    }
                    lib.skill.dcjianying2 = {
                        trigger: { player: "useCard2", }, forced: true,
                        content: function () {
                            var suit = get.suit(trigger.card, player);
                            if (suit == undefined) suit = '无色';
                            var number = get.number(trigger.card, player);
                            if (number == undefined) number = ''; else { if ([1, 11, 12, 13].contains(number)) { number = { '1': 'A', '11': 'J', '12': 'Q', '13': 'K' }[number]; } }
                            var cc = get.translation(suit) + number;
                            player.storage.dcjianying2_mark = '';
                            player.addSkill("dcjianying2_mark");
                            player.addMark("dcjianying2_mark", cc);
                        },
                        subSkill: { mark: { marktext: "渐营", intro: { name: '渐营' }, sub: true, }, },
                    }
                    //杨怡 狷狭
                    lib.skill.oljuanxia = {
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt2('oljuanxia'), lib.filter.notMe).set('ai', function (target) {
                                var player = _status.event.player, list = [];
                                for (var name of lib.inpile) {
                                    var info = lib.card[name];
                                    if (!info || info.type != 'trick' || info.notarget || (info.selectTarget && info.selectTarget != 1)) continue;
                                    if (!player.canUse(name, target)) continue;
                                    var eff = get.effect(target, { name: name }, player, player)
                                    if (eff > 0) list.push(eff);
                                }
                                list.sort().reverse();
                                if (!list.length) return 0;
                                return list[0] + (list[1] || 0) + (list[2] || 0);
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('oljuanxia', target);
                            }
                            else event.finish();
                            'step 2'
                            var list = [];
                            for (var name of lib.inpile) {
                                var info = lib.card[name];
                                if (!info || info.type != 'trick' || info.notarget || (info.selectTarget && info.selectTarget != 1)) continue;
                                list.push(name);
                            }
                            if (!list.length) event.finish();
                            else {
                                event.list = list;
                                event.count = 0;
                            }
                            'step 3'
                            var list = event.list.filter(function (name) {
                                return player.canUse(name, target);
                            });
                            if (list.length) {
                                var next = player.chooseButton(['视为对' + get.translation(target) + '使用一张牌', [list, 'vcard']]).set('ai', function (button) {
                                    var evt = _status.event.getParent();
                                    return get.effect(evt.target, { name: button.link[2] }, evt.player, evt.player);
                                });
                                if (event.count == 0) next.set('forced', true);
                            }
                            else {
                                event.stopped = true;
                                event.goto(5);
                            }
                            'step 4'
                            if (result.bool) {
                                event.count++;
                                target.addMark('oljuanxia_mark')
                                var name = result.links[0][2];
                                event.list.remove(name);
                                player.useCard({ name: name, isCard: true }, target, false);
                            }
                            else event.stopped = true;
                            'step 5'
                            if (target.isIn() && event.count > 0) {
                                if (event.count < 3 && !event.stopped && event.list.length > 0) event.goto(3);
                                else {
                                    target.addTempSkill('oljuanxia_counter', { player: 'phaseAfter' });
                                    if (!target.storage.oljuanxia_counter) target.storage.oljuanxia_counter = {};
                                    if (!target.storage.oljuanxia_counter[player.playerid]) target.storage.oljuanxia_counter[player.playerid] = 0;
                                    target.storage.oljuanxia_counter[player.playerid] += event.count;
                                }
                            }
                        },
                        subSkill: {
                            mark: { marktext: '狷侠', intro: { content: "回合结束后使用#张杀", }, sub: true, },
                            counter: {
                                trigger: {
                                    player: "phaseEnd",
                                },
                                forced: true,
                                charlotte: true,
                                onremove: true,
                                filter: function (event, player) {
                                    var map1 = (_status.connectMode ? lib.playerOL : game.playerMap), map2 = player.storage.oljuanxia_counter;
                                    if (!map2) return false;
                                    for (var i in map2) {
                                        if (map1[i] && map1[i].isIn() && player.canUse('sha', map1[i], false)) return true;
                                    }
                                    return false;
                                },
                                logTarget: function (event, player) {
                                    var list = [];
                                    var map1 = (_status.connectMode ? lib.playerOL : game.playerMap), map2 = player.storage.oljuanxia_counter;
                                    if (!map2) return false;
                                    for (var i in map2) {
                                        if (map1[i] && map1[i].isIn()) list.push(map1[i]);
                                    }
                                    return list;
                                },
                                content: function () {
                                    'step 0'
                                    var list = [];
                                    var map1 = (_status.connectMode ? lib.playerOL : game.playerMap), map2 = player.storage.oljuanxia_counter;
                                    if (!map2) return false;
                                    for (var i in map2) {
                                        if (map1[i] && map1[i].isIn()) list.push(map1[i]);
                                    }
                                    list.sortBySeat();
                                    event.num = 0;
                                    event.targets = list;
                                    'step 1'
                                    var target = targets[num];
                                    event.target = target;
                                    if (target.isIn() && player.canUse('sha', target, false)) player.chooseBool('狷狭：是否视为对' + get.translation(target) + '依次使用' + get.cnNumber(player.storage.oljuanxia_counter[target.playerid]) + '张【杀】？').set('goon', get.effect(target, { name: 'sha' }, player, player) > 0).set('ai', () => _status.event.goon);
                                    'step 2'
                                    event.num++;
                                    if (result.bool) event.count = player.storage.oljuanxia_counter[target.playerid];
                                    else if (event.num < targets.length) event.goto(1);
                                    else event.finish();
                                    'step 3'
                                    event.count--;
                                    player.removeMark('oljuanxia_mark');
                                    if (player.canUse('sha', target, false)) player.useCard({ name: 'sha', isCard: true }, target, false);
                                    if (event.count > 0) event.redo();
                                    else if (event.num < targets.length) event.goto(1);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.zhenge = {
                        audio: 2,
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('zhenge'), '令一名角色的攻击范围+1').set('ai', function (target) {
                                var player = _status.event.player, att = get.attitude(player, target)
                                if (att > 0) {
                                    if (!target.hasMark('zhenge_effect')) att *= 1.5;
                                    if (!game.hasPlayer(function (current) {
                                        return get.distance(target, current, 'attack') > 2;
                                    })) {
                                        var usf = Math.max.apply(Math, function (current) {
                                            if (target.canUse('sha', current, false)) return get.effect(current, { name: 'sha' }, target, player);
                                            return 0;
                                        });
                                        return att + usf;
                                    }
                                    return att;
                                }
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('zhenge', target);
                                target.addSkill('zhenge_effect');
                                if (target.countMark('zhenge_effect') < 5) target.addMark('zhenge_effect', 1, false);
                                if (!game.hasPlayer(function (current) {
                                    return current != target && !target.inRange(current);
                                })) {
                                    player.chooseTarget('是否令' + get.translation(target) + '视为对另一名角色使用【杀】？', function (card, player, target) {
                                        return _status.event.source.canUse('sha', target);
                                    }).set('source', target).set('ai', function (target) {
                                        var evt = _status.event;
                                        return get.effect(target, { name: 'sha' }, evt.source, evt.player);
                                    });
                                }
                                else {
                                    game.delayx();
                                    event.finish();
                                }
                            }
                            else event.finish();
                            'step 2'
                            if (result.bool) {
                                target.useCard({ name: 'sha', isCard: true }, result.targets[0], false);
                            }
                            'step 3'
                            game.delayx();
                        },
                        subSkill: {
                            effect: {
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    attackRange: function (player, num) {
                                        return num + player.countMark('zhenge_effect');
                                    },
                                },
                                mark: true,
                                marktext: "枕戈 范围+",
                                intro: {
                                    content: "攻击范围+#",
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.qimei = {
                        audio: 2,
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('qimei'), '选择一名其他角色并获得“齐眉”效果', lib.filter.notMe).set('', function (target) {
                                var player = _status.event.player;
                                return get.attitude(player, target) / (Math.abs(player.countCards('h') + 2 - target.countCards('h')) + 1)
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('qimei', target);
                                player.storage.qimei_draw = target;
                                player.addTempSkill('qimei_draw', { player: 'phaseBegin' });
                                player.storage.qimei_mark = '';
                                player.addTempSkill('qimei_mark', { player: 'phaseBegin' });
                                player.markSkill("qimei_mark", '', '齐眉 ' + get.translation(target));
                                game.delayx();
                            }
                        },
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            draw: {
                                audio: "qimei",
                                charlotte: true,
                                forced: true,
                                trigger: {
                                    global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter", "loseAfter", "gainAfter", "addToExpansionAfter"],
                                },
                                logTarget: function (event, player) {
                                    return player.storage.qimei_draw;
                                },
                                usable: 1,
                                filter: function (event, player) {
                                    var target = player.storage.qimei_draw;
                                    if (!target || !target.isIn()) return false;
                                    if (event.name != 'gain' || (event.player != player && event.player != target)) {
                                        var evt1 = event.getl(player);
                                        if (!evt1 || !evt1.hs || !evt1.hs.length) {
                                            var evt2 = event.getl(target);
                                            if (!evt2 || !evt2.hs || !evt2.hs.length) return false;
                                        }
                                    }
                                    return player.countCards('h') == target.countCards('h');
                                },
                                content: function () {
                                    if (trigger.delay === false) game.delayx();
                                    var evt1 = trigger.getl(player);
                                    if ((trigger.name == 'gain' && player == trigger.player) || (evt1 && evt1.hs && evt1.hs.length)) player.storage.qimei_draw.draw();
                                    var evt2 = trigger.getl(player.storage.qimei_draw);
                                    if ((trigger.name == 'gain' && player == player.storage.qimei_draw) || evt2 && evt2.hs && evt2.hs.length) player.draw();
                                },
                                group: "qimei_hp",
                                onremove: true,
                                sub: true,
                            },
                            hp: {
                                audio: "qimei",
                                trigger: {
                                    global: "changeHp",
                                },
                                charlotte: true,
                                forced: true,
                                logTarget: function (event, player) {
                                    return player.storage.qimei_draw;
                                },
                                usable: 1,
                                filter: function (event, player) {
                                    var target = player.storage.qimei_draw;
                                    if (!target || !target.isIn()) return false;
                                    if (player != event.player && target != event.player) return false;
                                    return player.hp == target.hp;
                                },
                                content: function () {
                                    game.delayx();
                                    (player == trigger.player ? player.storage.qimei_draw : player).draw();
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.ybzhuiji = {
                        audio: 2,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            var list = ['摸两张牌，并于出牌阶段结束时失去1点体力'];
                            if (player.isDamaged()) list.push('回复1点体力，并于出牌阶段结束时弃置两张牌');
                            player.chooseControl('cancel2').set('choiceList', list).set('prompt', get.prompt('ybzhuiji')).set('ai', function () {
                                var player = _status.event.player;
                                if (player.isDamaged() && player.countCards('h', 'tao') < player.getDamagedHp()) return 1;
                                return 'cancel2';
                            });
                            'step 1'
                            if (result.control != 'cancel2') {
                                if (result.index == 0) player.draw(2);
                                else player.recover();
                                player.addTempSkill('ybzhuiji_' + result.index, 'phaseUseAfter');
                            }
                        },
                        subSkill: {
                            "0": {
                                trigger: {
                                    player: "phaseUseEnd",
                                },
                                mark: true,
                                marktext: '追姬 摸牌',
                                intro: { name: '追姬 摸牌', content: 'mark', },
                                forced: true,
                                charlotte: true,
                                content: function () {
                                    player.loseHp();
                                },
                                sub: true,
                            },
                            "1": {
                                trigger: {
                                    player: "phaseUseEnd",
                                },
                                mark: true,
                                marktext: '追姬 回血',
                                intro: { name: '追姬 回血', content: 'mark', },
                                forced: true,
                                charlotte: true,
                                content: function () {
                                    player.chooseToDiscard('he', 2, true);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.xunyi = {
                        audio: 2,
                        trigger: {
                            global: ["phaseBefore", "dieAfter"],
                            player: "enterGame",
                        },
                        direct: true,
                        filter: function (event, player) {
                            if (event.name == 'die') return event.player == player.storage.xunyi2;
                            return !player.storage.xunyi2 && (event.name != 'phase' || game.phaseNumber == 0);
                        },
                        content: function () {
                            'step 0'
                            player.unmarkSkill('xunyi_mark');
                            player.removeSkill('xunyi2');
                            player.chooseTarget(lib.filter.notMe, get.prompt2('xunyi')).set('ai', function (target) {
                                var player = _status.event.player;
                                return Math.max(1 + get.attitude(player, target) * get.threaten(target), Math.random());
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('xunyi', target);
                                player.storage.xunyi2 = target;
                                player.addSkill('xunyi2');
                                player.storage.xunyi_mark = '';
                                player.addSkill("xunyi_mark");
                                player.markSkill("xunyi_mark", '', '殉义 ' + get.translation(target));
                            }
                        },
                        subSkill: { mark: { intro: {}, sub: true, }, },
                    }
                    lib.skill.xunyi2 = {
                        audio: "xunyi",
                        trigger: {
                            global: "damageSource",
                        },
                        forced: true,
                        charlotte: true,
                        filter: function (event, player) {
                            var list = [player, player.storage.xunyi2];
                            return list.contains(event.source) && !list.contains(event.player);
                        },
                        logTarget: function (event, player) {
                            return player.storage.xunyi2;
                        },
                        content: function () {
                            (player == trigger.source ? player.storage.xunyi2 : player).draw();
                        },
                        group: "xunyi3",
                    }
                    lib.skill.zhiwei = {
                        audio: 2,
                        trigger: {
                            player: ["enterGame", "showCharacterAfter", "phaseBegin"],
                            global: ["phaseBefore"],
                        },
                        direct: true,
                        filter: function (event, player, name) {
                            if (player.hasSkill('zhiwei2')) return false;
                            if (get.mode() == 'guozhan') return event.name == 'showCharacter' && (event.toShow.contains('gz_luyusheng') || event.toShow.contains('luyusheng'));
                            return event.name != 'showCharacter' && (name != 'phaseBefore' || game.phaseNumber == 0);
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget('请选择【至微】的目标', '选择一名其他角色。该角色造成伤害后，你摸一张牌，该角色受到伤害后，你随机弃置一张手牌。你弃牌阶段弃置的牌均被该角色获得。', true, lib.filter.notMe).set('ai', function (target) {
                                var att = get.attitude(_status.event.player, target);
                                if (att > 0) return 1 + att;
                                return Math.random();
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('zhiwei', target);
                                player.storage.zhiwei2 = target;
                                player.addSkill('zhiwei2');
                                player.storage.zhiwei_mark = '';
                                player.addSkill("zhiwei_mark");
                                player.markSkill("zhiwei_mark", '', '至微 ' + get.translation(target));
                            }
                        },
                        subSkill: { mark: { silent: true, intro: {}, sub: true, }, },
                    }
                    lib.skill.zhiwei2 = {
                        group: ["zhiwei2_draw", "zhiwei2_discard", "zhiwei2_gain", "zhiwei2_clear"],
                        charlotte: true,
                        onremove: true,
                        // mark:"character",
                        // intro:{
                        // content:"$造成伤害后你摸一张牌；$受到伤害后你弃置一张牌；你于弃牌阶段弃置牌后交给$",
                        // },
                        subSkill: {
                            draw: {
                                audio: "zhiwei",
                                trigger: {
                                    global: "damageSource",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return event.source == player.storage.zhiwei2;
                                },
                                logTarget: "source",
                                content: function () {
                                    player.draw();
                                },
                                sub: true,
                            },
                            discard: {
                                audio: "zhiwei",
                                trigger: {
                                    global: "damageEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return event.player == player.storage.zhiwei2 && player.countCards('h', function (card) {
                                        return lib.filter.cardDiscardable(card, player, 'zhiwei2_discard');
                                    });
                                },
                                logTarget: "player",
                                content: function () {
                                    player.discard(player.getCards('h', function (card) {
                                        return lib.filter.cardDiscardable(card, player, 'zhiwei2_discard');
                                    }).randomGet());
                                },
                                sub: true,
                            },
                            gain: {
                                audio: "zhiwei",
                                trigger: {
                                    player: "loseAfter",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return event.type == 'discard' && event.getParent('phaseDiscard').player == player && player.storage.zhiwei2 && player.storage.zhiwei2.isIn() && event.cards2.filterInD('d').length > 0;
                                },
                                logTarget: function (event, player) {
                                    return player.storage.zhiwei2;
                                },
                                content: function () {
                                    if (trigger.delay === false) game.delay();
                                    player.storage.zhiwei2.gain(trigger.cards2.filterInD('d'), 'gain2');
                                },
                                sub: true,
                            },
                            clear: {
                                audio: "zhiwei",
                                trigger: {
                                    global: "die",
                                    player: ["hideCharacterEnd", "removeCharacterEnd"],
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (event.name == 'die') return event.player == player.storage.zhiwei2;
                                    if (event.name == 'removeCharacter') return event.toRemove == 'luyusheng' || event.toRemove == 'gz_luyusheng';
                                    return event.toHide == 'luyusheng' || event.toHide == 'gz_luyusheng';
                                },
                                content: function () {
                                    'step 0'
                                    player.removeSkill('zhiwei2');
                                    player.unmarkSkill('zhiwei_mark');
                                    if (trigger.name != 'die' || get.mode() != 'guozhan') event.finish();
                                    'step 1'
                                    if (player.name1 == 'gz_luyusheng' || player.name1 == 'luyusheng') player.hideCharacter(0);
                                    if (player.name2 == 'gz_luyusheng' || player.name2 == 'luyusheng') player.hideCharacter(1);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.huguan = {
                        audio: 2,
                        audioname: ["wangyue"],
                        trigger: {
                            global: "useCard",
                        },
                        direct: true,
                        filter: function (event, player) {
                            if (get.color(event.card, false) != 'red') return false;
                            var evt = event.getParent('phaseUse');
                            if (!evt || evt.player != event.player) return false;
                            return event.player.getHistory('useCard', function (event) {
                                return event.getParent('phaseUse') == evt;
                            }).indexOf(event) == 0;
                        },
                        content: function () {
                            'step 0'
                            player.chooseControl(lib.suit, 'cancel2').set('prompt', get.prompt('huguan', trigger.player)).set('prompt2', '令某种花色的手牌不计入其本回合的手牌上限').set('ai', function () {
                                var player = _status.event.player, target = _status.event.getTrigger().player;
                                if (get.attitude(player, target) <= 0) return 'cancel2';
                                var list = lib.suit.slice(0);
                                list.removeArray(target.getStorage('huguan_add'));
                                if (list.length) return list.randomGet();
                                return 'cancel2';
                            });
                            'step 1'
                            if (result.control != 'cancel2') {
                                var target = trigger.player;
                                player.logSkill('huguan', target);
                                game.log(player, '选择了', '#g' + get.translation(result.control), '花色')
                                target.addTempSkill('huguan_add');
                                var cc = get.translation(result.control);
                                target.storage.huguan_mark = '';
                                target.addTempSkill("huguan_mark");
                                target.markSkill("huguan_mark", '', '护关 ' + cc);
                                target.markAuto('huguan_add', [result.control]);
                            }
                        },
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            add: {
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (player.getStorage('huguan_add').contains(get.suit(card, player))) return true;
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && player.getStorage('huguan_add').contains(get.suit(card, player))) return false;
                                    },
                                },
                                //       intro:{
                                //content:"本回合$花色的牌不计入手牌上限",
                                //    },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.zhente = {
                        audio: 2,
                        trigger: {
                            target: "useCardToTargeted",
                        },
                        logTarget: "player",
                        usable: 1,
                        preHidden: true,
                        filter: function (event, player) {
                            var color = get.color(event.card);
                            if (player == event.player || event.player.isDead() || color == 'none' || (get.mode() == 'guozhan' && color != 'black')) return false;
                            var type = get.type(event.card);
                            return type == 'basic' || type == 'trick';
                        },
                        check: function (event, player) {
                            return !event.excluded.contains(player) && get.effect(player, event.card, event.player, player) < 0;
                        },
                        content: function () {
                            'step 0'
                            trigger.player.chooseControl().set('choiceList', [
                                '本回合内不能再使用' + get.translation(get.color(trigger.card)) + '牌',
                                '令' + get.translation(trigger.card) + '对' + get.translation(player) + '无效',
                            ]).set('prompt', get.translation(player) + '发动了【贞特】，请选择一项').set('ai', function () {
                                var player = _status.event.player;
                                var target = _status.event.getParent().player;
                                var card = _status.event.getTrigger().card, color = get.color(card);
                                if (get.effect(target, card, player, player) <= 0) return 1;
                                var hs = player.countCards('h', function (card) {
                                    return get.color(card, player) == color && player.hasValueTarget(card, null, true);
                                });
                                if (!hs.length) return 0;
                                if (hs > 1) return 1;
                                return Math.random() > 0.5 ? 0 : 1;
                            });
                            'step 1'
                            if (result.index == 0) {
                                trigger.player.addTempSkill('zhente2');
                                trigger.player.storage.zhente2.add(get.color(trigger.card));
                                player.storage.zhente5 = get.color(trigger.card) == 'red' ? '红色牌' : '黑色牌';
                                player.storage.zhente2 = '';
                                player.addTempSkill("zhente2");
                                trigger.player.markSkill('zhente2', '', '贞特 ' + player.storage.zhente5);
                            }
                            else trigger.excluded.add(player);
                        },
                    }
                    //阎柔
                    lib.skill.xiangshu = {
                        audio: 2,
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        direct: true,
                        limited: true,
                        skillAnimation: true,
                        animationColor: "gray",
                        filter: function (event, player) {
                            player.unmarkSkill('xiangshu_mark');
                            delete player.storage.xiangshu_mark;
                            return (player.getStat('damage') || 0) > 0 && game.hasPlayer((current) => current.isDamaged());
                        },
                        content: function () {
                            'step 0'
                            event.num = player.getStat('damage');
                            player.chooseTarget('是否发动限定技【襄戍】？', '令一名角色回复' + event.num + '点体力并摸' + get.cnNumber(event.num) + '张牌', function (card, player, target) {
                                return target.isDamaged();
                            }).set('ai', function (target) {
                                var num = _status.event.getParent().num, player = _status.event.player;
                                var att = get.attitude(player, target);
                                if (att > 0 && num >= Math.min(player.hp, 2)) return att * Math.sqrt(target.getDamagedHp());
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.awakenSkill('xiangshu');
                                player.logSkill('xiangshu', target);
                                target.recover(num);
                                target.draw(num);
                                if (player != target) player.addExpose(0.2);
                            }
                        },
                        mark: true,
                        intro: {
                            content: "limited",
                        },
                        init: function (player, skill) {
                            player.storage[skill] = false;
                        },
                        group: "xiangshu_mark",
                        subSkill: {
                            mark: {
                                intro: {
                                    content: "回合结束时可以选择一名角色回复#点体力，摸#张牌",
                                },
                                trigger: {
                                    source: "damageSource",
                                },
                                init: function (player) { player.storage.xiangshu_mark = 0; },
                                onremove: function (player) {
                                    player.unmarkSkill('xiangshu_mark');
                                    delete player.storage.xiangshu_mark;
                                },
                                audio: false,
                                forced: true,
                                content: function () {
                                    player.addMark('xiangshu_mark', trigger.num);
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.xingongji = {
                        enable: "phaseUse",
                        usable: 1,
                        audio: 2,
                        position: "he",
                        filterCard: true,
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        check: function (card) {
                            var base = 0, player = _status.event.player, suit = get.suit(card, player), added = false, added2 = false, added3;
                            if (get.type(card) == 'equip' && game.hasPlayer(function (target) {
                                var att = get.attitude(player, target);
                                if (att >= 0) return 0;
                                if (target.countCards('he', function (card) {
                                    return get.value(card) > 5;
                                })) return -att;
                            })) base += 6;
                            var hs = player.getCards('h');
                            var muniu = player.getEquip('muniu');
                            if (muniu && card != muniu && muniu.cards) hs = hs.concat(muniu.cards);
                            for (var i of hs) {
                                if (i != card && get.name(i) == 'sha') {
                                    if (get.suit(i, player) == suit) {
                                        if (player.hasValueTarget(i, false)) {
                                            added3 = true;
                                            base += 5.5;
                                        }
                                    }
                                    else {
                                        if (player.hasValueTarget(i, false)) added2 = true;
                                        if (!added && !player.hasValueTarget(i, null, true) && player.hasValueTarget(i, false, true)) {
                                            base += 4;
                                            added = true;
                                        }
                                    }
                                }
                            }
                            if (added3 && !added2) base -= 4.5;
                            return base - get.value(card);
                        },
                        content: function () {
                            "step 0"
                            if (!player.storage.xingongji2) player.storage.xingongji2 = [];
                            player.storage.xingongji2.add(get.suit(cards[0], player));
                            player.addTempSkill('xingongji2');
                            var str = '';
                            if (player.storage.xingongji2.contains('heart')) str += '♥️️';
                            if (player.storage.xingongji2.contains('diamond')) str += '♦️️';
                            if (player.storage.xingongji2.contains('spade')) str += '♠️️';
                            if (player.storage.xingongji2.contains('club')) str += '♣️️';
                            player.storage.xingongji_mark = '';
                            player.addTempSkill("xingongji_mark");
                            player.markSkill("xingongji_mark", '', '弓骑 ' + str);
                            "step 1"
                            if (get.type(cards[0], null, cards[0].original == 'h' ? player : false) == 'equip') {
                                player.chooseTarget('是否弃置一名角色的一张牌？', function (card, player, target) {
                                    return player != target && target.countCards('he') > 0;
                                }).set('ai', function (target) {
                                    var att = get.attitude(player, target);
                                    if (att >= 0) return 0;
                                    if (target.countCards('he', function (card) {
                                        return get.value(card) > 5;
                                    })) return -att;
                                    return -att * 0.8;
                                });
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                player.line(result.targets, 'green');
                                player.discardPlayerCard(result.targets[0], 'he', true);
                            }
                        },
                        ai: {
                            order: 4.5,
                            result: {
                                player: 1,
                            },
                        },
                        subSkill: {
                            mark: {
                                intro: {
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.xingongji2 = {
                        charlotte: true,
                        onremove: true,
                        mod: {
                            attackRangeBase: function () {
                                return Infinity;
                            },
                            cardUsable: function (card, player) {
                                if (card.name == 'sha' && player.storage.xingongji2.contains(get.suit(card))) return Infinity;
                            },
                            aiOrder: function (player, card, num) {
                                if (get.name(card) == 'sha' && !player.storage.xingongji2.contains(get.suit(card))) return num + 1;
                            },
                        },
                        // mark:true,
                        // intro:{
                        // content:"使用$花色的杀无次数限制",
                        // },
                    }
                    /*赵襄 芳魂*/
                    lib.skill.fanghun = {
                        mod: {
                            aiValue: function (player, card, num) {
                                if (card.name != 'sha' && card.name != 'shan') return;
                                var geti = function () {
                                    var cards = player.getCards('hs', function (card) {
                                        return card.name == 'sha' || card.name == 'shan';
                                    });
                                    if (cards.contains(card)) {
                                        return cards.indexOf(card);
                                    }
                                    return cards.length;
                                };
                                return Math.max(num, [7, 5, 5, 3][Math.min(geti(), 3)]);
                            },
                        },
                        locked: false,
                        audio: 2,
                        inherit: "fanghun",
                        trigger: {
                            player: "useCard",
                            target: "useCardToTargeted",
                        },
                        hiddenCard: function (player, name) {
                            if (!player.storage.fanghun || player.storage.fanghun <= 0) return false;
                            if (name == 'tao') return player.countCards('hs', 'jiu') > 0;
                            if (name == 'jiu') return player.countCards('hs', 'tao') > 0;
                            return false;
                        },
                        marktext: "梅影",
                        intro: {
                            content: "mark",
                            name: "梅影",
                        },
                        forced: true,
                        filter: function (event) {
                            return event.card && event.card.name == 'sha';
                        },
                        content: function () {
                            player.addMark('fanghun', trigger.num || 1);
                            player.addMark('fanghun2', trigger.num || 1, false);
                        },
                        group: ["fanghun_sha", "fanghun_draw"],
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: ["useCardAfter", "respondAfter"],
                                },
                                forced: true,
                                popup: false,
                                filter: function (event) {
                                    return event.skill == 'fanghun_sha' || event.skill == 'fanghun_shan';
                                },
                                content: function () {
                                    player.draw();
                                },
                                sub: true,
                            },
                            sha: {
                                audio: "fanghun",
                                enable: ["chooseToUse", "chooseToRespond"],
                                prompt: "弃置一枚【梅影】标记，将杀当做闪，或将闪当做杀，或将桃当做酒，或将酒当做桃使用或打出",
                                viewAs: function (cards, player) {
                                    var name = false;
                                    switch (get.name(cards[0], player)) {
                                        case 'sha': name = 'shan'; break;
                                        case 'shan': name = 'sha'; break;
                                        case 'tao': name = 'jiu'; break;
                                        case 'jiu': name = 'tao'; break;
                                    }
                                    if (name) return { name: name };
                                    return null;
                                },
                                position: "hs",
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (_status.event.type == 'phase') {
                                        var max = 0;
                                        var name2;
                                        var list = ['sha', 'tao', 'jiu'];
                                        var map = { sha: 'shan', tao: 'jiu', jiu: 'tao' }
                                        for (var i = 0; i < list.length; i++) {
                                            var name = list[i];
                                            if (player.countCards('hs', map[name]) > (name == 'jiu' ? 1 : 0) && player.getUseValue({ name: name }) > 0) {
                                                var temp = get.order({ name: name });
                                                if (temp > max) {
                                                    max = temp;
                                                    name2 = map[name];
                                                }
                                            }
                                        }
                                        if (name2 == get.name(card, player)) return 1;
                                        return 0;
                                    }
                                    return 1;
                                },
                                filterCard: function (card, player, event) {
                                    event = event || _status.event;
                                    var filter = event._backup.filterCard;
                                    var name = get.name(card, player);
                                    if (name == 'sha' && filter({ name: 'shan', cards: [card] }, player, event)) return true;
                                    if (name == 'shan' && filter({ name: 'sha', cards: [card] }, player, event)) return true;
                                    if (name == 'tao' && filter({ name: 'jiu', cards: [card] }, player, event)) return true;
                                    if (name == 'jiu' && filter({ name: 'tao', cards: [card] }, player, event)) return true;
                                    return false;
                                },
                                filter: function (event, player) {
                                    if (!player.storage.fanghun || player.storage.fanghun <= 0) return false;
                                    var filter = event.filterCard;
                                    if (filter({ name: 'sha' }, player, event) && player.countCards('hs', 'shan')) return true;
                                    if (filter({ name: 'shan' }, player, event) && player.countCards('hs', 'sha')) return true;
                                    if (filter({ name: 'tao' }, player, event) && player.countCards('hs', 'jiu')) return true;
                                    if (filter({ name: 'jiu' }, player, event) && player.countCards('hs', 'tao')) return true;
                                    return false;
                                },
                                onrespond: function () { return this.onuse.apply(this, arguments) },
                                onuse: function (result, player) {
                                    player.removeMark('fanghun', 1);
                                },
                                ai: {
                                    respondSha: true,
                                    respondShan: true,
                                    skillTagFilter: function (player, tag) {
                                        if (!player.storage.fanghun || player.storage.fanghun < 0) return false;
                                        var name;
                                        switch (tag) {
                                            case 'respondSha': name = 'shan'; break;
                                            case 'respondShan': name = 'sha'; break;
                                        }
                                        if (!player.countCards('hs', name)) return false;
                                    },
                                    order: function (item, player) {
                                        if (player && _status.event.type == 'phase') {
                                            var max = 0;
                                            var list = ['sha', 'tao', 'jiu'];
                                            var map = { sha: 'shan', tao: 'jiu', jiu: 'tao' }
                                            for (var i = 0; i < list.length; i++) {
                                                var name = list[i];
                                                if (player.countCards('hs', map[name]) > (name == 'jiu' ? 1 : 0) && player.getUseValue({ name: name }) > 0) {
                                                    var temp = get.order({ name: name });
                                                    if (temp > max) max = temp;
                                                }
                                            }
                                            if (max > 0) max += ((player.storage.refuhan || player.storage.twfuhan) ? 0.3 : -0.3);
                                            return max;
                                        }
                                        if (!player) player = _status.event.player;
                                        return (player.storage.refuhan || player.storage.twfuhan) ? 4 : 1;
                                    },
                                },
                                sub: true,
                            },
                        },
                    };
                    /*徐荣 暴戾*/
                    lib.skill.xinfu_xionghuo = {
                        group: ["xinfu_xionghuo_damage", "xinfu_xionghuo_begin", "xinfu_xionghuo_init"],
                        subSkill: {
                            begin: {
                                audio: "xinfu_xionghuo",
                                logTarget: "player",
                                line: false,
                                forced: true,
                                trigger: {
                                    global: "phaseUseBegin",
                                },
                                filter: function (event, player) {
                                    return event.player.countMark('xionghuo') > 0 && event.player != player;
                                },
                                content: function () {
                                    'step 0'
                                    trigger.player.removeMark('xionghuo', trigger.player.countMark('xionghuo'));
                                    var list = [1, 2, 3];
                                    var num = list.randomGet();
                                    event.goto(num);
                                    'step 1'
                                    player.line(trigger.player, 'fire');
                                    trigger.player.damage('fire');
                                    if (!trigger.player.storage.xionghuo_disable) trigger.player.storage.xionghuo_disable = [];
                                    trigger.player.storage.xionghuo_disable.push(player);
                                    trigger.player.addTempSkill('xionghuo_disable', 'phaseAfter');
                                    event.goto(4);
                                    'step 2'
                                    player.line(trigger.player, 'water');
                                    trigger.player.loseHp();
                                    trigger.player.addMark('xionghuo_low', 1, false);
                                    trigger.player.addTempSkill('xionghuo_low', 'phaseAfter');
                                    event.goto(4);
                                    'step 3'
                                    player.line(trigger.player, 'green');
                                    var card1 = trigger.player.getCards('h').randomGet();
                                    var card2 = trigger.player.getCards('e').randomGet();
                                    var list = [];
                                    if (card1) list.push(card1);
                                    if (card2) list.push(card2);
                                    if (list.length > 0) {
                                        player.gain(list, trigger.player, 'giveAuto', 'bySelf');
                                    }
                                    'step 4'
                                    game.delay();
                                    if (trigger.player.storage.xionghuo == 0) {
                                        trigger.player.unmarkSkill("xionghuo");
                                    }
                                },
                                sub: true,
                            },
                            damage: {
                                audio: "xinfu_xionghuo",
                                sub: true,
                                forced: true,
                                trigger: {
                                    source: "damageBegin1",
                                },
                                filter: function (event, player) {
                                    return event.player.countMark('xionghuo') > 0;
                                },
                                content: function () {
                                    trigger.num++;
                                },
                            },
                            init: {
                                audio: "xinfu_xionghuo",
                                trigger: {
                                    global: "phaseBefore",
                                    player: "enterGame",
                                },
                                forced: true,
                                locked: false,
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    player.addMark("xionghuo", 3);
                                },
                                sub: true,
                            },
                        },
                        audio: 2,
                        enable: "phaseUse",
                        filter: function (event, player) {
                            return player.countMark('xionghuo') > 0;
                        },
                        filterTarget: function (card, player, target) {
                            if (target.hasMark('xionghuo')) return false;
                            return player != target > 0;
                        },
                        content: function () {
                            player.removeMark('xionghuo', 1);
                            if (player.storage.xionghuo == 0) {
                                player.unmarkSkill("xionghuo");
                            }
                            target.addMark('xionghuo', 1);
                        },
                        ai: {
                            order: 11,
                            result: {
                                target: function (player, target) {
                                    if ((player.countMark('xionghuo') >= 2 || !game.hasPlayer(function (current) {
                                        return current != player && get.attitude(player, current) < 0 && current.hasMark('xionghuo');
                                    })) && player.countCards('h', function (card) {
                                        return get.tag(card, 'damage') && player.canUse(card, target, null, true)
                                            && player.getUseValue(card) > 0 && get.effect_use(target, card, player) > 0
                                            && target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                            });
                                    })) return 3 / Math.max(1, target.hp);
                                    if ((!player.hasUnknown() && game.countPlayer(function (current) {
                                        return get.attitude(player, current) < 0;
                                    }) <= 1) || player.countMark('xionghuo') >= 2) {
                                        return -1;
                                    }
                                    return 0;
                                },
                            },
                            effect: {
                                player: function (card, player, target) {
                                    if (player != target && get.tag(card, 'damage') && target && target.hasMark('xionghuo') && !target.hasSkillTag('filterDamage', null, {
                                        player: player,
                                        card: card,
                                    })) return [1, 0, 1, -2];
                                },
                            },
                            threaten: 1.6,
                        },
                    };
                    lib.skill.xionghuo = {
                        marktext: "暴戾",
                        mark: true,
                        intro: {
                            name: '暴戾',
                            content: "mark",
                        },
                        locked: true,
                    };
                    lib.skill.xionghuo_disable = {
                        mod: {
                            playerEnabled: function (card, player, target) {
                                if (card.name == 'sha' && (player.storage.xionghuo_disable && player.storage.xionghuo_disable.contains(target))) return false;
                            },
                        },
                        onremove: true,
                        charlotte: true,
                        mark: true,
                        marktext: "凶镬 禁止用杀",
                        intro: {
                            content: "本回合内不能对$使用【杀】",
                        },
                    },
                        lib.skill.xionghuo_low = {
                            mod: {
                                maxHandcard: function (player, num) {
                                    return num - player.countMark('xionghuo_low');
                                },
                            },
                            marktext: "凶镬 减手牌上限",
                            mark: true,
                            onremove: true,
                            charlotte: true,
                            intro: {
                                content: "本回合内手牌上限-#",
                            },
                        };
                    lib.skill.xinfu_shajue = {
                        audio: 2,
                        trigger: {
                            global: "dying",
                        },
                        filter: function (event, player) {
                            return event.player.hp < 0 && event.player != player;
                        },
                        forced: true,
                        //priority:7,
                        content: function () {
                            if (trigger.parent.name == 'damage' && get.itemtype(trigger.parent.cards) == 'cards' && get.position(trigger.parent.cards[0], true) == 'o') {
                                player.gain(trigger.parent.cards, "gain2");
                            }
                            player.addMark('xionghuo', 1);
                        },
                    };
                    //吉本 寻厉
                    lib.skill.xunli = {
                        audio: 2,
                        trigger: { global: 'loseAfter' },
                        forced: true,
                        filter: function (event, player) {
                            if (event.type != 'discard' || player.getExpansions('xunli').length >= 9) return false;
                            for (var i of event.cards) {
                                if (get.color(i, event.cards2.contains(i) ? event.player : false) == 'black') return true;
                            }
                            return false;
                        },
                        content: function () {
                            'step 0'
                            var num = 9 - player.getExpansions('xunli').length;
                            var cards = [];
                            for (var i of trigger.cards) {
                                if (get.color(i, trigger.cards2.contains(i) ? trigger.player : false) == 'black') cards.push(i);
                            }
                            if (cards.length <= num) event._result = {
                                bool: true,
                                links: cards,
                            }
                            else player.chooseButton(true, num, ['寻疠：将' + get.cnNumber(num) + '张牌置于武将牌上', cards]).set('forceAuto', true).set('ai', function (button) {
                                return get.value(button.link, _status.event.player);
                            });
                            'step 1'
                            if (result.bool) {
                                player.addToExpansion('gain2', result.links).gaintag.add('xunli');
                            }
                        },
                        marktext: '寻疠',
                        intro: {
                            content: 'expansion',
                            markcount: 'expansion',
                        },
                        group: 'xunli_exchange',
                        subSkill: {
                            exchange: {
                                audio: 2,
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                filter: function (event, player) {
                                    return player.getExpansions('xunli').length > 0 && player.hasCard((card) => get.color(card, player) == 'black', 'h');
                                },
                                content: function () {
                                    "step 0"
                                    var cards = player.getExpansions('xunli');
                                    if (!cards.length || !player.countCards('h')) {
                                        event.finish();
                                        return;
                                    }
                                    var next = player.chooseToMove('寻疠：是否交换“疠”和手牌？');
                                    next.set('list', [
                                        [get.translation(player) + '（你）的疠', cards],
                                        ['手牌区', player.getCards('h', (card) => get.color(card, player) == 'black')],
                                    ]);
                                    next.set('filterMove', function (from, to) {
                                        return typeof to != 'number';
                                    });
                                    next.set('processAI', function (list) {
                                        var player = _status.event.player;
                                        var getv = function (card) {
                                            if (get.info(card).toself) return 0;
                                            return player.getUseValue(card, false);
                                        };
                                        var cards = list[0][1].concat(list[1][1]).sort(function (a, b) {
                                            return getv(b) - getv(a);
                                        }), cards2 = cards.splice(0, player.getExpansions('xunli').length);
                                        return [cards2, cards];
                                    });
                                    "step 1"
                                    if (result.bool) {
                                        var pushs = result.moved[0], gains = result.moved[1];
                                        pushs.removeArray(player.getExpansions('xunli'));
                                        gains.removeArray(player.getCards('h'));
                                        if (!pushs.length || pushs.length != gains.length) return;
                                        player.logSkill('xunli_exchange');
                                        player.addToExpansion(pushs, player, 'giveAuto').gaintag.add('xunli');
                                        game.log(player, '将', pushs, '作为“疠”置于武将牌上');
                                        player.gain(gains, 'gain2');
                                    }
                                },
                            },
                        },
                    };
                    //丁原 弑叛
                    lib.skill.panshi = {
                        audio: 2,
                        mark: true,
                        marktext: '义子',
                        intro: { content: '$' },
                        trigger: { player: 'phaseZhunbeiBegin' },
                        forced: true,
                        filter: function (event, player) {
                            return player.countCards('h') > 0 && game.hasPlayer(function (current) {
                                return current != player && current.hasSkill('cixiao');
                            });
                        },
                        content: function () {
                            'step 0'
                            var targets = game.filterPlayer(function (current) {
                                return current != player && current.hasSkill('cixiao');
                            });
                            if (targets.length == 1) {
                                event.target = targets[0];
                                player.chooseCard('h', true, '叛弑：将一张手牌交给' + get.translation(targets));
                            }
                            else player.chooseCardTarget({
                                prompt: '叛弑：将一张手牌交给' + get.translation(targets) + '中的一名角色',
                                filterCard: true,
                                position: 'h',
                                targets: targets,
                                forced: true,
                                filterTarget: function (card, player, target) {
                                    return _status.event.targets.contains(target);
                                },
                            });
                            'step 1'
                            if (result.bool) {
                                if (!target) target = result.targets[0];
                                player.line(target);
                                target.gain(result.cards, player, 'giveAuto');
                            }
                        },
                        group: 'panshi_damage',
                    };
                    //九伐
                    lib.skill.jiufa = {
                        audio: 2,
                        trigger: { player: 'useCardAfter' },
                        frequent: true,
                        filter: function (event, player) {
                            return event.jiufa_counted && player.getStorage('jiufa').length >= 9;
                        },
                        content: function () {
                            'step 0'
                            player.unmarkSkill('jiufa');
                            event.cards = get.cards(9);
                            event.cards.sort(function (a, b) {
                                return get.number(b) - get.number(a);
                            })
                            game.cardsGotoOrdering(event.cards);
                            event.videoId = lib.status.videoId++;
                            game.broadcastAll(function (player, id, cards) {
                                var str;
                                if (player == game.me && !_status.auto) {
                                    str = '九伐：选择任意张点数满足条件的牌';
                                }
                                else {
                                    str = '九伐';
                                }
                                var dialog = ui.create.dialog(str, cards);
                                dialog.videoId = id;
                            }, player, event.videoId, event.cards);
                            event.time = get.utc();
                            game.addVideo('showCards', player, ['涉猎', get.cardsInfo(event.cards)]);
                            game.addVideo('delay', null, 2);
                            "step 1"
                            var next = player.chooseButton([0, 9], true);
                            next.set('dialog', event.videoId);
                            next.set('filterButton', function (button) {
                                var num = get.number(button.link), cards = _status.event.getParent().cards;
                                for (var i of ui.selected.buttons) {
                                    if (get.number(i.link) == num) return false;
                                }
                                for (var i of cards) {
                                    if (i != button.link && get.number(i) == num) return true;
                                }
                                return false;
                            });
                            next.set('ai', function (button) {
                                return get.value(button.link, _status.event.player)
                            });
                            "step 2"
                            if (result.bool && result.links && result.links.length) {
                                event.cards2 = result.links;
                            }
                            var time = 1000 - (get.utc() - event.time);
                            if (time > 0) {
                                game.delay(0, time);
                            }
                            "step 3"
                            game.broadcastAll('closeDialog', event.videoId);
                            var cards2 = event.cards2;
                            if (cards2 && cards2.length) player.gain(cards2, 'log', 'gain2');
                        },
                        marktext: '九伐',
                        intro: {
                            content: '已记录牌名：$',
                            onunmark: true,
                        },
                        group: 'jiufa_count',
                        subSkill: {
                            count: {
                                trigger: { player: 'useCard1' },
                                forced: true,
                                charlotte: true,
                                popup: false,
                                firstDo: true,
                                filter: function (event, player) {
                                    return !player.getStorage('jiufa').contains(event.card.name);
                                },
                                content: function () {
                                player.logSkill('jiufa');
                                    trigger.jiufa_counted = true;
                                    player.markAuto('jiufa', [trigger.card.name]);
                                },
                            },
                        },
                    };
                    //英霸
                    lib.skill.yingba = {
                        audio: 2,
                        enable: 'phaseUse',
                        usable: 1,
                        filter: (event, player) => (game.hasPlayer((current) => (current != player && current.maxHp > 1))),
                        filterTarget: (card, player, target) => (target != player && target.maxHp > 1),
                        content: function () {
                            'step 0'
                            target.loseMaxHp();
                            'step 1'
                            if (target.isIn()) target.addMark('yingba_mark', 1);
                            player.loseMaxHp();
                        },
                        locked: false,
                        //global:'yingba_mark',
                        mod: {
                            targetInRange: function (card, player, target) {
                                if (target.hasMark('yingba_mark')) return true;
                            },
                        },
                        ai: {
                            combo: 'scfuhai',
                            threaten: 3,
                            order: 2,
                            result: {
                                target: function (player, target) {
                                    if (target.isHealthy()) return -2;
                                    return -1;
                                },
                            },
                        },
                        subSkill: {
                            mark: {
                                marktext: '平定',
                                intro: {
                                    name: '平定',
                                    content: 'mark',
                                    onunmark: true,
                                },
                                mod: {
                                    maxHandcard: function (player, numx) {
                                        var num = player.countMark('yingba_mark');
                                        if (num) return numx + num * game.countPlayer(function (current) {
                                            return current.hasSkill('yingba');
                                        });
                                    },
                                },
                            },
                        },
                    };
                    //梦魇
                    lib.skill.new_wuhun = {
                        audio: "wuhun",
                        group: ["new_wuhun_mark", "new_wuhun_die", "wuhun22", "wuhun23"],
                        trigger: {
                            player: "damageEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return event.source != undefined;
                        },
                        content: function () {
                            trigger.source.addMark('new_wuhun_mark', trigger.num);
                        },
                        subSkill: {
                            die: {
                                audio: "wuhun2",
                                skillAnimation: true,
                                animationColor: 'soil',
                                trigger: {
                                    player: "die",
                                },
                                forced: true,
                                forceDie: true,
                                direct: true,
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.hasMark('new_wuhun_mark');
                                    });
                                },
                                content: function () {
                                    "step 0"
                                    var num = 0;
                                    for (var i = 0; i < game.players.length; i++) {
                                        var current = game.players[i];
                                        if (current != player && current.countMark('new_wuhun_mark') > num) {
                                            num = current.countMark('new_wuhun_mark');
                                        }
                                    }
                                    player.chooseTarget(true, '请选择【武魂】的目标', function (card, player, target) {
                                        return target != player && target.countMark('new_wuhun_mark') == _status.event.num;
                                    }).set('ai', function (target) {
                                        return -get.attitude(_status.event.player, target);
                                    }).set('forceDie', true).set('num', num);
                                    "step 1"
                                    if (result.bool && result.targets && result.targets.length) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill(Math.random() < 0.5 ? 'wuhun22' : 'wuhun23', target);
                                        player.line(target, { color: [255, 255, 0] });
                                        game.delay(2);
                                    }
                                    "step 2"
                                    target.judge(function (card) {
                                        if (['tao', 'taoyuan'].contains(card.name)) return 10;
                                        return -10;
                                    }).judge2 = function (result) {
                                        return result.bool == false ? true : false;
                                    };
                                    "step 3"
                                    if (!result.bool) {
                                        lib.element.player.die.apply(target, []);
                                    }
                                },
                                sub: true,
                            },
                            mark: {
                                marktext: "梦魇",
                                intro: {
                                    name: "梦魇",
                                    content: "mark",
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            threaten: 0.01,
                            notemp: true,
                        },
                    };
                    //暴怒			
                    lib.skill.baonu = {
                        audio: 2,
                        marktext: '暴怒',
                        unique: true,
                        trigger: {
                            source: 'damageSource',
                            player: ['damageEnd', 'enterGame'],
                            global: 'phaseBefore',
                        },
                        forced: true,
                        filter: function (event) {
                            return (event.name != 'damage' && (event.name != 'phase' || game.phaseNumber == 0)) || event.num > 0;
                        },
                        content: function () {
                            player.addMark('baonu', trigger.name == 'damage' ? trigger.num : 2);
                        },
                        intro: {
                            name: '暴怒',
                            content: 'mark'
                        },
                        ai: {
                            combo: 'ol_shenfen',
                            maixie: true,
                            maixie_hp: true
                        }
                    };
                    //定仪			
                    lib.skill.mjdingyi = {
                        audio: 2,
                        trigger: {
                            global: 'phaseBefore',
                            player: 'enterGame',
                        },
                        forced: true,
                        locked: false,
                        filter: function (event, player) {
                            return (event.name != 'phase' || game.phaseNumber == 0);
                        },
                        logTarget: function () {
                            return game.players;
                        },
                        content: function () {
                            'step 0'
                            var list = [];
                            for (var i = 0; i < 4; i++) list.push(lib.skill['mjdingyi_' + i].title);
                            player.chooseControl().set('choiceList', list).set('prompt', '定仪：请选择一个全局效果').set('ai', function (target) {
                                var list1 = player.getEnemies().length;
                                var list2 = game.players.length - list1;
                                if (list2 - list1 > 1) return 0;
                                if (game.players.length < 6) return 2;
                                return 3;
                            });
                            'step 1'
                            if (typeof result.index == 'number') {
                                var skill = 'mjdingyi_' + result.index;
                                game.log(player, '选择了', '#g' + lib.skill[skill].title);
                                for (var i of game.players) i.addSkill(skill);
                                game.delayx();
                            }
                        },
                        subSkill: {
                            0: {
                                title: '摸牌阶段的额定摸牌数+1',
                                charlotte: true,
                                mark: true,
                                marktext: '定仪 额外摸牌',
                                trigger: { player: 'phaseDrawBegin' },
                                forced: true,
                                filter: function (event, player) {
                                    return !event.numFixed;
                                },
                                content: function () {
                                    trigger.num += ((player.storage.mjdingyi_plus || 0) + 1);
                                },
                                intro: {
                                    content: function (storage, player) {
                                        return '摸牌阶段的额定摸牌数+' + (1 * ((player.storage.mjdingyi_plus || 0) + 1));
                                    },
                                },
                            },
                            1: {
                                title: '手牌上限+2',
                                charlotte: true,
                                mark: true,
                                marktext: '定仪 手牌上限',
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + 2 * ((player.storage.mjdingyi_plus || 0) + 1);
                                    },
                                },
                                intro: {
                                    content: function (storage, player) {
                                        return '手牌上限+' + (2 * ((player.storage.mjdingyi_plus || 0) + 1));
                                    },
                                },
                            },
                            2: {
                                title: '攻击范围+1',
                                charlotte: true,
                                mark: true,
                                marktext: '定仪 攻击范围',
                                mod: {
                                    attackRange: function (player, num) {
                                        return num + ((player.storage.mjdingyi_plus || 0) + 1);
                                    },
                                },
                                intro: {
                                    content: function (storage, player) {
                                        return '攻击范围+' + ((player.storage.mjdingyi_plus || 0) + 1);
                                    },
                                },
                            },
                            3: {
                                title: '脱离濒死状态后回复1点体力',
                                charlotte: true,
                                mark: true,
                                marktext: '定仪 额外回复',
                                trigger: { player: 'dyingAfter' },
                                forced: true,
                                filter: function (event, player) {
                                    return player.isDamaged();
                                },
                                content: function () {
                                    player.recover((player.storage.mjdingyi_plus || 0) + 1);
                                },
                                intro: {
                                    content: function (storage, player) {
                                        return '脱离濒死状态后回复' + ((player.storage.mjdingyi_plus || 0) + 1) + '点体力';
                                    },
                                },
                            },
                        },
                    };
                    //罪辞			
                    lib.skill.zuici = {
                        audio: 2,
                        trigger: {
                            player: "damageEnd",
                        },
                        filter: function (event, player) {
                            if (!event.source || !event.source.isIn()) return false;
                            for (var i = 0; i < 4; i++) {
                                if (event.source.hasSkill('mjdingyi_' + i)) return true;
                            }
                            return false;
                        },
                        logTarget: "source",
                        check: () => false,
                        content: function () {
                            'step 0'
                            var target = trigger.source;
                            event.target = target;
                            for (var i = 0; i < 4; i++) {
                                if (target.hasSkill('mjdingyi_' + i)) target.removeSkill('mjdingyi_' + i);
                                if (target.hasSkill('fanbei')) target.removeSkill('fanbei');
                            }
                            'step 1'
                            var list = get.zhinangs();
                            if (list.length) {
                                player.chooseButton(['选择要令' + get.translation(target) + '获得的智囊', [list, 'vcard']], true);
                            }
                            else event.finish();
                            'step 2'
                            if (result.bool) {
                                var card = get.cardPile2(function (card) {
                                    return card.name == result.links[0][2];
                                })
                                if (card) target.gain(card, 'gain2');
                            }
                        },
                    }
                    //辅弼
                    lib.skill.mjfubi = {
                        audio: 2,
                        enable: 'phaseUse',
                        filter: function (event, player) {
                            if (player.hasSkill('mjfubi_round')) return false;
                            return game.hasPlayer(function (current) {
                                for (var i = 0; i < 4; i++) {
                                    if (current.hasSkill('mjdingyi_' + i)) return true;
                                }
                            });
                        },
                        filterCard: true,
                        selectCard: [0, 1],
                        filterTarget: function (card, player, target) {
                            if (ui.selected.cards.length) {
                                for (var i = 0; i < 4; i++) {
                                    if (target.hasSkill('mjdingyi_' + i)) return true;
                                }
                            }
                            var num = 0;
                            for (var i = 0; i < 4; i++) {
                                if (target.hasSkill('mjdingyi_' + i)) return true;
                            }
                            return num > 1 && num < 4;
                        },
                        check: () => false,
                        position: 'he',
                        content: function () {
                            'step 0'
                            player.addTempSkill('mjfubi_round', 'roundStart');
                            if (cards.length) {
                                player.addSkill('mjfubi_clear');
                                player.markAuto('mjfubi_clear', [target]);
                                target.addMark('mjdingyi_plus', 1, false);
                                target.addSkill('fanbei');
                                game.log(target, '的', '#g【定仪】', '效果翻倍');
                                event.finish();
                                return;
                            }
                            var list = [], nums = [];
                            for (var i = 0; i < 4; i++) {
                                if (!target.hasSkill('mjdingyi_' + i)) {
                                    list.push(lib.skill['mjdingyi_' + i].title);
                                    nums.push(i);
                                }
                            }
                            if (list.length) {
                                event.nums = nums;
                                player.chooseControl().set('choiceList', list).set('prompt', '辅弼：请选择为' + get.translation(target) + '更换的〖定仪〗效果').set('ai', function () {
                                    var player = _status.event.player, target = _status.event.getParent().target;
                                    if (get.attitude(player, target) > 0 && !target.hasSkill('mjdingyi_0')) return 0;
                                    return _status.event.getParent().nums.length - 1;
                                });
                            }
                            else event.finish();
                            'step 1'
                            for (var i = 0; i < 4; i++) {
                                if (target.hasSkill('mjdingyi_' + i)) target.removeSkill('mjdingyi_' + i);
                            }
                            target.addSkill('mjdingyi_' + event.nums[result.index]);
                            game.log(target, '的效果被改为', '#g' + lib.skill['mjdingyi_' + event.nums[result.index]].title);
                        },
                        ai: {
                            order: 10,
                            expose: 0,
                            result: {
                                target: function (player, target) {
                                    if (target.hasSkill('mjdingyi_0')) return -1;
                                    return 2;
                                },
                            },
                        },
                        subSkill: {
                            round: {},
                            clear: {
                                trigger: { player: ['phaseBegin', 'dieBegin'] },
                                forced: true,
                                popup: false,
                                charlotte: true,
                                content: function () {
                                    while (player.storage.mjfubi_clear && player.storage.mjfubi_clear.length) {
                                        var target = player.storage.mjfubi_clear.shift();
                                        if (target.hasMark('mjdingyi_plus')) target.removeMark('mjdingyi_plus', 1, false);
                                        if (target.hasSkill('fanbei')) target.removeSkill('fanbei');
                                    }
                                    delete player.storage.mjfubi_clear;
                                    player.removeSkill('mjfubi_clear');

                                },
                            },
                        },
                    };
                    //翻倍标记			
                    lib.skill.fanbei = {
                        mark: true,
                        marktext: '定仪 翻倍',
                        intro: {
                            name: '翻倍',
                            content: 'mark'
                        },
                    };
                    //杜预 武库									
                    lib.skill.spwuku = {
                        audio: 2,
                        trigger: { global: 'useCard' },
                        forced: true,
                        preHidden: true,
                        filter: function (event, player) {
                            if (get.type(event.card) != 'equip') return false;
                            var gz = get.mode() == 'guozhan';
                            if (gz && event.player.isFriendOf(player)) return false;
                            return player.countMark('spwuku') < (gz ? 2 : 3);
                        },
                        content: function () {
                            player.addMark('spwuku', 1);
                        },
                        marktext: '武库',
                        intro: {
                            content: 'mark',
                        },
                    };
                    //陆抗 决堰									
                    lib.skill.drlt_jueyan1 = {
                        mod: {
                            cardUsable: function (card, player, num) {
                                if (card.name == 'sha') return num + 3;
                            },
                        },
                        mark: true,
                        marktext: '杀的次数+3',
                        intro: { name: '决堰 - 武器', content: '本回合内可以多使用三张【杀】' },
                    },
                        lib.skill.drlt_jueyan2 = {
                            mod: {
                                targetInRange: function (card, player, target, now) {
                                    return true;
                                },
                            },
                            mark: true,
                            marktext: '无限距离',
                            intro: { name: '决堰 - 坐骑', content: '本回合内使用牌没有距离限制' },
                        },
                        lib.skill.drlt_jueyan3 = {
                            mod: {
                                maxHandcard: function (player, num) {
                                    return num + 3;
                                },
                            },
                            mark: true,
                            marktext: '手牌上限+3',
                            intro: { name: '决堰 - 防具', content: '本回合内手牌上限+3' },
                        },
                        //郝昭 镇骨			
                        lib.skill.drlt_zhenggu_mark = {
                            init: function (player, skill) {
                                if (!player.storage[skill]) player.storage[skill] = [];
                            },
                            marktext: '镇骨',
                            intro: {
                                name: '镇骨',
                                content: '已成为$〖镇骨〗的目标',
                            },
                        };
                    //腾公主 流年						                    		
                    lib.skill.liunian = {
                        audio: 2,
                        trigger: { global: 'washCard' },
                        forced: true,
                        filter: function (event, player) {
                            return game.shuffleNumber <= 2;
                        },
                        content: function () {
                            if (game.shuffleNumber == 1) player.addTempSkill('liunian_shuffle1');
                            else player.addTempSkill('liunian_shuffle2');
                            game.delayx();
                        },
                        subSkill: {
                            shuffle1: {
                                charlotte: true,
                                forced: true,
                                trigger: { player: 'phaseEnd' },
                                content: function () {
                                    player.gainMaxHp();
                                    game.delayx();
                                },
                            },
                            shuffle2: {
                                charlotte: true,
                                forced: true,
                                trigger: { player: 'phaseEnd' },
                                content: function () {
                                    'step 0'
                                    player.recover();
                                    game.delayx();
                                    'step 1'
                                    player.addSkill('liunian_effect');
                                    player.addMark('liunian_effect', 10, false);
                                },
                            },
                            effect: {
                                charlotte: true,
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('liunian_effect');
                                    },
                                },
                                marktext: '流年',
                                intro: {
                                    content: '手牌上限+#',
                                },
                            },
                        },
                    };
                    //陈琳 笔伐						
                    lib.skill.bifa2 = {
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        forced: true,
                        charlotte: true,
                        audio: false,
                        filter: function (event, player) {
                            return player.storage.bifa2 && player.getExpansions('bifa2').contains(player.storage.bifa2[0]);
                        },
                        content: function () {
                            "step 0"
                            if (player.storage.bifa2[1].isAlive() && player.countCards('h')) {
                                player.chooseCard(get.translation(player.storage.bifa2[1]) + '的笔伐牌为：', function (card) {
                                    return get.type(card, 'trick') == _status.event.type;
                                }).set('ai', function (card) {
                                    return 8 - get.value(card);
                                }).set('type', get.type(player.storage.bifa2[0], 'trick')).set('promptx', [[player.storage.bifa2[0]], '请交给其一张与此牌类别相同的手牌，否则失去1点体力']);
                            }
                            else {
                                event.directfalse = true;
                            }
                            "step 1"
                            if (result.bool && !event.directfalse) {
                                player.storage.bifa2[1].gain(result.cards, player, 'giveAuto');
                                player.gain(player.storage.bifa2[0], 'draw');
                            }
                            else {
                                player.loseHp();
                            }
                            "step 2"
                            player.removeSkill('bifa2');
                        },
                        marktext: "笔伐",
                        intro: {
                            markcount: 1,
                            name: "笔伐",
                            content: "已成为〖笔伐〗的目标",
                        },
                        onremove: function (player, skill) {
                            var cards = player.getExpansions(skill);
                            if (cards.length) player.loseToDiscardpile(cards);
                            delete player.storage[skill];
                        },
                    };
                    /*神诸葛亮 三件套*/
                    lib.translate.qixing_bg = '七星'
                    lib.translate.dawu2_bg = '大雾'
                    lib.translate.kuangfeng2_bg = '狂风'
                    //刘封
                    lib.translate.xiansi_bg = '陷嗣'
                    //嵇康
                    lib.translate.juexiang_club_bg = '绝响'

                    /*刘琦 问计*/
                    lib.skill.rewenji = {
                        audio: 'spwenji',
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return game.hasPlayer(function (current) {
                                return current != player && current.countCards('he');
                            });
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt2('rewenji'), function (card, player, target) {
                                return target != player && target.countCards('he');
                            }).set('ai', function (target) {
                                var att = get.attitude(_status.event.player, target);
                                if (att > 0) return Math.sqrt(att) / 10;
                                return 5 - att;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('rewenji', target);
                                target.chooseCard('he', true, '问计：将一张牌交给' + get.translation(player));
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            if (result.bool) {
                                player.addTempSkill('rewenji_respond');
                                player.storage.rewenji_respond = get.type2(result.cards[0], target);
                                event.target.give(result.cards, player, true);
                                var cc = get.translation(result.cards[0].name);
                                player.storage.rewenji_mark = '';
                                player.addTempSkill("rewenji_mark");
                                player.markSkill("rewenji_mark", '', '问计 ' + cc);
                            }
                        },
                        subSkill: {
                            respond: {
                                onremove: true,
                                trigger: {
                                    player: "useCard",
                                },
                                forced: true,
                                charlotte: true,
                                audio: 'spwenji',
                                filter: function (event, player) {
                                    return get.type2(event.card) == player.storage.rewenji_respond;
                                },
                                content: function () {
                                    trigger.directHit.addArray(game.filterPlayer(function (current) {
                                        return current != player;
                                    }));
                                },
                                ai: {
                                    "directHit_ai": true,
                                    skillTagFilter: function (player, tag, arg) {
                                        return get.type2(arg.card) == player.storage.rewenji_respond;
                                    },
                                },
                                sub: true,
                            },
                            mark: {
                                onremove: function (player) {
                                    delete player.storage.rewenji_mark;
                                    player.removeMark('rewenji_mark');
                                },
                                intro: {
                                },
                                sub: true,
                            },
                        },
                    }
                    //王朗 鼓舌
                    lib.skill.regushe = {
                        audio: "gushe",
                        enable: "phaseUse",
                        filterTarget: function(card, player, target) {
                            return player.canCompare(target);
                        },
                        selectTarget: [1, 3],
                        filter: function(event, player) {
                            return (player.countMark('regushe') + player.countMark('regushe2') < 7) && player.countCards('h') > 0;
                        },
                        multitarget: true,
                        multiline: true,
                        content: function() {
                            player.addTempSkill('regushe2');
                            player.chooseToCompare(targets)
                                .callback = lib.skill.regushe.callback;          
                            var mark2 = 7 - (player.countMark('regushe') + player.countMark('regushe2'));
                            if (mark2 <= 0) { var mark2 = '0';}
                            player.storage.regushe_mark2 = mark2;
                            player.syncStorage("regushe_mark2");                        
                        },
                        marktext: "饶舌",
                        intro: {
                            name: "饶舌",
                            content: "mark",
                        },
                        callback: function() {
                            'step 0'
                            if (event.num1 <= event.num2) {
                                target.chat(lib.skill.gushe.chat[player.countMark('regushe')]);
                                game.delay();
                                player.addMark('regushe', 1);
                                if (player.countMark('regushe') >= 7) {
                                    player.die();
                                }
                            } else player.addMark('regushe2', 1, false);
                            'step 1'
                            if (event.num1 >= event.num2) {
                                target.chooseToDiscard('he', '弃置一张牌，或令' + get.translation(player) + '摸一张牌')
                                    .set('ai', function(card) {
                                    if (_status.event.goon) return 6 - get.value(card);
                                    return 0;
                                })
                                    .set('goon', get.attitude(target, player) < 0);
                            } else {
                                event.goto(3);
                            }
                            
                            var mark2 = 7 - (player.countMark('regushe') + player.countMark('regushe2'));
                            if (mark2 <= 0) { var mark2 = '0'; }
                            player.storage.regushe_mark2 = mark2;          
                            player.syncStorage("regushe_mark2");           
                            'step 2'
                            if (!result.bool) {
                                player.draw();
                            }
                            'step 3'
                            if (event.num1 <= event.num2) {
                                player.chooseToDiscard('he', '弃置一张牌，或摸一张牌')
                                    .set('ai', function() {
                                    return -1;
                                });
                            } else {
                                event.finish();
                            }
                            'step 4'
                            if (!result.bool) player.draw();
                        },
                        ai: {
                            order: 7,
                            result: {
                                target: function(player, target) {
                                    var num = ui.selected.targets.length + 1;
                                    if (num + player.countMark('regushe') <= 6) return -1;
                                    var hs = player.getCards('h');
                                    for (var i = 0; i < hs.length; i++) {
                                        if (get.value(hs[i]) <= 6) {
                                            switch (hs[i].number) {
                                                case 13:
                                                    return -1;
                                                case 12:
                                                    if (player.countMark('regushe') + num <= 8) return -1;
                                                    break;
                                                case 11:
                                                    if (player.countMark('regushe') + num <= 7) return -1;
                                                    break;
                                                default:
                                                    if (hs[i].number > 5 && player.countMark('regushe') + num <= 6) return -1;
                                            }
                                        }
                                    }
                                    return 0;
                                },
                            },
                        },
                        group: "regushe_mark",
                        subSkill: {
                            mark: {
                                trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        forced: true,
                        audio: false,        
                        priority:10,
                        silent:true,
                        content: function() {
                            player.addTempSkill("regushe_mark2");
                            var mark2 = 7 - (player.countMark('regushe') + player.countMark('regushe2'));
                            if (mark2 <= 0) { var mark2 = '0';}
                            player.storage.regushe_mark2 = mark2;
                            player.syncStorage("regushe_mark2");        
                        },
                                sub: true,
                            },
                            mark2: {
                                mark:true,
                                onremove:true,
                                marktext:"鼓舌剩余",
                                intro:{content:'剩余#次',},               
                                sub: true,
                            },
                        },
                    }
                    //小虎 魅步
                    lib.skill.new_meibu = {
                        audio: "meibu",
                        trigger: {
                            global: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            return event.player != player && event.player.isAlive() && player.countCards('he') > 0 && event.player.inRange(player);
                        },
                        direct: true,
                        derivation: ["new_zhixi"],
                        checkx: function(event, player) {
                            if (get.attitude(player, event.player) >= 0) return false;
                            var e2 = player.getEquip(2);
                            if (e2) {
                                if (e2.name == 'tengjia') return true;
                                if (e2.name == 'bagua') return true;
                            }
                            return event.player.countCards('h') > event.player.hp;
                        },
                        content: function() {
                            "step 0"
                            var check = lib.skill.new_meibu.checkx(trigger, player);
                            player.chooseToDiscard(get.prompt2('new_meibu', trigger.player), 'he')
                                .set('ai', function(card) {
                                if (_status.event.check) return 6 - get.value(card);
                                return 0;
                            })
                                .set('check', check)
                                .set('logSkill', 'new_meibu');
                            "step 1"
                            if (result.bool) {
                                var target = trigger.player;
                                var card = result.cards[0];
                                player.line(target, 'green');
                                target.addTempSkill('new_zhixi', 'phaseUseEnd');
                                target.addTempSkill('new_zhixi_recover', 'phaseUseEnd');
                                if (card.name != 'sha' && get.type(card) != 'trick' && get.color(card) != 'black') {
                                    target.addTempSkill('new_meibu_range', 'phaseUseEnd');
                                    target.storage.meibu = player;
                                }
                                /*   target.markSkillCharacter('new_meibu',player,'止息','锁定技，出牌阶段，你至多可使用X张牌，你使用了锦囊牌后不能再使用牌（X为你的体力值）。');*/
                                target.addTempSkill("new_zhixi_mark",'phaseUseEnd');
                                var mark = target.hp - target.countMark('new_zhixi');
                                target.storage.new_zhixi_mark = mark.toString();
                                target.syncStorage("new_zhixi_mark");
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                        subSkill: {
                            range: {
                                mod: {
                                    globalFrom: function(from, to, num) {
                                        if (to == from.storage.meibu) {
                                            return -Infinity;
                                        }
                                    },
                                },
                                sub: true,
                            },
                        },
                    };
                    //小虎 止息		
                    lib.skill.new_zhixi = {
                        mod: {
                            cardEnabled: function(card, player) {
                                if (player.storage.new_zhixi2 || player.countMark('new_zhixi') >= player.hp) return false;
                            },
                            cardUsable: function(card, player) {
                                if (player.storage.new_zhixi2 || player.countMark('new_zhixi') >= player.hp) return false;
                            },
                            cardRespondable: function(card, player) {
                                if (player.storage.new_zhixi2 || player.countMark('new_zhixi') >= player.hp) return false;
                            },
                        },
                        trigger: {
                            player: "useCard",
                        },
                        forced: true,
                        popup: false,
                        onremove: function(player) {
                            player.unmarkSkill('new_meibu');
                            player.unmarkSkill('new_zhixi_mark');
                            player.unmarkSkill('new_zhixi_mark2');
                            delete player.storage.new_zhixi;
                            delete player.storage.new_zhixi2;
                        },
                        firstDo: true,
                        content: function() {
                            'step 0'
                            player.addMark('new_zhixi', 1, false);
                            if (get.type2(trigger.card) == 'trick') {
                                player.storage.new_zhixi2 = true;
                                player.addMark('new_zhixi_mark2');
                            }
                            'step 1'            
                            var mark = player.hp - player.countMark('new_zhixi');           
                            player.storage.new_zhixi_mark = mark.toString();
                            player.syncStorage("new_zhixi_mark");
                        },
                        subSkill: {        
                            mark:{
                            marktext: '止息',
                            onremove:true,
                            mark: true,
                                intro: {
                                name: '止息',
                                    content: '你还能在使用#次牌'
                                },
                                sub: true,
                            },
                            mark2: {
                                marktext: '止息锦',
                                mark: true,
                                intro: {
                                    name: '止息',
                                    content: '你使用过锦囊牌，不能再用牌啦'
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            presha: true,
                            pretao: true,
                            nokeep: true,
                        },
                    };
                    lib.skill.new_zhixi_recover = {
                        trigger: {
                            player: "changeHp",
                        },
                        forced: true,       
                        priority:10,
                        silent:true,
                        content: function() {
                            var mark = player.hp - player.countMark('new_zhixi');
                            player.storage.new_zhixi_mark = mark.toString();
                            player.syncStorage("new_zhixi_mark");
                        },
                    };
                    //神张辽 夺锐   
                    lib.skill.drlt_duorui = {
                        audio: 2,
                        init: function (player, skill) {
                            if (!player.storage.drlt_duorui) player.storage.drlt_duorui = [];
                        },
                        trigger: {
                            source: "damageSource",
                        },
                        filter: function (event, player) {
                            if (player.storage.drlt_duorui.length) return false;
                            return player != event.player && event.player.isAlive() && _status.currentPhase == player;
                        },
                        check: function (event, player) {
                            if (player.countDisabled() < 5 && player.isDisabled(5)) return false;
                            return true;
                        },
                        bannedList: ["bifa", "buqu", "gzbuqu", "songci", "funan", "xinfu_guhuo", "reguhuo", "huashen", "rehuashen", "old_guhuo", "shouxi", "xinpojun", "taoluan", "xintaoluan", "yinbing", "xinfu_yingshi", "zhenwei", "zhengnan", "xinzhengnan", "zhoufu"],
                        content: function () {
                            'step 0'
                            var list = [];
                            var listm = [];
                            var listv = [];
                            if (trigger.player.name1 != undefined) listm = lib.character[trigger.player.name1][3];
                            else listm = lib.character[trigger.player.name][3];
                            if (trigger.player.name2 != undefined) listv = lib.character[trigger.player.name2][3];
                            listm = listm.concat(listv);
                            var func = function (skill) {
                                var info = get.info(skill);
                                if (!info || info.charlotte || info.hiddenSkill || info.zhuSkill || info.juexingji || info.limited || info.dutySkill || (info.unique && !info.gainable) || lib.skill.drlt_duorui.bannedList.contains(skill)) return false;
                                return true;
                            };
                            for (var i = 0; i < listm.length; i++) {
                                if (func(listm[i])) list.add(listm[i]);
                            }
                            event.skills = list;
                            if (player.countDisabled() < 5) {
                                player.chooseToDisable().ai = function (event, player, list) {
                                    if (list.contains('equip5')) return 'equip5';
                                    return list.randomGet();
                                };
                            }
                            'step 1'
                            if (event.skills.length > 0) {
                                player.chooseControl(event.skills).set('prompt', '请选择要获得的技能').set('ai', function () { return event.skills.randomGet() });
                            }
                            else event.finish();
                            'step 2'
                            player.addTempSkill(result.control, { player: 'dieAfter' });
                            player.popup(result.control, 'thunder');
                            player.storage.drlt_duorui = [result.control];
                            player.storage.drlt_duorui_player = trigger.player;
                            trigger.player.storage.drlt_duorui = [result.control];
                            trigger.player.addTempSkill('drlt_duorui1', { player: 'phaseAfter' });
                            game.log(player, '获得了技能', '#g【' + get.translation(result.control) + '】')
                            player.unmarkSkill('drlt_duorui_mark');
                            var mark = get.translation(result.control);
                            player.storage.drlt_duorui_mark = '';
                            player.addSkill("drlt_duorui_mark",);
                            player.markSkill("drlt_duorui_mark", '', '夺锐 ' + mark);
                            trigger.player.addTempSkill("drlt_duorui_mark", { player: 'phaseAfter' });
                            trigger.player.markSkill("drlt_duorui_mark", '', '被夺锐 ' + mark);
                        },
                        group: ["duorui_clear"],
                        subSkill: {
                            mark: true,
                            mark: {
                                intro: {
                                },
                                sub: true,
                            },
                        },
                    };
                    lib.skill.duorui_clear = {
                        trigger: { global: ['phaseAfter', 'dieAfter'], },
                        filter: function (event, player) {
                            if (!player.storage.drlt_duorui_player || !player.storage.drlt_duorui) return false;
                            return player.storage.drlt_duorui_player == event.player && player.storage.drlt_duorui.length;
                        },
                        silent: true,
                        forced: true,
                        popup: false,
                        content: function () {
                            player.removeSkill(player.storage.drlt_duorui[0]);
                            delete player.storage.drlt_duorui_player;
                            player.storage.drlt_duorui = [];
                            player.unmarkSkill('drlt_duorui_mark');
                        },
                    },
                        lib.skill.drlt_duorui1 = {
                            init: function (player, skill) {
                                player.disableSkill(skill, player.storage.drlt_duorui);
                                player.shixiaoSkill('drlt_duorui');
                            },
                            onremove: function (player, skill) {
                                player.enableSkill(skill);
                                player.unshixiaoSkill('drlt_duorui');
                            },
                            locked: true,
                            // mark:true,
                            charlotte: true,
                            /* intro:{
                               content:function(storage,player,skill){
                                     var list=[];
                                     for(var i in player.disabledSkills){
                                         if(player.disabledSkills[i].contains(skill)) list.push(i);
                                     };
                                     if(list.length){
                                         var str='被夺锐：';
                                         for(var i=0;i<list.length;i++){
                                             if(lib.translate[list[i]+'_info']) str+=get.translation(list[i])+'、';
                                         };
                                         return str.slice(0,str.length-1);
                                     };
                                 },
                             },*/
                        }
                    lib.skill.shenzhu = {
                        audio: 2,
                        trigger: {
                            player: "useCardAfter",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return event.card.name == 'sha' && event.card.isCard && event.cards.length == 1;
                        },
                        content: function () {
                            'step 0'
                            player.chooseControl().set('choiceList', [
                                '摸一张牌，且本回合使用【杀】的次数上限+1',
                                '摸三张牌，且本回合不能再使用【杀】',
                            ]).set('ai', () => _status.event.player.hasSha() ? 0 : 1);
                            'step 1'
                            if (result.index == 0) {
                                player.draw();
                                player.addTempSkill('shenzhu_more');
                                player.addMark('shenzhu_more', 1, false);
                            }
                            else {
                                player.draw(3);
                                player.addTempSkill('shenzhu_less');
                            }
                        },
                        subSkill: {
                            more: {
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.countMark('shenzhu_more');
                                    },
                                },
                                sub: true,
                            },
                            less: {
                                mark: true,
                                marktext: '神著 不能出杀',
                                intro: {
                                    name: '不能出杀',
                                    content: 'mark'
                                },
                                charlotte: true,
                                mod: {
                                    cardEnabled: function (card) {
                                        if (card.name == 'sha') return false;
                                    },
                                },
                                sub: true,
                            },
                        },
                    }
                    //十周年留赞 奋音
                    lib.skill.refenyin = {
                        audio: 2,
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (player != _status.currentPhase) return false;
                            if (event.name == 'lose' && event.position != ui.discardPile) return false;
                            var list = [];
                            var num = event.cards.length;
                            for (var i = 0; i < event.cards.length; i++) {
                                var card = event.cards[i];
                                list.add(get.suit(card, (event.cards2 && event.cards2.contains(card)) ? event.player : false));
                            }
                            game.getGlobalHistory('cardMove', function (evt) {
                                if (evt == event || (evt.name != 'lose' && evt.name != 'cardsDiscard')) return false;
                                if (evt.name == 'lose' && evt.position != ui.discardPile) return false;
                                num += evt.cards.length;
                                for (var i = 0; i < evt.cards.length; i++) {
                                    var card = evt.cards[i];
                                    list.remove(get.suit(card, (evt.cards2 && evt.cards2.contains(card)) ? evt.player : false));
                                }
                            }, event);
                            player.storage.refenyin_mark2 = num;
                            return list.length > 0;
                        },
                        content: function () {
                            var list = [];
                            var list2 = [];
                            for (var i = 0; i < trigger.cards.length; i++) {
                                var card = trigger.cards[i];
                                var suit = get.suit(card, (trigger.cards2 && trigger.cards2.contains(card)) ? trigger.player : false);
                                list.add(suit);
                                list2.add(suit);
                            }
                            game.getGlobalHistory('cardMove', function (evt) {
                                if (evt == trigger || (evt.name != 'lose' && evt.name != 'cardsDiscard')) return false;
                                if (evt.name == 'lose' && evt.position != ui.discardPile) return false;
                                for (var i = 0; i < evt.cards.length; i++) {
                                    var card = evt.cards[i];
                                    var suit = get.suit(card, (evt.cards2 && evt.cards2.contains(card)) ? evt.player : false);
                                    list.remove(suit);
                                    list2.add(suit);
                                    player.storage.refenyin_mark1 = suit;
                                }
                            }, trigger);
                            list2.sort();
                            player.draw(list.length);
                            var str = '';
                            for (var i = 0; i < list2.length; i++) {
                                str += get.translation(list2[i]);
                            }
                            player.storage.refenyin_mark = '';
                            player.addTempSkill('refenyin_mark');
                            player.removeMark('refenyin_mark');
                            player.addMark('refenyin_mark', str);
                        },
                        group: ["refenyin_1"],
                        subSkill: {
                            mark: {
                                onremove: function (player) {
                                    delete player.storage.refenyin_mark;
                                    delete player.storage.refenyin_mark2;
                                    player.removeMark('refenyin_mark');
                                },
                                intro: {
                                    content: function (s, p) {
                                        var str = '本回合已经进入过弃牌堆的卡牌的花色：';
                                        for (var i = 0; i < s.length; i++) {
                                            str += get.translation(s[i]);
                                        }
                                        str += '<br>本回合进入过弃牌堆的牌数：'
                                        str += p.storage.refenyin_mark2;
                                        return str;
                                    },
                                },
                                sub: true,
                            },
                        },
                    };
                    lib.skill.refenyin_1 = {
                        trigger: { global: ["loseAfter", "cardsDiscardAfter"], }, forced: true,
                        //      silent:true,
                        filter: function (event, player) {
                            if (player == _status.currentPhase) return true;
                            return false;
                        },
                        content: function () {
                            if (player.storage.refenyin_mark2 > 0) {
                                var mark = player.storage.refenyin_mark2;
                                player.storage.refenyin_1_mark = '';
                                player.addTempSkill("refenyin_1_mark");
                                player.addMark("refenyin_1_mark", mark)
                            }
                        },
                        subSkill: {
                            mark: {
                                marktext: '奋音弃牌:', intro: { name: '奋音', },
                                onremove: function (player) { player.unmarkSkill('refenyin_1_mark'); delete player.storage.refenyin_1_mark; }, sub: true,
                            },
                        },
                    };
                    //曹真 司敌            
                    lib.skill.residi_push = {
                        trigger: {
                            global: "phaseUseBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return event.player != player && player.getExpansions('residi').length > 0;
                        },
                        content: function () {
                            'step 0'
                            player.chooseButton([get.prompt('residi', trigger.player), player.getExpansions('residi')]).set('ai', function (button) {
                                var player = _status.event.player;
                                var target = _status.event.getTrigger().player;
                                if (get.attitude(player, target) > -1) return 0;
                                var card = button.link;
                                var color = get.color(button.link, false);
                                var eff = target.countCards('h', function (card) {
                                    return get.color(card, target) == color && target.hasValueTarget(card);
                                });
                                if (!target.countCards('h', function (card) {
                                    return get.color(card, target) == color && get.name(card, target) == 'sha' && target.hasValueTarget(card);
                                })) eff += 1.5;
                                if (!target.countCards('h', function (card) {
                                    return get.color(card, target) == color && get.type2(card, target) == 'trick' && target.hasValueTarget(card);
                                })) eff += 1.5;
                                return eff - 1;
                            });
                            'step 1'
                            if (result.bool) {
                                if (!trigger.residi) trigger.residi = [];
                                trigger.residi.push(player);
                                var card = result.links[0];
                                var target = trigger.player;
                                player.logSkill('residi', target);
                                player.loseToDiscardpile(card);
                                var color = get.color(card, false);
                                if (!target.storage.residi2) target.storage.residi2 = [];
                                target.storage.residi2.add(color);
                                target.addTempSkill('residi2', 'phaseUseAfter');
                                player.storage.residi_push = color == 'red' ? '红色牌' : '黑色牌';
                                var cc = player.storage.residi_push
                                target.markSkill('residi2', '', '司敌 ' + cc);
                                player.addTempSkill('residi3', 'phaseUseAfter');
                            }
                        },
                    }
                    //诸葛瞻 父荫
                    lib.skill.xinfu_fuyin1 = { trigger: { global: "phaseZhunbeiBegin", }, forced: true, audio: false, content: function () { player.addSkill("xinfu_fuyin1_mark"); player.markSkill("xinfu_fuyin1_mark"); }, subSkill: { mark: { marktext: "父荫", mark: true, intro: { name: '父荫', }, sub: true, }, }, };
                    lib.skill.xinfu_fuyin2 = { trigger: { target: "useCardToTargeted", }, filter: function (event, player) { if ((event.card.name == 'juedou' || event.card.name == 'sha')) return true; }, forced: true, audio: false, content: function () { player.unmarkSkill('xinfu_fuyin1_mark'); }, };
                    lib.skill.xinfu_fuyin = {
                        trigger: {
                            target: "useCardToTargeted",
                        },
                        forced: true,
                        audio: 2,
                        filter: function (event, player) {
                            if (event.player.countCards('h') < player.countCards('h')) return false;
                            if (event.card.name != 'sha' && event.card.name != 'juedou') return false;
                            return !game.hasPlayer2(function (current) {
                                return current.getHistory('useCard', function (evt) {
                                    return evt != event.getParent() && evt.card && ['sha', 'juedou'].contains(evt.card.name) && evt.targets.contains(player);
                                }).length > 0;
                            });
                        },
                        content: function () {
                            trigger.getParent().excluded.add(player);
                        },
                        group: ["xinfu_fuyin1", "xinfu_fuyin2"],
                    }
                    //新服朱灵
                    lib.skill.dczhanyi = {
                        audio: 2,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            var list = ['basic', 'trick', 'equip'];
                            var list2 = [];
                            var hs = player.getCards('he');
                            for (var card of hs) {
                                var type = get.type2(card, player);
                                if (list.contains(type)) {
                                    var bool = lib.filter.cardDiscardable(card, player, 'dczhanyi');
                                    if (bool) list2.add(type);
                                    else {
                                        list.remove(type);
                                        list2.remove(type);
                                    }
                                }
                            }
                            return list2.length > 0;
                        },
                        content: function () {
                            'step 0'
                            var list = ['basic', 'trick', 'equip'];
                            var list2 = [];
                            var hs = player.getCards('he');
                            for (var card of hs) {
                                var type = get.type2(card, player);
                                if (list.contains(type)) {
                                    var bool = lib.filter.cardDiscardable(card, player, 'dczhanyi');
                                    if (bool) list2.add(type);
                                    else {
                                        list.remove(type);
                                        list2.remove(type);
                                    }
                                }
                            }
                            player.chooseControl(list2, 'cancel2').set('prompt', get.prompt('dczhanyi')).set('prompt2', '弃置一种类型的所有牌').set('ai', function () {
                                var player = _status.event.player;
                                var getval = function (control) {
                                    if (control == 'cancel2') return 0;
                                    var hs = player.getCards('h'), eff = 0;
                                    var es = player.getCards('e');
                                    var ss = player.getCards('s');
                                    var sha = player.getCardUsable({ name: 'sha' });
                                    for (var i of hs) {
                                        var type = get.type2(i);
                                        if (type == control) {
                                            eff -= get.value(i, player);
                                        }
                                        else {
                                            switch (type) {
                                                case 'basic':
                                                    if (sha > 0 && get.name(card) == 'sha') {
                                                        sha--;
                                                        var add = 3;
                                                        if (!player.hasValueTarget(card) && player.hasValueTarget(card, false)) add += player.getUseValue(card, false);
                                                        eff += add;
                                                    }
                                                    break
                                                case 'trick':
                                                    if (player.hasValueTarget(card)) eff += 6;
                                                    break;
                                                case 'equip':
                                                    if (player.hasValueTarget({ name: 'guohe_copy2' })) eff += player.getUseValue({ name: 'guohe_copy2' });
                                                    break;
                                            }
                                        }
                                    }
                                    if (control == 'equip') {
                                        for (var i of es) eff -= get.value(i, player);
                                    }
                                    else {
                                        for (var i of ss) {
                                            var type = get.type2(i);
                                            if (type == control) continue;
                                            switch (type) {
                                                case 'basic':
                                                    if (sha > 0 && get.name(card) == 'sha') {
                                                        sha--;
                                                        var add = 3;
                                                        if (!player.hasValueTarget(card) && player.hasValueTarget(card, false)) add += player.getUseValue(card, false);
                                                        eff += add;
                                                    }
                                                    break
                                                case 'trick':
                                                    if (player.hasValueTarget(card)) eff += 6;
                                                    break;
                                                case 'equip':
                                                    if (player.hasValueTarget({ name: 'guohe_copy2' })) eff += player.getUseValue({ name: 'guohe_copy2' });
                                                    break;
                                            }
                                        }
                                    }
                                    return eff;
                                };
                                var controls = _status.event.controls.slice(0);
                                var eff = 0, current = 'cancel2';
                                for (var i of controls) {
                                    var effx = getval(i);
                                    if (effx > eff) {
                                        eff = effx;
                                        current = i;
                                    }
                                }
                                return current;
                            });
                            'step 1'
                            var type = result.control;
                            if (type != 'cancel2') {
                                event.type = type;
                                var cards = player.getCards('he', function (card) {
                                    return get.type2(card, player) == type;
                                });
                                if (cards.length) {
                                    player.logSkill('dczhanyi');
                                    player.discard(cards);
                                }
                                else event.finish();
                            }
                            else event.finish();
                            'step 2'
                            var list = ['basic', 'trick', 'equip'];
                            for (var i of list) {
                                if (i != event.type) player.addTempSkill('dczhanyi_' + i);
                            }
                        },
                        subSkill: {
                            basic: {
                                charlotte: true,
                                marktext: "战意 基本牌",
                                mark: true,
                                intro: {
                                    content: "使用基本牌无距离限制，且伤害值和回复值基数+1",
                                },
                                trigger: {
                                    source: ["damageBegin1", "recoverBegin"],
                                },
                                forced: true,
                                filter: function (event, player) {
                                    var evt = event.getParent();
                                    return evt.type == 'card' && get.type(evt.card, false) == 'basic';
                                },
                                logTarget: "player",
                                content: function () {
                                    trigger.num++;
                                },
                                mod: {
                                    targetInRange: function (card) {
                                        if (get.type(card) == 'basic') return true;
                                    },
                                },
                                ai: {
                                    damageBonus: true,
                                },
                                sub: true,
                            },
                            trick: {
                                charlotte: true,
                                marktext: "战意 锦囊牌",
                                mark: true,
                                intro: {
                                    content: "使用锦囊牌时摸一张牌，且锦囊牌不计入本回合的手牌上限",
                                },
                                trigger: {
                                    player: "useCard",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return get.type2(event.card) == 'trick';
                                },
                                content: function () {
                                    player.draw();
                                },
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (get.type2(card, player) == 'trick') return true;
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && get.type2(card, player) == 'trick') return false;
                                    },
                                },
                                sub: true,
                            },
                            equip: {
                                charlotte: true,
                                marktext: "战意 装备牌",
                                mark: true,
                                intro: {
                                    content: "使用装备牌时，可弃置一名其他角色的一张牌",
                                },
                                trigger: {
                                    player: "useCard",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return get.type(event.card) == 'equip' && game.hasPlayer((target) => (target != player && target.countDiscardableCards(player, 'he') > 0));
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget('战意：是否弃置一名其他角色的一张牌？', function (card, player, target) {
                                        return target != player && target.countDiscardableCards(player, 'he') > 0;
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, { name: 'guohe_copy2' }, player, player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('dczhanyi_equip', target);
                                        player.discardPlayerCard(target, 'he', true);
                                    }
                                },
                                sub: true,
                            },
                        },
                    }
                    //伏皇后 惶恐
                    lib.skill.rezhuikong = {
                        audio: 2,
                        trigger: {
                            global: "phaseZhunbeiBegin",
                        },
                        check: function (event, player) {
                            if (get.attitude(player, event.player) < -2) {
                                var cards = player.getCards('h');
                                if (cards.length > player.hp) return true;
                                for (var i = 0; i < cards.length; i++) {
                                    var useful = get.useful(cards[i]);
                                    if (useful < 5) return true;
                                    if (get.number(cards[i]) > 7 && useful < 7) return true;
                                }
                            }
                            return false;
                        },
                        logTarget: "player",
                        filter: function (event, player) {
                            return player.hp < player.maxHp && player.canCompare(event.player);
                        },
                        content: function () {
                            "step 0"
                            player.chooseToCompare(trigger.player).set('small', (player.hp > 1 && get.effect(player, { name: 'sha' }, trigger.player, player) > 0 && Math.random() < 0.9));
                            "step 1"
                            if (result.bool) {
                                trigger.player.addTempSkill('zishou2');
                                trigger.player.addTempSkill('rezhuikong_makr');
                                event.finish();
                            }
                            else if (result.target && get.position(result.target) == 'd') player.gain(result.target, 'gain2', 'log');
                            "step 2"
                            var card = { name: 'sha', isCard: true };
                            if (trigger.player.canUse(card, player, false)) trigger.player.useCard(card, player, false);
                        },
                        subSkill: {
                            makr: {
                                mark: true, marktext: '惶恐', intro: {
                                    name: '你很害怕', content: 'mark'
                                },
                            },
                        },
                    };
                    //陈到 往烈
                    lib.skill.drlt_wanglie2 = {
                        mark: true, marktext: '往烈', intro: {
                            name: '不能用牌啦', content: 'mark'
                        },
                        mod: {
                            cardEnabled: function (card, player) {
                                return false;
                            },
                        },
                    },
                        //杨修 鸡肋			
                        lib.skill.jilei = {
                            trigger: {
                                player: "damageEnd",
                            },
                            audio: 2,
                            direct: true,
                            filter: function (event) {
                                return event.source && event.source.isIn();
                            },
                            content: function () {
                                'step 0'
                                player.chooseControl('basic', 'trick', 'equip', 'cancel2', function () {
                                    var source = _status.event.source;
                                    if (get.attitude(_status.event.player, source) > 0) return 'cancel2';
                                    var list = ['basic', 'trick', 'equip'].filter(function (name) {
                                        return (!source.storage.jilei2 || !source.storage.jilei2.contains(name));
                                    });
                                    if (!list.length) return 'cancel2';
                                    if (list.contains('trick') && source.countCards('h', function (card) {
                                        return get.type(card, source) == 'trick' && source.hasValueTarget(card);
                                    }) > 1) return 'trick';
                                    return list[0];
                                }).set('prompt', get.prompt2('jilei', trigger.source)).set('source', trigger.source);
                                'step 1'
                                if (result.control != 'cancel2') {
                                    player.logSkill('jilei', trigger.source);
                                    player.popup(get.translation(result.control) + '牌');
                                    trigger.source.addTempSkill('jilei2', { player: 'phaseBegin' });
                                    trigger.source.storage.jilei2.add(result.control);
                                    trigger.source.updateMarks('jilei2');
                                    if (!trigger.source.storage.jilei3) trigger.source.storage.jilei3 = [];
                                    var str = '';
                                    if (result.control == 'trick') str = '锦';
                                    else if (result.control == 'basic') str = '基';
                                    else if (result.control == 'equip') str = '装';
                                    var num = '';
                                    if (trigger.source.storage.jilei3.indexOf(str) == -1) trigger.source.storage.jilei3 += str;
                                    if (trigger.source.storage.jilei3.indexOf('基') != -1) num += '基';
                                    if (trigger.source.storage.jilei3.indexOf('锦') != -1) num += '锦';
                                    if (trigger.source.storage.jilei3.indexOf('装') != -1) num += '装';
                                    trigger.source.addTempSkill('jilei2_mark', { player: 'phaseBegin' });
                                    trigger.source.storage.jilei2_mark = '';
                                    trigger.source.addMark('jilei2_mark', num);
                                }
                            },
                            ai: {
                                "maixie_defend": true,
                                threaten: 0.7,
                            },
                        }
                    lib.skill.jilei2 = {
                        unique: true,
                        charlotte: true,
                        /*  intro:{
                              content:function(storage){
                                  return '不能使用、打出或弃置'+get.translation(storage)+'牌';
                              },
                          },*/
                        init: function (player, skill) {
                            if (!player.storage[skill]) player.storage[skill] = [];
                        },
                        onremove: function (player) {
                            player.unmarkSkill('jilei2_mark');
                            delete player.storage.jilei2_mark;
                            delete player.storage.jilei2;
                            delete player.storage.jilei3;
                            delete player.storage.gzjilei3;
                        },
                        /*  mark:true,*/
                        /*onremove:true,*/
                        mod: {
                            cardDiscardable: function (card, player) {
                                if (player.storage.jilei2.contains(get.type(card, 'trick'))) return false;
                            },
                            cardEnabled: function (card, player) {
                                if (player.storage.jilei2.contains(get.type(card, 'trick'))) return false;
                            },
                            cardRespondable: function (card, player) {
                                if (player.storage.jilei2.contains(get.type(card, 'trick'))) return false;
                            },
                            cardSavable: function (card, player) {
                                if (player.storage.jilei2.contains(get.type(card, 'trick'))) return false;
                            },
                        },
                        subSkill: {
                            mark: {
                                mark: true,
                                intro: {
                                },
                                sub: true,
                            },
                        },
                    }
                    lib.skill.gzjilei = {
                        inherit: "jilei",
                        content: function () {
                            'step 0'
                            player.chooseControl('basic', 'trick', 'equip', 'cancel2', function () {
                                var source = _status.event.source;
                                if (get.attitude(_status.event.player, source) > 0) return 'cancel2';
                                var list = ['basic', 'trick', 'equip'].filter(function (name) {
                                    return (!source.storage.jilei2 || !source.storage.jilei2.contains(name));
                                });
                                if (!list.length) return 'cancel2';
                                if (list.contains('trick') && source.countCards('h', function (card) {
                                    return get.type(card, source) == 'trick' && source.hasValueTarget(card);
                                }) > 1) return 'trick';
                                return list[0];
                            }).set('prompt', get.prompt2('jilei', trigger.source)).set('source', trigger.source).setHiddenSkill('gzjilei');
                            'step 1'
                            if (result.control != 'cancel2') {
                                player.logSkill('gzjilei', trigger.source);
                                player.chat(get.translation(result.control) + '牌');
                                game.log(player, '声明了', '#y' + get.translation(result.control) + '牌');
                                trigger.source.addTempSkill('jilei2', { player: 'phaseBegin' });
                                trigger.source.storage.jilei2.add(result.control);
                                trigger.source.updateMarks('jilei2');
                                game.delayx();
                                if (!trigger.source.storage.gzjilei3) trigger.source.storage.gzjilei3 = [];
                                var str = ''; if (result.control == 'trick') str = '锦';
                                else if (result.control == 'basic') str = '基';
                                else if (result.control == 'equip') str = '装';
                                var num = ''; if (trigger.source.storage.gzjilei3.indexOf(str) == -1) trigger.source.storage.gzjilei3 += str;
                                if (trigger.source.storage.gzjilei3.indexOf('基') != -1) num += '基';
                                if (trigger.source.storage.gzjilei3.indexOf('锦') != -1) num += '锦';
                                if (trigger.source.storage.gzjilei3.indexOf('装') != -1) num += '装';
                                trigger.source.addTempSkill('jilei2_mark', { player: 'phaseBegin' });
                                trigger.source.storage.jilei2_mark = '';
                                trigger.source.addMark('jilei2_mark', num);
                            }
                        },
                        trigger: {
                            player: "damageEnd",
                        },
                        audio: 2,
                        direct: true,
                        filter: function (event) {
                            return event.source && event.source.isIn();
                        },
                        ai: {
                            "maixie_defend": true,
                            threaten: 0.7,
                        },
                    }
                    /*界黄盖 诈降*/
                    lib.skill.zhaxiang2 = {
                        mark: true,
                        marktext: '诈降',
                        intro: {
                            name: '诈降',
                            content: 'mark'
                        },
                        mod: {
                            targetInRange: function (card, player, target, now) {
                                if (card.name == 'sha' && get.color(card) == 'red') return true;
                            },
                            cardUsable: function (card, player, num) {
                                if (card.name == 'sha') return num + player.storage.zhaxiang2;
                            },
                        },
                        onremove: true,
                        trigger: {
                            player: "useCard",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return event.card && event.card.name == 'sha' && get.color(event.card) == 'red';
                        },
                        content: function () {
                            trigger.directHit.addArray(game.players);
                        },
                        ai: {
                            "directHit_ai": true,
                            skillTagFilter: function (player, tag, arg) {
                                return arg.card.name == 'sha' && get.color(arg.card) == 'red';
                            },
                        },
                    },
                        //张松 献图
                        lib.skill.xiantu = {
                            audio: "xiantu1",
                            group: "xiantu2",
                            trigger: {
                                global: "phaseUseBegin",
                            },
                            filter: function (event, player) {
                                return event.player != player;
                            },
                            logTarget: "player",
                            check: function (event, player) {
                                if (get.attitude(player, event.player) < 5) return false;
                                if (player.maxHp - player.hp >= 2) return false;
                                if (player.hp == 1) return false;
                                if (player.hp == 2 && player.countCards('h') < 2) return false;
                                if (event.player.countCards('h') >= event.player.hp) return false;
                                return true;
                            },
                            content: function () {
                                "step 0"
                                player.draw(2);
                                player.addTempSkill('xiantu_mark');
                                "step 1"
                                player.chooseCard(2, 'he', true, '交给' + get.translation(trigger.player) + '两张牌').set('ai', function (card) {
                                    if (ui.selected.cards.length && card.name == ui.selected.cards[0].name) return -1;
                                    if (get.tag(card, 'damage')) return 1;
                                    if (get.type(card) == 'equip') return 1;
                                    return 0;
                                });
                                "step 2"
                                trigger.player.gain(result.cards, player, 'giveAuto');
                                trigger.player.addSkill('xiantu4');
                                trigger.player.storage.xiantu4.push(player);
                            },
                            ai: {
                                threaten: 1.1,
                                expose: 0.3,
                            },
                            subSkill: {
                                mark: {
                                    mark: true,
                                    marktext: '献图',
                                    intro: {
                                    },
                                    sub: true,
                                },
                            },
                        };
                    //除害（周处）
                    lib.skill.rechuhai = {
                        audio: "chuhai",
                        inherit: "chuhai",
                        dutySkill: true,
                        locked: true,
                        group: ["rechuhai_add", "rechuhai_achieve", "rechuhai_fail"],
                        derivation: "zhangming",
                        prompt: "与一名其他角色进行拼点",
                        subSkill: {
                            add: {
                                trigger: {
                                    player: "compare",
                                },
                                forced: true,
                                popup: false,
                                filter: function (event, player) {
                                    return event.getParent().name == 'rechuhai' && event.num1 < 13 && player.countCards('e') < 4;
                                },
                                content: function () {
                                    var num = 4 - player.countCards('e');
                                    game.log(player, '的拼点牌点数+', num);
                                    trigger.num1 = Math.min(13, trigger.num1 + num);
                                },
                                sub: true,
                            },
                            achieve: {
                                audio: "rechuhai",
                                trigger: {
                                    player: "equipAfter",
                                },
                                forced: true,
                                skillAnimation: true,
                                animationColor: "wood",
                                filter: function (event, player) {
                                    return player.countCards('e') > 2;
                                },
                                content: function () {
                                    player.awakenSkill('rechuhai');
                                    player.shixiaoSkill("rechuhai");
                                    game.log(player, '成功完成使命');
                                    if (player.isDamaged()) player.recover(player.maxHp - player.hp);
                                    player.removeSkill('xianghai');
                                    player.addSkill('zhangming');
                                },
                                sub: true,
                            },
                            fail: {
                                trigger: {
                                    player: "chooseToCompareAfter",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return event.getParent().name == 'rechuhai' && event.num1 < 7 && !event.result.bool;
                                },
                                content: function () {
                                    player.awakenSkill('rechuhai');
                                    player.shixiaoSkill("rechuhai");
                                    player.failSkill('rechuhai');
                                    game.log(player, '使命失败');
                                    //decadeUI.animation.playSpine({ name: 'chuhaishibai', speed: 1, }, { scale: 0.8, x: [0, 0.55], parent: player });
                                    dcdAnim.loadSpine(xixiguagua.chuhaishibai.name, "skel", function () {
                                        dcdAnim.playSpine(xixiguagua.chuhaishibai, { scale: 0.8, speed: 1, x: [0, 0.55], parent: player });
                                    });
                                },
                                sub: true,
                            },
                            mark: {
                                mark: true,
                                marktext: '除害',
                                intro: {
                                },
                                sub: true,
                            },
                        },
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return !player.hasSkillTag('noCompareSource');
                        },
                        filterTarget: function (card, player, target) {
                            return target != player && target.countCards('h') > 0 &&
                                !target.hasSkillTag('noCompareTarget');
                        },
                        content: function () {
                            'step 0'
                            player.draw();
                            'step 1'
                            if (player.canCompare(target)) player.chooseToCompare(target);
                            else event.finish();
                            'step 2'
                            if (result.bool) {
                                player.storage.chuhai2 = target;
                                player.addTempSkill('chuhai2', 'phaseUseEnd');
                                target.addTempSkill('rechuhai_mark', 'phaseUseEnd')
                                if (target.countCards('h') > 0) {
                                    player.viewHandcards(target);
                                    var types = [], cards = [], hs = target.getCards('h');
                                    for (var i of hs) {
                                        types.add(get.type2(i, target));
                                    }
                                    for (var i of types) {
                                        var card = get.cardPile(function (card) {
                                            return get.type2(card, false) == i;
                                        });
                                        if (card) cards.push(card);
                                    }
                                    if (cards.length) player.gain(cards, 'gain2', 'log');
                                }
                            }
                        },
                        ai: {
                            order: 9,
                            result: {
                                target: function (player, target) {
                                    if (player.countCards('hs', function (card) {
                                        return get.tag(card, 'damage') > 0 && player.canUse(card, target, null, true) &&
                                            get.effect(target, card, player, player) > 0 && player.hasValueTarget(card, null, true);
                                    }) > 0) return -3;
                                    return -1;
                                },
                            },
                        },
                    };
                    lib.skill.xianghai = {
                        audio: 2,
                        global: "xianghai_g",
                        mark: true,
                        marktext: '乡害',
                        intro: {},
                        mod: {
                            cardname: function (card) {
                                if (get.type(card, null, false) == 'equip') return 'jiu';
                            },
                        },
                        ai: {
                            threaten: 2,
                        },
                    }
                    //谋马超   铁骑
                    lib.skill.sbtieji = {
                        audio: 1,
                        trigger: {
                            player: 'useCardToPlayered'
                        },
                        logTarget: 'target',
                        filter: function (event, player) {
                            return player != event.target && event.card.name == 'sha' && event.target.isIn();
                        },
                        check: function (event, player) {
                            return get.attitude(player, event.target) < 0;
                        },
                        content: function () {
                            'step 0'
                            var target = trigger.target;
                            event.target = target;
                            target.addTempSkill('fengyin');
                            trigger.directHit.add(target);
                            player.chooseToDuiben(target).set('title', '谋弈').set('namelist', [
                                '出阵迎战', '拱卫中军', '直取敌营', '扰阵疲敌'
                            ]);
                            dcdAnim.loadSpine(xixiguagua.mouyi.name, "skel")
                            'step 1'
                            if (result.bool) {
                                if (result.player == 'db_def1') {
                                    player.gainPlayerCard(target, 'he', true);
                                    xixiguagua.mouyi.action = 'play3';
                                    game.playAudio('../extension/标记补充/audio/effect_jizhitu_zhiqudiying_1.mp3');
                                    dcdAnim.playSpine(xixiguagua.mouyi, { scale: 0.8 });
                                    game.delay(3.5);
                                } else {
                                    player.draw(2);
                                    xixiguagua.mouyi.action = 'play6';
                                    game.playAudio('../extension/标记补充/audio/effect_jizhitu_raozhenpidi_1.mp3');
                                    dcdAnim.playSpine(xixiguagua.mouyi, { scale: 0.8 });
                                    game.delay(3.5);
                                }
                            }else {
                                if (result.player=='db_def1') {
                                    xixiguagua.mouyi.action = 'play4';
                                    game.playAudio('../extension/标记补充/audio/effect_jizhitu_zhiqudiying_2.mp3');
                                    dcdAnim.playSpine(xixiguagua.mouyi, { scale: 0.8 });
                                    game.delay(3.5);
                                } else {
                                    xixiguagua.mouyi.action = 'play5';
                                    game.playAudio('../extension/标记补充/audio/effect_jizhitu_raozhenpidi_2.mp3');
                                    dcdAnim.playSpine(xixiguagua.mouyi, { scale: 0.8 });
                                    game.delay(3.5);
                                }
                            }
                        },
                        shaRelated: true,
                        ai: {
                            ignoreSkill: true,
                            skillTagFilter: function (player, tag, arg) {
                                if (tag == 'directHit_ai') {
                                    return get.attitude(player, arg.target) <= 0;
                                }
                                if (!arg || arg.isLink || !arg.card || arg.card.name != 'sha') return false;
                                if (!arg.target || get.attitude(player, arg.target) >= 0) return false;
                                if (!arg.skill || !lib.skill[arg.skill] || lib.skill[arg.skill].charlotte || get.is.locked(arg.skill) || !arg.target.getSkills(true, false).contains(arg.skill)) return false;
                            },
                            directHit_ai: true,
                        },
                        subSkill: {
                            true1: { audio: true },
                            true2: { audio: true },
                            false: { audio: true },
                        }
                    }
                    //==========断粮==========//
                    lib.skill.sbduanliang = {
                        audio: 1,
                        enable: 'phaseUse',
                        usable: 1,
                        filterTarget: lib.filter.notMe,
                        content: function () {
                            'step 0'
                            player.chooseToDuiben(target).set('title', '谋弈').set('namelist', [
                                '固守城池', '突出重围', '围城断粮', '擂鼓进军'
                            ]).set('ai', button => {
                                var source = _status.event.getParent().player, target = _status.event.getParent().target;
                                if (get.effect(target, { name: 'juedou' }, source, source) >= 10 && button.link[2] == 'db_def2' && Math.random() < 0.5) return 10;
                                return 1 + Math.random();
                            });
                            dcdAnim.loadSpine(xixiguagua.mouyi.name, "skel")
                            'step 1'
                            if (result.bool) {
                                if (result.player == 'db_def1') {
                                    if (target.hasJudge('bingliang')) player.gainPlayerCard(target, 'he', true);
                                    else {
                                        if (ui.cardPile.childNodes.length > 0) {
                                            if (player.canUse(get.autoViewAs({ name: 'bingliang' }, [ui.cardPile.firstChild]), target, false)) {
                                                player.useCard({ name: 'bingliang' }, target, get.cards());
                                            }
                                        }
                                    }
                                    xixiguagua.mouyi.action = 'play7';
                                    game.playAudio('../extension/标记补充/audio/effect_jizhitu_duanliangchenggon_1.mp3');
                                    dcdAnim.playSpine(xixiguagua.mouyi, { scale: 0.8 });
                                    game.delay(3.5);
                                }
                                else {
                                    var card = { name: 'juedou', isCard: true };
                                    if (player.canUse(card, target)) player.useCard(card, target);
                                    xixiguagua.mouyi.action = 'play1';
                                    game.playAudio('../extension/标记补充/audio/effect_jizhitu_leigujinjun_1.mp3');
                                    dcdAnim.playSpine(xixiguagua.mouyi, { scale: 0.8 });
                                    game.delay(3.5);
                                }
                            } else {
                                if (result.player=='db_def1') {
                                    xixiguagua.mouyi.action = 'play8';
                                    game.playAudio('../extension/标记补充/audio/effect_jizhitu_duanliangchenggon_2.mp3');
                                    dcdAnim.playSpine(xixiguagua.mouyi, { scale: 0.8 });
                                    game.delay(3.5);
                                } else {
                                    xixiguagua.mouyi.action = 'play2';
                                    game.playAudio('../extension/标记补充/audio/effect_jizhitu_leigujinjun_2.mp3');
                                    dcdAnim.playSpine(xixiguagua.mouyi, { scale: 0.8 });
                                    game.delay(3.5);
                                }
                            }
                        },
                        ai: {
                            threaten: 1.2,
                            order: 5.5,
                            result: {
                                player: 1,
                                target: -1
                            }
                        },
                        subSkill: {
                            true1: { audio: true },
                            true2: { audio: true },
                            false: { audio: true },
                        }
                    }
                    //==========断粮==========//
                    //==========守邺==========//
                    lib.skill.shouye = {
                        audio: 2,
                        group: "shouye_after",
                        trigger: {
                            target: "useCardToTarget",
                        },
                        filter: function (event, player) {
                            return event.player != player && event.targets.length == 1;
                        },
                        check: function (event, player) {
                            if (event.player == game.me || event.player.isOnline()) return get.attitude(player, event.player) < 0;
                            return get.effect(player, event.card, event.player, player) < 0;
                        },
                        usable: 1,
                        logTarget: "player",
                        content: function () {
                            'step 0'
                            player.line(trigger.player, 'green');
                            player.chooseToDuiben(trigger.player);
                            dcdAnim.loadSpine(xixiguagua.chengchi.name, "skel")
                            'step 1'
                            var animation1;
                            if (result.bool) {
                                trigger.targets.remove(player);
                                trigger.getParent()
                                    .triggeredTargets2.remove(player);
                                trigger.getParent()
                                    .shouyeer = player;
                                xixiguagua.chengchi.action = 'play';
                                dcdAnim.playSpine(xixiguagua.chengchi);
                                game.delay(3.5);
                            } else {
                                xixiguagua.chengchi.action = 'play2';
                                dcdAnim.playSpine(xixiguagua.chengchi);
                                game.delay(3.5);
                            }
                        },
                        subSkill: {
                            after: {
                                sub: true,
                                trigger: {
                                    global: "useCardAfter",
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                filter: function (event, player) {
                                    if (event.shouyeer != player) return false;
                                    if (event.cards) {
                                        for (var i = 0; i < event.cards.length; i++) {
                                            if (event.cards[i].isInPile()) return true;
                                        }
                                    }
                                    return false;
                                },
                                content: function () {
                                    var list = [];
                                    for (var i = 0; i < trigger.cards.length; i++) {
                                        if (trigger.cards[i].isInPile()) {
                                            list.push(trigger.cards[i]);
                                        }
                                    }
                                    player.gain(list, 'gain2', 'log');
                                },
                            },
                        },
                    }
                    //==========守邺==========//
                    //岑昏 极奢           
                    lib.skill.jishe = {
                        audio: 2,
                        enable: "phaseUse",
                        filter: function (event, player) {
                            return player.getHandcardLimit() > 0;
                        },
                        init: function (player) {
                            player.storage.jishe = 0;
                        },
                        usable: 20,
                        content: function () {
                            player.draw();
                            player.storage.jishe++;
                            player.unmarkSkill('jishe_mark');
                            var mark = player.getHandcardLimit();
                            player.storage.jishe_mark = '';
                            player.addTempSkill("jishe_mark");
                            player.markSkill("jishe_mark", '', '极奢 ' + mark);
                        },
                        ai: {
                            order: 10,
                            result: {
                                player: function (player) {
                                    if (!player.needsToDiscard(1)) {
                                        return 1;
                                    }
                                    return 0;
                                },
                            },
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num - player.storage.jishe;
                            },
                        },
                        group: ["jishe2", "jishe3"],
                        subSkill: {
                            mark: {
                                //  mark:true,            
                                intro: {
                                },
                                sub: true,
                            },
                        },
                    }
                    //曹彰 将驰
                    lib.skill.rejiangchi = {
                        audio: 2,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            var list = ['弃牌', '摸牌', '取消'];
                            if (!player.countCards('he')) list.remove('弃牌');
                            player.chooseControl(list, function () {
                                var player = _status.event.player;
                                if (list.contains('弃牌')) {
                                    if (player.countCards('h') > 3 && player.countCards('h', 'sha') > 1) {
                                        return '弃牌';
                                    }
                                    if (player.countCards('h', 'sha') > 2) {
                                        return '弃牌';
                                    }
                                }
                                if (!player.countCards('h', 'sha')) {
                                    return '摸牌';
                                }
                                return 'cancel2';
                            }).set('prompt', get.prompt2('rejiangchi'));
                            "step 1"
                            if (result.control == '弃牌') {
                                player.chooseToDiscard(true, 'he');
                                player.addTempSkill('jiangchi2', 'phaseUseEnd');
                                player.addTempSkill('rejiangchi_mark', 'phaseUseEnd');
                                player.logSkill('rejiangchi');
                            }
                            else if (result.control == '摸牌') {
                                player.draw();
                                player.addTempSkill('rejiangchi3', 'phaseUseEnd');
                                player.addTempSkill('rejiangchi_mark2', 'phaseUseEnd');
                                player.logSkill('rejiangchi');
                            }
                        },
                        subSkill: {
                            mark: {
                                mark: true,
                                marktext: '将驰 多出杀',
                                intro: {
                                },
                                sub: true,
                            },
                            mark2: {
                                mark: true,
                                marktext: '将驰 不能出杀',
                                intro: {
                                },
                                sub: true,
                            },
                        },
                    }
                    //魏延 奇谋
                    lib.skill.qimou = {
                        unique: true,
                        limited: true,
                        audio: 2,
                        enable: "phaseUse",
                        filter: function (event, player) {
                            return !player.storage.qimou;
                        },
                        init: function (player) {
                            player.storage.qimou = false;
                        },
                        mark: true,
                        intro: {
                            content: "limited",
                        },
                        skillAnimation: true,
                        animationColor: "orange",
                        content: function () {
                            'step 0'
                            var shas = player.getCards('h', 'sha');
                            var num;
                            if (player.hp >= 4 && shas.length >= 3) {
                                num = 3;
                            }
                            else if (player.hp >= 3 && shas.length >= 2) {
                                num = 2;
                            }
                            else {
                                num = 1
                            }
                            var map = {};
                            var list = [];
                            for (var i = 1; i <= player.hp; i++) {
                                var cn = get.cnNumber(i, true);
                                map[cn] = i;
                                list.push(cn);
                            }
                            event.map = map;
                            player.awakenSkill('qimou');
                            player.storage.qimou = true;
                            player.chooseControl(list, function () {
                                return get.cnNumber(_status.event.goon, true);
                            }).set('prompt', '失去任意点体力').set('goon', num);
                            'step 1'
                            var num = event.map[result.control] || 1;
                            player.storage.qimou2 = num;
                            player.loseHp(num);
                            player.addTempSkill('qimou2');
                            player.storage.qimou_mark = '';
                            var cc = num;
                            player.addTempSkill("qimou_mark");
                            player.markSkill("qimou_mark", '', '奇谋 ' + cc);
                        },
                        subSkill: {
                            mark: {
                                // mark:true,            
                                intro: {
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            order: 2,
                            result: {
                                player: function (player) {
                                    if (player.hp == 1) return 0;
                                    var shas = player.getCards('h', 'sha');
                                    if (!shas.length) return 0;
                                    var card = shas[0];
                                    if (!lib.filter.cardEnabled(card, player)) return 0;
                                    if (lib.filter.cardUsable(card, player)) return 0;
                                    var mindist;
                                    if (player.hp >= 4 && shas.length >= 3) {
                                        mindist = 4;
                                    }
                                    else if (player.hp >= 3 && shas.length >= 2) {
                                        mindist = 3;
                                    }
                                    else {
                                        mindist = 2;
                                    }
                                    if (game.hasPlayer(function (current) {
                                        return (current.hp <= mindist - 1 &&
                                            get.distance(player, current, 'attack') <= mindist &&
                                            player.canUse(card, current, false) &&
                                            get.effect(current, card, player, player) > 0);
                                    })) {
                                        return 1;
                                    }
                                    return 0;
                                },
                            },
                        },
                    }
lib.skill.dcxianzhu={
    audio:2,
    trigger:{
        source:"damageSource",
    },
    direct:true,    
    filter:function(event,player){
        if(!event.card||event.card.name!='sha') return false;
        var card=player.getEquip('dagongche');
        if(!card) return false;
        var num=0;
        for(var i=1;i<=3;i++){
            var key='大攻车选项'+get.cnNumber(i,true);
            if(card.storage[key]) num+=card.storage[key];
        }
        return num<5;
    },
    content:function(){
        'step 0'
        var choiceList=[
            '令【杀】无距离限制且无视防具',
            '令【杀】的可选目标数+1',
            '令后续的弃牌数量+1',
        ];
        var list=[];
        var card=player.getEquip('dagongche');
        for(var i=1;i<=3;i++){
            var key='大攻车选项'+get.cnNumber(i,true);
            var num=card.storage[key];
            if(i==1){
                if(!num) list.push('选项一');
                else choiceList[0]=('<span style="opacity:0.5; ">'+choiceList[0]+'（已强化）</span>');
            }
            else{
                list.push('选项'+get.cnNumber(i,true));
                if(num) choiceList[i-1]+=('（已强化'+num+'次）');
            }
        }
        player.chooseControl(list,'cancel2').set('prompt','是否发动【陷筑】强化【大攻车】？').set('choiceList',choiceList).set('ai',function(){
            var player=_status.event.player,controls=_status.event.controls.slice(0);
            var getval=function(choice){
                var card=player.getEquip('dagongche');
                if(choice=='选项一'){
                    card.storage.大攻车选项一=1;
                    var goon=false;
                    if(game.hasPlayer(function(current){
                        var eff1=0,eff2=0;
                        var cardx={name:'sha',isCard:true};
                        if(player.canUse(cardx,current)) eff1=get.effect(current,cardx,player,player);
                        cardx.storage={dagongche:true};
                        if(player.canUse(cardx,current)) eff2=get.effect(current,cardx,player,player);
                        return (eff2>eff1);
                    })) goon=true;
                    delete card.storage.大攻车选项一;
                    if(goon) return 5;
                    return 0;
                }
                else if(choice=='选项二'){
                    var num=1;
                    if(card.storage.大攻车选项二) num+=card.storage.大攻车选项二;
                    var cardx={name:'sha',isCard:true};
                    if(game.countPlayer(function(current){
                        return player.canUse(cardx,current)&&get.effect(current,cardx,player,player)>0;
                    })>num) return 2;
                }
                else if(choice=='选项三') return 1;
                return 0;
            };
            var eff=0,current='cancel2';
            for(var i of controls){
                var effx=getval(i);
                if(effx>eff){
                    eff=effx;
                    current=i;
                }
            }
            return current;
        });
        'step 1'
        if(result.control!='cancel2'){
            player.addMark('dcxianzhu');
            player.logSkill('dcxianzhu');
            var card=player.getEquip('dagongche'),key='大攻车'+result.control;
            if(!card.storage[key]) card.storage[key]=0;
            card.storage[key]++;
            lib.skill.dcwanglu.broadcast(player);            
        }
         if(card.storage.大攻车选项一!=undefined){
         player.storage.大攻车选项一='已强化'}else{
         player.storage.大攻车选项一='未强化'
         }
         if(card.storage.大攻车选项二!=undefined){
         player.storage.大攻车选项二=card.storage.大攻车选项二;}
         if(card.storage.大攻车选项三!=undefined){
         player.storage.大攻车选项三=card.storage.大攻车选项三+1;}        
    },
    mark:true,
    init:function(player){player.storage.dcxianzhu=0,player.storage.大攻车选项一='未强化',player.storage.大攻车选项二=0,player.storage.大攻车选项三=1},
                                    intro: {
                                    mark:function(dialog,storage,player){
                             if(player.storage.dcxianzhu<5){str = '大攻车升级了 :'+"<font color=\"#FFD700\">"+player.storage.dcxianzhu+"<font color=\"#FFFFFF\">"+'次';}else{str = '大攻车升级了 :'+"<font color=\"#FF3300\">"+player.storage.dcxianzhu+"<font color=\"#FFFFFF\">"+'次';}
                                        str += '<br>无视距离和防具: '
                                        str += "<font color=\"#66FF00\">"+player.storage.大攻车选项一+"<font color=\"#FFFFFF\">";
                                        str += '<br>额外选择角色: '
                                        str += "<font color=\"#66FF00\">"+player.storage.大攻车选项二+"<font color=\"#FFFFFF\">"+'名';
                                        str += '<br>造成伤害弃置: '
                                        str += "<font color=\"#66FF00\">"+player.storage.大攻车选项三+"<font color=\"#FFFFFF\">"+'张牌';
                                    if(player.getEquip('dagongche')) {
                                      return  str;}else{
                                     return  '未装备大攻车';}
                                    },
                                },
}
lib.skill.olzeyue={
    audio:2,
    trigger:{
        player:"phaseZhunbeiBegin",
    },
    limited:true,
    skillAnimation:true,
    animationColor:"water",
    direct:true,
    filter:function(event,player){
        var sources=[],history=player.actionHistory;
        for(var i=history.length-1;i>=0;i--){
            if(i<history.length-1&&history[i].isMe) break;
            for(var evt of history[i].damage){
                if(evt.source&&evt.source!=player&&evt.source.isIn()) sources.add(evt.source);
            }
        }
        for(var source of sources){
            var skills=source.getStockSkills('一！','五！');
            for(var skill of skills){
                var info=get.info(skill);
                if(info&&!info.charlotte&&!get.is.locked(skill,source)&&source.hasSkill(skill,null,null,false)) return true;
            }
        }
        return false;
    },
    content:function(){
        'step 0'
        var sources=[],history=player.actionHistory;
        for(var i=history.length-1;i>=0;i--){
            if(i<history.length-1&&history[i].isMe) break;
            for(var evt of history[i].damage){
                if(evt.source&&evt.source!=player&&evt.source.isIn()) sources.add(evt.source);
            }
        }
        sources=sources.filter(function(source){
            var skills=source.getStockSkills('一！','五！');
            for(var skill of skills){
                var info=get.info(skill);
                if(info&&!info.charlotte&&!get.is.locked(skill,source)&&source.hasSkill(skill,null,null,false)) return true;
            }
            return false;
        });
        player.chooseTarget(get.prompt('olzeyue'),'令一名可选角色的一个非锁定技失效',function(card,player,target){
            return _status.event.sources.contains(target);
        }).set('sources',sources).set('ai',function(target){
            var player=_status.event.player,att=get.attitude(player,target);
            if(att>=0) return 0;
            return get.threaten(target,player);
        });
        'step 1'
        if(result.bool){
            var target=result.targets[0];
            player.logSkill('olzeyue',target);
            player.awakenSkill('olzeyue');
            event.target=target;
            var skills=target.getStockSkills('一！','五！');
            skills=skills.filter(function(skill){
                var info=get.info(skill);
                if(info&&!info.charlotte&&!get.is.locked(skill,target)&&target.hasSkill(skill,null,null,false)) return true;
            });
            if(skills.length==1) event._result={control:skills[0]};
            else player.chooseControl(skills).set('prompt','令'+get.translation(target)+'的一个技能失效');
        }
        else event.finish();
        'step 2'
        var skill=result.control;
        target.disableSkill('olzeyue_'+player.playerid,skill);
        target.storage['olzeyue_'+player.playerid]=true;
        player.addSkill('olzeyue_round');
        player.markAuto('olzeyue_round',[target]);
        if(!player.storage.olzeyue_map) player.storage.olzeyue_map={};
        player.storage.olzeyue_map[target.playerid]=0;
        game.log(target,'的技能','#g【'+get.translation(skill)+'】','被失效了');
        target.unmarkSkill('olzeyue_mark');       
        target.storage.olzeyue_mark='';
        target.addSkill("olzeyue_mark"); 
        target.markSkill("olzeyue_mark",'','迮阅 '+get.translation(skill));        
        
    },
    ai:{
        threaten:3,
    },
    subSkill:{
        mark:{intro:{},sub:true,},
        round:{
            trigger:{
                global:"roundStart",
            },
            forced:true,
            charlotte:true,
            popup:false,
            filter:function(event,player){
                var storage=player.getStorage('olzeyue_round');
                for(var source of storage){
                    if(source.isIn()&&source.canUse('sha',player,false)) return true;
                }
                return false;
            },
            content:function(){
                'step 0'
                event.targets=player.storage.olzeyue_round.slice(0).sortBySeat();
                event.target=event.targets.shift();
                'step 1'
                var map=player.storage.olzeyue_map;
                if(target.storage['olzeyue_'+player.playerid]) map[target.playerid]++;
                event.num=map[target.playerid]-1;
                if(event.num<=0) event.finish();
                'step 2'
                event.num--;
                target.useCard(player,{name:'sha',isCard:true},false,'olzeyue_round');
                'step 3'
                var key='olzeyue_'+player.playerid;
                if(target.storage[key]&&player.hasHistory('damage',function(evt){
                    return evt.card.name=='sha'&&evt.getParent().type=='card'&&evt.getParent(3)==event;
                })){
                    for(var skill in target.disabledSkills){
                        if(target.disabledSkills[skill].contains(key)){
                        game.log(target,'恢复了技能','#g【'+get.translation(skill)+'】');
                        target.removeSkill('olzeyue_mark');}
                    }
                    delete target.storage[key];
                    target.enableSkill(key);
                }
                if(event.num>0&&player.isIn()&&target.isIn()&&target.canUse('sha',player,false)){
                    event.goto(2);
                }
                else if(event.targets.length>0){
                    event.target=event.targets.shift();
                    event.goto(1);
                }
            },
            sub:true,
        },
    },
    mark:true,
    intro:{
        content:"limited",
    },
    init:function(player,skill){
        player.storage[skill]=false;
    },
}
lib.skill.dcchaixie={
    audio:2,
    trigger:{
        player:["loseAfter"],
        global:["equipAfter","addJudgeAfter","gainAfter","loseAsyncAfter","addToExpansionAfter"],
    },
    forced:true,
    filter:function(event,player){
        var evt=event.getl(player);
        if(!evt||!evt.es||!evt.es.length) return false;
        for(var card of evt.es){
            if(card.name=='dagongche'){
                for(var i=1;i<=3;i++){
                    if(card.storage['大攻车选项'+get.cnNumber(i,true)]) return true;
                }
            }
        }
        return false;
    },
    content:function(){
        var num=0;
        var evt=trigger.getl(player);
        for(var card of evt.es){
            if(card.name=='dagongche'){
                for(var i=1;i<=3;i++){
                    var key='大攻车选项'+get.cnNumber(i,true);
                    if(card.storage[key]) num+=card.storage[key];
                }
            }
        }
        player.draw(num);
        player.storage.大攻车选项一='未强化';
        player.storage.大攻车选项二=0;
        player.storage.大攻车选项三=1;
        player.storage.dcxianzhu=0;
    },
}                 
                    //界魏延 奇谋
                    lib.skill.reqimou = {
                        unique: true,
                        limited: true,
                        audio: 2,
                        enable: "phaseUse",
                        filter: function (event, player) {
                            return !player.storage.reqimou;
                        },
                        init: function (player) {
                            player.storage.reqimou = false;
                        },
                        mark: true,
                        intro: {
                            content: "limited",
                        },
                        skillAnimation: true,
                        animationColor: "orange",
                        content: function () {
                            'step 0'
                            var shas = player.getCards('h', 'sha');
                            var num;
                            if (player.hp >= 4 && shas.length >= 3) {
                                num = 3;
                            }
                            else if (player.hp >= 3 && shas.length >= 2) {
                                num = 2;
                            }
                            else {
                                num = 1
                            }
                            var map = {};
                            var list = [];
                            for (var i = 1; i <= player.hp; i++) {
                                var cn = get.cnNumber(i, true);
                                map[cn] = i;
                                list.push(cn);
                            }
                            event.map = map;
                            player.awakenSkill('reqimou');
                            player.storage.reqimou = true;
                            player.chooseControl(list, function () {
                                return get.cnNumber(_status.event.goon, true);
                            }).set('prompt', '失去任意点体力').set('goon', num);
                            'step 1'
                            var num = event.map[result.control] || 1;
                            player.storage.reqimou2 = num;
                            player.loseHp(num);
                            player.draw(num);
                            player.addTempSkill('reqimou2');
                            player.storage.reqimou_mark = '';
                            var cc = num;
                            player.addTempSkill("reqimou_mark");
                            player.markSkill("reqimou_mark", '', '奇谋 ' + cc);
                        },
                        subSkill: {
                            mark: {
                                // mark:true,            
                                intro: {
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            order: 2,
                            result: {
                                player: function (player) {
                                    if (player.hp == 1) return 0;
                                    var shas = player.getCards('h', 'sha');
                                    if (!shas.length) return 0;
                                    var card = shas[0];
                                    if (!lib.filter.cardEnabled(card, player)) return 0;
                                    if (lib.filter.cardUsable(card, player)) return 0;
                                    var mindist;
                                    if (player.hp >= 4 && shas.length >= 3) {
                                        mindist = 4;
                                    }
                                    else if (player.hp >= 3 && shas.length >= 2) {
                                        mindist = 3;
                                    }
                                    else {
                                        mindist = 2;
                                    }
                                    if (game.hasPlayer(function (current) {
                                        return (current.hp <= mindist - 1 &&
                                            get.distance(player, current, 'attack') <= mindist &&
                                            player.canUse(card, current, false) &&
                                            get.effect(current, card, player, player) > 0);
                                    })) {
                                        return 1;
                                    }
                                    return 0;
                                },
                            },
                        },
                    }

                    lib.skill.wfyuyan = {
                        audio: 2,
                        derivation: "refenyin",
                        trigger: {
                            global: "roundStart",
                        },
                        forced: true,
                        content: function () {
                            'step 0'
                            var next = player.chooseTarget('请选择【预言】的目标', true).set('animate', false).set('ai', function () {
                                return Math.random();
                            });
                            'step 1'
                            if (result.bool) {
                                player.storage.wfyuyan = result.targets[0];
                                player.addSkill('wfyuyan_dying');
                                player.addSkill('wfyuyan_damage');
                                if (player == game.me || player.isUnderControl()) {
                                    player.unmarkSkill('wfyuyan_mark');
                                    player.storage.wfyuyan_mark = '';
                                    player.addTempSkill("wfyuyan_mark");
                                    player.markSkill("wfyuyan_mark", '', '预言 ' + get.translation(result.targets[0]));
                                }
                            }
                        },
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            dying: {
                                trigger: {
                                    global: "dying",
                                },
                                forced: true,
                                charlotte: true,
                                popup: false,
                                content: function () {
                                    if (trigger.player == player.storage.wfyuyan) {
                                        player.logSkill('wfyuyan', trigger.player);
                                        player.addTempSkill('iwasawa_refenyin', { player: 'phaseEnd' });
                                    }
                                    player.removeSkill('wfyuyan_dying');
                                },
                                sub: true,
                            },
                            damage: {
                                trigger: {
                                    global: "damageSource",
                                },
                                forced: true,
                                popup: false,
                                charlotte: true,
                                filter: function (event, player) {
                                    return event.source && event.source.isIn();
                                },
                                content: function () {
                                    if (trigger.source == player.storage.wfyuyan) {
                                        player.logSkill('wfyuyan', trigger.source);
                                        player.draw(2);
                                    }
                                    player.removeSkill('wfyuyan_damage');
                                },
                                sub: true,
                            },
                        },
                    }
   lib.skill.qinggang2={
    firstDo:true,
    ai:{
        "unequip2":true,
    },
    init:function(player,skill){
        if(!player.storage[skill]) player.storage[skill]=[];
    },
    onremove:true,
    trigger:{
        player:["damage","damageCancelled","damageZero"],
        source:["damage","damageCancelled","damageZero"],
        target:["shaMiss","useCardToExcluded","useCardToEnd"],
        global:["useCardEnd"],
    },
    charlotte:true,
    filter:function(event,player){
        return player.storage.qinggang2&&event.card&&player.storage.qinggang2.contains(event.card)&&(event.name!='damage'||event.notLink());
    },
    silent:true,
    forced:true,
    popup:false,
    priority:12,
    content:function(){
        player.storage.qinggang2.remove(trigger.card);
        if(!player.storage.qinggang2.length) player.removeSkill('qinggang2');
    },    
}
                    //张星彩 枪舞
                    lib.skill.qiangwu = {
                        audio: 2,
                        enable: "phaseUse",
                        usable: 1,
                        content: function () {
                            "step 0"
                            player.judge();
                            "step 1"
                            player.storage.qiangwu = result.number;
                            player.addTempSkill('qiangwu3', 'phaseUseEnd');
                            var zz = result.number;
                            if (zz == undefined) zz = ''; else { if ([1, 11, 12, 13].contains(zz)) { zz = { '1': 'A', '11': 'J', '12': 'Q', '13': 'K' }[zz]; } }
                            player.storage.qiangwu_mark = '';
                            player.addTempSkill("qiangwu_mark");
                            player.markSkill("qiangwu_mark", '', '枪舞 ' + zz);
                        },
                        ai: {
                            result: {
                                player: 1,
                            },
                            order: 11,
                        },
                        subSkill: {
                            mark: {
                                intro: {
                                },
                                sub: true,
                            },
                        },
                    }
                    //曹植 成章
                    lib.skill.chengzhang = {
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        derivation: "rejiushi_mark",
                        forced: true,
                        unique: true,
                        juexingji: true,
                        skillAnimation: true,
                        animationColor: "water",
                        filter: function (event, player) {
                            var num = 0;
                            player.getAllHistory('sourceDamage', function (evt) {
                                num += evt.num;
                            });
                            if (num >= 7) return true;
                            player.getAllHistory('damage', function (evt) {
                                num += evt.num;
                            });
                            return num >= 7;
                        },
                        content: function () {
                            player.unmarkSkill('chengzhang_a');
                            player.markSkill('rejiushi_mark');
                            player.awakenSkill('chengzhang');
                            player.storage.chengzhang = true;
                            player.recover();
                            player.draw();
                        },
                        group: ["chengzhang_a"],
                    }
                    lib.skill.chengzhang_a = {
                        marktext: '成章',
                        intro: {
                            name: '成章',
                            content: "当前有#个标记",
                        },
                        trigger: {
                            player: "damageAfter",
                            source: "damageSource",
                        },
                        forced: true,
                        content: function () {
                            player.addMark('chengzhang_a', trigger.num);
                        },
                    }
                    lib.skill.rejiushi_mark = {
                        mark: true,
                        marktext: "酒诗 2级",
                        intro: {
                            content: "当你需要使用【酒】时，若你的武将牌正面向上，你可以翻面，视为使用一张【酒】。当你受到伤害后，若你的武将牌背面向上，你可以翻面。当你翻面时，你获得牌堆中的一张随机锦囊。",
                        },
                    }
                    //花蔓 嬉战
                    lib.skill.spxizhan = {
                        trigger: {
                            global: "phaseBegin",
                        },
                        forced: true,
                        locked: false,
                        logTarget: "player",
                        filter: function (event, player) {
                            return player != event.player;
                        },
                        content: function () {
                            'step 0'
                            player.chooseToDiscard('he', '嬉战：弃置一张牌或失去1点体力', '根据弃置的牌对' + get.translation(trigger.player) + '视为使用如下牌：<br>♠，其使用【酒】；♥，你使用【无中生有】<br>♣，对其使用【铁索连环】；♦：对其使用火【杀】').set('ai', function (card) {
                                var player = _status.event.player, target = _status.event.getTrigger().player;
                                var suit = get.suit(card, player), list;
                                switch (suit) {
                                    case 'spade': list = [{ name: 'jiu' }, target, target]; break;
                                    case 'heart': list = [{ name: 'wuzhong' }, player, player]; break;
                                    case 'club': list = [{ name: 'tiesuo' }, player, target]; break;
                                    case 'diamond': list = [{ name: 'sha', nature: 'fire' }, player, target]; break;
                                }
                                list[0].isCard = true;
                                var eff = 0;
                                if (list[1].canUse(list[0], list[2], false)) eff = get.effect(list[2], list[0], list[1], player);
                                if (eff >= 0 || suit == 'club') eff = Math.max(eff, 5);
                                return eff * 1.5 - get.value(card);
                            });
                            'step 1'
                            if (result.bool) {
                                player.addTempSkill('spxizhan_spfangzong');
                                player.shixiaoSkill('spfangzong');
                                var target = trigger.player, card = result.cards[0], suit = get.suit(card, player);
                                if ((!target || !target.isIn()) && suit != 'heart') return;
                                switch (suit) {
                                    case 'spade':
                                        target.chooseUseTarget('jiu', true);
                                        break;
                                    case 'heart':
                                        player.chooseUseTarget('wuzhong', true);
                                        break;
                                    case 'club':
                                        if (player.canUse('tiesuo', target)) player.useCard({
                                            name: 'tiesuo',
                                            isCard: true,
                                        }, target);
                                        break;
                                    case 'diamond':
                                        if (player.canUse({
                                            name: 'sha',
                                            isCard: true,
                                            nature: 'fire',
                                        }, target, false)) player.useCard({
                                            name: 'sha',
                                            isCard: true,
                                            nature: 'fire',
                                        }, target, false);
                                        break;
                                }
                            }
                            else player.loseHp();
                        },
                        subSkill: {
                            spfangzong: {
                                mark: true,
                                marktext: '芳踪 失效',
                                intro: {
                                    name: '芳踪 失效',
                                    content: 'mark',
                                },
                                charlotte: true,
                                sub: true,
                                onremove: function (player) {
                                    player.unshixiaoSkill("spfangzong");
                                },
                            },
                        },
                    };
                    //手杀朱然 胆守
                    lib.skill.mobiledanshou = {
                        trigger: {
                            global: "phaseJieshuBegin",
                        },
                        audio: 2,
                        direct: true,
                        filter: function (event, player) {
                            if (player == event.player) return false;
                            var num = event.player.getHistory('useCard', function (evt) {
                                return evt.targets.contains(player);
                            }).length;
                            return num == 0 || event.player.isAlive() && num <= player.countCards('he');
                        },
                        content: function () {
                            'step 0'
                            var num = trigger.player.getHistory('useCard', function (evt) {
                                return evt.targets.contains(player);
                            }).length;
                            event.num = num;
                            if (num == 0) {
                                if (player.hasSkill('mobiledanshou')) event._result = { bool: true };
                                else player.chooseBool('是否发动【胆守】摸一张牌？', lib.translate.mobiledanshou_info);
                            }
                            else event.goto(2);
                            'step 1'
                            if (result.bool) {
                                player.logSkill('mobiledanshou');
                                player.draw();
                            }
                            event.finish();
                            'step 2'
                            player.chooseToDiscard(num, get.prompt('mobiledanshou', trigger.player), '弃置' + get.translation(num) + '张牌并对其造成1点伤害', 'he').set('ai', function (card) {
                                if (!_status.event.goon) return 0;
                                var num = _status.event.getParent().num;
                                if (num == 1) return 8 - get.value(card);
                                if (num == 2) return 6.5 - get.value(card);
                                return 5 - get.value(card);
                            }).set('goon', get.damageEffect(trigger.player, player, player) > 0).logSkill = ['mobiledanshou', trigger.player];
                            'step 3'
                            if (result.bool) {
                                player.addExpose(0.2);
                                trigger.player.damage();
                            }
                        },
                        group: ["mobiledanshou_cc"],
                    };
                    lib.skill.mobiledanshou_cc = {
                        trigger: {
                            target: "useCardToTarget",
                        },
                        forced: true,
                        content: function () {
                            var num = trigger.player.getHistory('useCard', function (evt) {
                                return evt.targets.contains(player) && trigger.player != player;
                            }).length; event.num = num; if (num > 0) {
                                player.unmarkSkill('mobiledanshou_cc_mark');
                                player.storage.mobiledanshou_cc_mark = '';
                                player.addTempSkill('mobiledanshou_cc_mark');
                                player.markSkill('mobiledanshou_cc_mark', '', '胆守 ' + num);
                            }
                        },
                        subSkill: { mark: { intro: { name: '胆守', }, sub: true, }, },
                    };
                    //樊玉凤 醮影             
                    lib.skill.jiaoying = {
                        audio: 2,
                        trigger: {
                            source: "gainEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (player == event.player) return false;
                            var evt = event.getl(player);
                            return evt && evt.hs && evt.hs.length;
                        },
                        logTarget: "player",
                        content: function () {
                            var target = trigger.player;
                            if (!target.storage.jiaoying2) target.storage.jiaoying2 = [];
                            var cs = trigger.getl(player).hs;
                            for (var i of cs) target.storage.jiaoying2.add(get.color(i, player));
                            player.storage.jiaoying5 = target.storage.jiaoying2 == 'red' ? '' : '黑';
                            player.storage.jiaoying6 = target.storage.jiaoying2 == 'black' ? '' : '红';
                            var cc = player.storage.jiaoying5 + player.storage.jiaoying6 + '色牌';
                            target.unmarkSkill('jiaoying2');
                            target.addTempSkill('jiaoying2');
                            target.markSkill('jiaoying2', '', '醮影 ' + cc);
                            player.addTempSkill('jiaoying3');
                            if (!player.storage.jiaoying3) player.storage.jiaoying3 = [];
                            player.storage.jiaoying3.add(target);
                        },
                        ai: {
                            "directHit_ai": true,
                            skillTagFilter: function (player, tag, arg) {
                                var target = arg.target;
                                if (target.getStorage('jiaoying2').contains('red') && get.tag(arg.card, 'respondShan') && !target.hasSkillTag('respondShan', true, null, true)) return true;
                                return false;
                            },
                        },
                    }
                    //祢衡 狂才
                    lib.skill.kuangcai = {
                        audio: 2,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            return !event.player.isMad();
                        },
                        content: function() {
                            game.broadcastAll(function(player) {
                                player.forceCountChoose = {
                                    phaseUse: 5
                                };
                            }, player)
                            player.addSkill('kuangcai_use');
                            player.addSkill('kuangcai_cancel');
                            //ui.auto.hide();
                        },
                        subSkill: {
                            use: {
                                mod: {
                                    cardUsable: function(card) {
                                        if (get.info(card) && get.info(card)
                                            .forceUsable) return;
                                        return Infinity;
                                    },
                                    targetInRange: function() {
                                        return true;
                                    },
                                    aiOrder: function(player, card, num) {
                                        var name = get.name(card);
                                        if (name == 'tao') return num + 7 + Math.pow(player.getDamagedHp(), 2);
                                        if (name == 'sha') return num + 6;
                                        if (get.subtype(card) == 'equip2') return num + get.value(card) / 3;
                                    },
                                },
                                trigger: {
                                    player: "useCard",
                                },
                                forced: true,
                                charlotte: true,
                                silent: true,
                                popup: false,
                                onremove: function(player) {
                                    player.unmarkSkill('kuangcai_use');
                                    delete player.storage.kuangcai_use;
                                },               
                                init:function(player){
                                player.storage.kuangcai_use = '0';
                                player.syncStorage("kuangcai_use");
                                },
                                mark:true,
                                marktext: '狂才',
                                intro: {
                                    name: '狂才',
                                    content: 'mark'
                                },
                                filter: function(event, player) {
                                    if (!player.forceCountChoose || !player.forceCountChoose.phaseUse) {
                                        return false;
                                    }
                                    return true;
                                },
                                content: function() {                  
                                    player.storage.kuangcai_use = Number(player.storage.kuangcai_use);    
                                    player.addMark('kuangcai_use',1);    
                                    player.syncStorage("kuangcai_use");
                                    player.draw();
                                    if (player.forceCountChoose.phaseUse == 1) {
                                        var evt = event.getParent('phaseUse');
                                        if (evt) evt.skipped = true;
                                    } else game.broadcastAll(function(player) {
                                        player.forceCountChoose.phaseUse--;
                                    }, player);
                                },
                                sub: true,
                            },
                            cancel: {
                                trigger: {
                                    player: "phaseUseEnd",
                                },
                                priority: 50,
                                silent: true,
                                charlotte: true,
                                content: function() {
                                    game.broadcastAll(function(player) {
                                        delete player.forceCountChoose;
                                    }, player);
                                    //ui.auto.show();
                                    player.removeSkill('kuangcai_use');
                                    player.removeSkill('kuangcai_cancel');
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                        },
                        ai: {
                            threaten: 4.5,
                        },
                    }
                    //唐姬 抗歌
                    lib.skill.jielie = {
                        audio: 2,
                        trigger: {
                            player: "phaseBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.phaseNumber == 1 && !player.storage.jielie;
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget('请选择【抗歌】的目标', '其于回合外摸牌后，你摸等量的牌；其进入濒死状态时，你可令其回复体力至1点；其死亡后，你弃置所有牌并失去1点体力', lib.filter.notMe, true).set('ai', function (target) {
                                return get.attitude(_status.event.player, target) > 0;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('jielie', target);
                                player.addSkill('jielie_clear');
                                player.storage.jielie = target;
                                player.markSkill('jielie', '', '抗歌 ' + get.translation(result.targets[0]));
                                game.delayx();
                            }
                        },
                        intro: {
                            content: "已指定$为目标",
                        },
                        group: ["jielie_draw", "jielie_dying", "jielie_die"],
                        subSkill: {
                            draw: {
                                audio: "jielie",
                                trigger: {
                                    global: "gainAfter",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.countMark('jielie_draw') < 3 && event.player == player.storage.jielie && event.player != _status.currentPhase && event.cards && event.cards.length > 0;
                                },
                                logTarget: "player",
                                content: function () {
                                    var num = Math.min(3 - player.countMark('jielie_draw'), trigger.cards.length);
                                    player.addMark('jielie_draw', num, false);
                                    player.draw(num);
                                },
                                sub: true,
                            },
                            clear: {
                                trigger: {
                                    global: "phaseBeginStart",
                                },
                                forced: true,
                                firstDo: true,
                                popup: false,
                                charlotte: true,
                                filter: function (event, player) {
                                    return player.countMark('jielie_draw') > 0;
                                },
                                content: function () {
                                    player.removeMark('jielie_draw', player.countMark('jielie_draw'), false);
                                },
                                sub: true,
                            },
                            dying: {
                                audio: "jielie",
                                trigger: {
                                    global: "dying",
                                },
                                logTarget: "player",
                                filter: function (event, player) {
                                    return event.player == player.storage.jielie && event.player.hp < 1 && !player.hasSkill('jielie_temp');
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) > 0;
                                },
                                "prompt2": "令其将体力值回复至1点",
                                content: function () {
                                    trigger.player.recover(1 - trigger.player.hp);
                                    player.addTempSkill('jielie_temp', 'roundStart');
                                },
                                sub: true,
                            },
                            temp: {
                                sub: true,
                            },
                            die: {
                                audio: "jielie",
                                trigger: {
                                    global: "dieAfter",
                                },
                                filter: function (event, player) {
                                    return event.player == player.storage.jielie;
                                },
                                forced: true,
                                content: function () {
                                    var cards = player.getCards('he');
                                    if (cards.length) player.discard(cards);
                                    player.loseHp();
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            threaten: 2,
                        },
                    }
                    //张翼 执义
                    lib.skill.rezhiyi = {
                        audio: "zhiyi",
                        trigger: {
                            global: "phaseJieshuBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.getHistory('useCard', function (card) {
                                return get.type(card.card) == 'basic';
                            }).length > 0 || player.getHistory('respond', function (card) {
                                return get.type(card.card) == 'basic';
                            }).length > 0;
                        },
                        content: function () {
                            'step 0'
                            var list = [];
                            player.getHistory('useCard', function (evt) {
                                if (get.type(evt.card) != 'basic') return;
                                var name = evt.card.name;
                                if (name == 'sha') {
                                    var nature = evt.card.nature;
                                    switch (nature) {
                                        case 'fire': name = 'huosha'; break;
                                        case 'thunder': name = 'leisha'; break;
                                        case 'kami': name = 'kamisha'; break;
                                        case 'ice': name = 'icesha'; break;
                                        case 'stab': name = 'cisha'; break;
                                    }
                                }
                                list.add(name);
                            });
                            player.getHistory('respond', function (evt) {
                                if (get.type(evt.card) != 'basic') return;
                                var name = evt.card.name;
                                if (name == 'sha') {
                                    var nature = evt.card.nature;
                                    switch (nature) {
                                        case 'fire': name = 'huosha'; break;
                                        case 'thunder': name = 'leisha'; break;
                                        case 'kami': name = 'kamisha'; break;
                                        case 'ice': name = 'icesha'; break;
                                        case 'stab': name = 'cisha'; break;
                                    }
                                }
                                list.add(name);
                            });
                            player.chooseButton(['执义：选择要使用的牌，或点取消摸一张牌', [list.map(function (name) {
                                return ['基本', '', name];
                            }), 'vcard']], function (button) {
                                return _status.event.player.getUseValue({ name: button.link[2], nature: button.link[3] });
                            }, function (button) {
                                return _status.event.player.hasUseTarget({ name: button.link[2], nature: button.link[3] });
                            });
                            'step 1'
                            if (!result.bool) player.draw();
                            else player.chooseUseTarget({ name: result.links[0][2], isCard: true, nature: result.links[0][3] });
                        },
                        group: ["rezhiyi1"],
                    };
                    lib.skill.rezhiyi1 = {
                        trigger: { player: ['respondBegin', 'useCardBegin'], }, filter: function (event, player) {
                            if (event.card.name == 'sha' || event.card.name == 'shan' || event.card.name == 'tao' || event.card.name == 'jiu') return true;
                        },
                        forced: true, content: function () { player.addTempSkill("rezhiyi1_mark"); }, subSkill: { mark: { marktext: '执义', mark: true, intro: { name: '执义', }, sub: true, }, },
                    }
                    //界吕蒙 博图
                    lib.skill.rebotu = {
                        audio: "botu",
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        frequent: true,
                        filter: function (event, player) {
                            if (player.countMark('rebotu_count') >= Math.min(3, game.countPlayer())) return false;
                            var suits = [];
                            game.getGlobalHistory('cardMove', function (evt) {
                                if (suits.length >= 4) return;
                                if (evt.name == 'lose') {
                                    if (evt.position == ui.discardPile) {
                                        for (var i of evt.cards) suits.add(get.suit(i, false));
                                    }
                                }
                                else {
                                    if (evt.name == 'cardsDiscard') {
                                        for (var i of evt.cards) suits.add(get.suit(i, false));
                                    }
                                }
                            });
                            return suits.length >= 4;
                        },
                        content: function () {
                            player.addTempSkill('rebotu_count', 'roundStart');
                            player.addMark('rebotu_count', 1, false);
                            player.insertPhase();
                        },
                        group: "rebotu_mark",
                        subSkill: {
                            count: {
                                onremove: true,
                                sub: true,
                            },
                            mark: {
                                trigger: {
                                    global: ["loseAfter", "cardsDiscardAfter"],
                                    player: "phaseAfter",
                                },
                                forced: true,
                                firstDo: true,
                                silent: true,
                                filter: function (event, player) {
                                    if (event.name == 'phase') return true;
                                    if (player != _status.currentPhase) return false;
                                    if (event.name == 'lose') return event.position == ui.discardPile;
                                    return true;
                                },
                                content: function () {
                                    if (trigger.name == 'phase') {
                                        player.unmarkSkill('rebotu_mark');
                                        return;
                                    }
                                    var suits = [];
                                    game.getGlobalHistory('cardMove', function (evt) {
                                        if (suits.length >= 4) return;
                                        if (evt.name == 'lose') {
                                            if (evt.position == ui.discardPile) {
                                                for (var i of evt.cards) suits.add(get.suit(i, false));
                                            }
                                        }
                                        else {
                                            if (evt.name == 'cardsDiscard') {
                                                for (var i of evt.cards) suits.add(get.suit(i, false));
                                            }
                                        }
                                    });
                                    player.storage.rebotu_mark = suits;
                                    //     player.markSkill('rebotu_mark');                 
                                    var str = [];
                                    if (player.storage.rebotu_mark.contains('heart')) str += '♥️️';
                                    if (player.storage.rebotu_mark.contains('diamond')) str += '♦️️';
                                    if (player.storage.rebotu_mark.contains('spade')) str += '♠️️';
                                    if (player.storage.rebotu_mark.contains('club')) str += '♣️️';
                                    player.unmarkSkill('rebotu_mark2');
                                    player.addTempSkill("rebotu_mark2");
                                    player.markSkill("rebotu_mark2", '', '博图 ' + str);
                                },
                                intro: {
                                    onunmark: true,
                                    content: "本回合已有$花色的牌进入过弃牌堆",
                                },
                                sub: true,
                                popup: false,
                            },
                            mark2: {
                                intro: {
                                },
                                sub: true,
                            },
                        },
                    }
                    //王元姬 谦冲
                    lib.skill.xinfu_qianchong = {
                        audio: 3,
                        mod: {
                            targetInRange: function (card, player, target) {
                                if (player.storage.xinfu_qianchong.contains(get.type(card, 'trick'))) {
                                    return true;
                                }
                            },
                            cardUsable: function (card, player, num) {
                                if (player.storage.xinfu_qianchong.contains(get.type(card, 'trick'))) return Infinity;
                            },
                        },
                        group: ["xinfu_qianchong_clear", "qc_weimu", "qc_mingzhe"],
                        subSkill: {
                            clear: {
                                sub: true,
                                forced: true,
                                silent: true,
                                popup: false,
                                trigger: {
                                    player: "phaseAfter",
                                },
                                content: function () {
                                    player.storage.xinfu_qianchong = [];
                                },
                            },
                            mark: { intro: {}, sub: true, },
                        },
                        init: function (event, player) {
                            event.storage[player] = [];
                        },
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        locked: false,
                        direct: true,
                        filter: function (event, player) {
                            var es = player.getCards('e');
                            if (!es.length) return true;
                            var col = get.color(es[0]);
                            for (var i = 0; i < es.length; i++) {
                                if (get.color(es[i]) != col) return true;
                            }
                            return false;
                        },
                        content: function () {
                            'step 0'
                            var list = ['basic', 'trick', 'equip', 'cancel2'];
                            for (var i = 0; i < player.storage.xinfu_qianchong.length; i++) {
                                list.remove(player.storage.xinfu_qianchong[i]);
                            }
                            if (list.length > 1) {
                                player.chooseControl(list).set('ai', function () {
                                    return list[0];
                                }
                                ).set('prompt', get.prompt('xinfu_qianchong')).set('prompt2', get.translation('xinfu_qianchong_info'));
                            }
                            else event.finish();
                            'step 1'
                            if (result.control && result.control != 'cancel2') {
                                player.logSkill('xinfu_qianchong');
                                player.storage.xinfu_qianchong.add(result.control);
                                var str = get.translation(result.control) + '牌';
                                game.log(player, '声明了', '#y' + str);
                                player.popup(str, 'thunder');
                                player.storage.xinfu_qianchong_mark = '';
                                player.addTempSkill("xinfu_qianchong_mark");
                                player.markSkill("xinfu_qianchong_mark", '', '谦冲 ' + str);
                            }
                        },
                    }
                    //关索 撷芳
                    lib.skill.xiefang = {
                        trigger: { global: ["dieEnd", "gameDrawEnd"], }, forced: true,
                        content: function () {
                            var cc = (game.countPlayer(function (current) {
                                return current.hasSex('female');
                            }));
                            player.unmarkSkill('xiefang_mark');
                            if (cc > 0) {
                                player.storage.xiefang_mark = '';
                                player.addSkill("xiefang_mark");
                                player.markSkill("xiefang_mark", "", "撷芳- " + cc)
                            };
                        },
                        subSkill: { mark: { intro: {}, sub: true, }, },
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - game.countPlayer(function (current) {
                                    return current.hasSex('female');
                                });
                            },
                        },
                    }
                    //鲁芝 清忠
                    lib.skill.qingzhongx = {
                        audio: "weijing",
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        check: function (event, player) {
                            if (game.hasPlayer(function (current) {
                                return current != player && current.isMinHandcard() && get.attitude(player, current) > 0;
                            })) {
                                return true;
                            }
                            if (player.countCards('h') <= 2) return true;
                            // if(player.countCards('h')<=3&&!player.countCards('h','shan')) return true;
                            //if(player.countCards('h',{type:'basic'})<=1) return true;
                            return false;
                        },
                        content: function () {
                            player.draw(2);
                            player.addTempSkill('qingzhongx_give');
                            player.addTempSkill('qingzhongx_mark');
                        },
                        subSkill: {
                            give: {
                                trigger: {
                                    player: "phaseUseEnd",
                                },
                                filter: function (event, player) {
                                    return !player.isMinHandcard(true);
                                },
                                audio: "weijing",
                                forced: true,
                                content: function () {
                                    'step 0'
                                    var list = game.filterPlayer(function (current) {
                                        return current.isMinHandcard();
                                    });
                                    if (list.length == 1) {
                                        if (list[0] != player) {
                                            player.line(list[0], 'green');
                                            player.swapHandcards(list[0]);
                                        }
                                        event.finish();
                                    }
                                    else {
                                        player.chooseTarget(true, '清忠：选择一名手牌最少的角色与其交换手牌', function (card, player, target) {
                                            return target.isMinHandcard();
                                        }).set('ai', function (target) {
                                            return get.attitude(_status.event.player, target);
                                        });
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        if (target != player) {
                                            player.line(target, 'green');
                                            player.swapHandcards(target);
                                        }
                                    }
                                },
                                sub: true,
                            },
                            mark: { mark: true, marktext: '清忠', intro: { name: '清忠', content: 'mark', }, sub: true, },
                        },
                    }
                    //蔡贞姬 天音
                    lib.skill.tianyin = {
                        audio: 2,
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            var list = [];
                            player.getHistory('useCard', function (evt) {
                                list.add(get.type2(evt.card, false));
                            });
                            for (var i = 0; i < ui.cardPile.childNodes.length; i++) {
                                if (!list.contains(get.type2(ui.cardPile.childNodes[i], false))) return true;
                            }
                            return false;
                        },
                        content: function () {
                            var list = [], cards = [];
                            player.getHistory('useCard', function (evt) {
                                list.add(get.type2(evt.card, false));
                            });
                            for (var i = 0; i < ui.cardPile.childNodes.length; i++) {
                                var type = get.type2(ui.cardPile.childNodes[i], false);
                                if (!list.contains(type)) {
                                    list.push(type);
                                    cards.push(ui.cardPile.childNodes[i])
                                };
                            }
                            player.gain(cards, 'gain2');
                        },
                        group: ["tianyin1"],
                    }
                    lib.skill.tianyin1 = {
                        trigger: { player: 'useCardBegin', }, forced: true, audio: false,
                        filter: function (event, player) {
                            if (event.name == 'phase') return true;
                            if (player != _status.currentPhase) return false; return true;
                        },
                        content: function () {
                            player.addTempSkill("tianyin1_mark");
                            if (!player.storage.tianyin1_mark1) player.storage.tianyin1_mark1 = [];
                            var str = '';
                            if (get.type(trigger.card) == 'trick') str = '锦';
                            if (get.type(trigger.card) == 'delay') str = '锦';
                            else if (get.type(trigger.card) == 'basic') str = '基';
                            else if (get.type(trigger.card) == 'equip') str = '装';
                            var num = '';
                            if (player.storage.tianyin1_mark1.indexOf(str) == -1) player.storage.tianyin1_mark1 += str;
                            if (player.storage.tianyin1_mark1.indexOf('基') != -1) num += '基';
                            if (player.storage.tianyin1_mark1.indexOf('锦') != -1) num += '锦';
                            if (player.storage.tianyin1_mark1.indexOf('装') != -1) num += '装';
                            player.storage.tianyin1_mark = '';
                            player.addMark("tianyin1_mark", num);
                        },
                        subSkill: {
                            mark: {
                                marktext: '天音', intro: {
                                    name: '天音',
                                    content: function (storage, player, skill) {
                                        return player.storage.tianyin1_mark1;
                                    }
                                },
                                onremove: function (player) {
                                    player.removeMark('tianyin1_mark1');
                                    delete player.storage.tianyin1_mark1;
                                },
                            },
                        },
                    };
                    //刘烨 筹略                            
                    lib.skill.choulve = {
                        audio: 2,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return game.hasPlayer(function (current) {
                                return current != player && current.countCards('he');
                            })
                        },
                        content: function () {
                            'step 0'
                            var str = '令一名其他角色交给你一张牌';
                            var history = player.getAllHistory('damage', function (evt) {
                                return evt.card && evt.card.name && lib.card[evt.card.name];
                            })
                            if (history.length) event.cardname = history[history.length - 1].card.name;
                            if (event.cardname) {
                                str += '若其如此做，视为你使用【' + get.translation(event.cardname) + '】';
                            }
                            var goon = true;
                            if (event.cardname) {
                                goon = game.hasPlayer(function (current) {
                                    return player.canUse(event.cardname, current) && get.effect(current, { name: event.cardname }, player, player) > 0;
                                });
                            }
                            player.chooseTarget(get.prompt('choulve'), str, function (card, player, target) {
                                return target != player && target.countCards('he');
                            }).set('ai', function (target) {
                                if (!_status.event.goon) return 0;
                                var player = _status.event.player;
                                if (get.attitude(player, target) >= 0 && get.attitude(target, player) >= 0) {
                                    return Math.sqrt(target.countCards('he'));
                                }
                                return 0;
                            }).set('goon', goon);
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('choulve', target);
                                target.chooseCard('he', '是否交给' + get.translation(player) + '一张牌？',
                                    event.cardname ? ('若如此做，视为' + get.translation(player) +
                                        '使用【' + get.translation(event.cardname) + '】') : null).set('ai', function (card) {
                                            if (_status.event.goon) return 7 - get.value(card);
                                            return 0;
                                        }).set('goon', get.attitude(target, player) > 1);
                                event.target = target;
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            if (result.bool) {
                                event.target.give(result.cards, player);
                                if (event.cardname) {
                                    player.chooseUseTarget(event.cardname, true, false);
                                }
                            }
                        },
                        group: ["choulve1"],
                    }
                    lib.skill.choulve1 = {
                        trigger: { player: "damageBegin", }, forced: true, content: function () {
                            var kk = get.translation(trigger.card.name);
                            player.storage.choulve1_mark = ''; player.addSkill("choulve1_mark");
                            player.addMark("choulve1_mark", kk);
                        },
                        subSkill: { mark: { marktext: "筹略", intro: { name: '筹略', }, sub: true, }, },
                    };
                    //手杀羊祜 明伐
                    lib.skill.mingfa = {
                        audio: 2,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.storage.mingfa && player.countCards('h') > 0 && player.getCards('he').contains(player.storage.mingfa)
                                && !player.hasSkillTag('noCompareSource') && game.hasPlayer(function (current) {
                                    return current != player && player.canCompare(current);
                                });
                        },
                        content: function () {
                            'step 0'
                            player.unmarkSkill('mingfa_xg');
                            event.card = player.storage.mingfa;
                            delete player.storage.mingfa;
                            player.chooseTarget(get.prompt('mingfa'), '用' + get.translation(event.card) + '和一名其他角色拼点', function (card, player, target) {
                                return player.canCompare(target);
                            }).set('ai', function (target) {
                                var player = _status.event.player, card = _status.event.getParent().card;
                                if (card.number > 9 || !target.countCards('h', function (cardx) {
                                    return cardx.number >= card.number + 2;
                                })) return -get.attitude(player, target) / Math.sqrt(target.countCards('h'));
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('mingfa', target);
                                var next = player.chooseToCompare(target);
                                if (!next.fixedResult) next.fixedResult = {};
                                next.fixedResult[player.playerid] = event.card;
                            }
                            else {
                                player.removeGaintag('mingfa');
                                event.finish();
                            }
                            'step 2'
                            if (result.bool) {
                                player.gainPlayerCard(target, true, 'he');
                                if (event.card.number == 1) event.finish();
                            }
                            else {
                                player.addTempSkill('mingfa_block');
                                event.finish();
                            }
                            'step 3'
                            var card = get.cardPile2(function (card) {
                                return card.number == event.card.number - 1;
                            });
                            if (card) player.gain(card, 'gain2');
                        },
                        group: ["mingfa_choose", "mingfa_add", "mingfa_mark"],
                        subSkill: {
                            xg: { intro: {}, sub: true, },
                            block: {
                                mod: {
                                    playerEnabled: function (card, player, target) {
                                        if (player != target) return false;
                                    },
                                },
                                sub: true,
                            },
                            choose: {
                                trigger: {
                                    player: "phaseJieshuBegin",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseCard('he', get.prompt('mingfa'), '选择展示自己的一张牌').set('ai', function (card) {
                                        return Math.min(13, get.number(card) + 2) / Math.pow(Math.min(2, get.value(card)), 0.25);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var card = result.cards[0];
                                        player.logSkill('mingfa');
                                        player.removeGaintag('mingfa');
                                        player.addGaintag(card, 'mingfa');
                                        player.storage.mingfa = card;
                                        player.showCards(card, get.translation(player) + '发动了【明伐】');
                                        player.unmarkSkill('mingfa_xg');
                                        var xx = get.translation(result.cards[0].name).slice(0, 2);
                                        var cc = get.translation(get.suit(result.cards[0]));
                                        var zz = get.number(result.cards[0]);
                                        if (zz == undefined) zz = ''; else { if ([1, 11, 12, 13].contains(zz)) { zz = { '1': 'A', '11': 'J', '12': 'Q', '13': 'K' }[zz]; } }
                                        var xxgg = cc + zz + xx;
                                        player.storage.mingfa_xg = '';
                                        player.addTempSkill("mingfa_xg", { player: 'phaseZhunbeiBegin' });
                                        player.markSkill("mingfa_xg", '', '明伐' + xxgg);
                                    }
                                },
                                sub: true,
                            },
                            add: {
                                trigger: {
                                    player: "compare",
                                    target: "compare",
                                },
                                filter: function (event) {
                                    return !event.iwhile;
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    if (player == trigger.player) {
                                        trigger.num1 += 2;
                                        if (trigger.num1 > 13) trigger.num1 = 13;
                                    }
                                    else {
                                        trigger.num2 += 2;
                                        if (trigger.num2 > 13) trigger.num2 = 13;
                                    }
                                    game.log(player, '的拼点牌点数+2')
                                },
                                sub: true,
                            },
                            mark: {
                                trigger: {
                                    player: "gainEnd",
                                },
                                silent: true,
                                firstDo: true,
                                filter: function (event, player) {
                                    return player.storage.mingfa && event.cards.contains(player.storage.mingfa) && player.getCards('h').contains(player.storage.mingfa);
                                },
                                content: function () {
                                    player.addGaintag(player.storage.mingfa, 'mingfa');
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                        },
                    }
                    //王基 奇制
                    lib.skill.qizhi = {
                        audio: 2,
                        trigger: {
                            player: "useCardToPlayered",
                        },
                        direct: true,
                        filter: function (event, player) {
                            if (!event.targets) return false;
                            if (!event.isFirstTarget) return false;
                            if (_status.currentPhase != player) return false;
                            var type = get.type(event.card, 'trick');
                            if (type != 'basic' && type != 'trick') return false;
                            if (event.noai) return false;
                            return game.hasPlayer(function (target) {
                                return !event.targets.contains(target) && target.countCards('he') > 0;
                            });
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('qizhi'), '弃置一名角色的一张牌，然后其摸一张牌', function (card, player, target) {
                                return !_status.event.targets.contains(target) && target.countCards('he') > 0;
                            }).set('ai', function (target) {
                                var player = _status.event.player;
                                if (target == player) return 2;
                                if (get.attitude(player, target) <= 0) {
                                    return 1
                                }
                                return 0.5;
                            }).set('targets', trigger.targets);
                            'step 1'
                            if (result.bool) {
                                player.getHistory('custom').push({ qizhi: true });
                                player.logSkill('qizhi', result.targets);
                                player.discardPlayerCard(result.targets[0], true, 'he');
                                event.target = result.targets[0];
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            event.target.draw();
                            player.addTempSkill('qizhi_mark');
                            player.addMark('qizhi_mark', 1);
                        },
                        subSkill: { mark: { marktext: '奇制', intro: { name: '奇制', content: 'mark', }, onremove: function (player) { player.unmarkSkill('qizhi_mark'); delete player.storage.qizhi_mark; }, sub: true, }, },
                    }
                    //OL羊祜 怀远
                    lib.skill.huaiyuan = {
                        audio: 2,
                        trigger: {
                            player: "loseAfter",
                            global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter", "addToExpansionAfter"],
                        },
                        filter: function (event, player) {
                            var evt = event.getl(player);
                            if (!evt || !evt.hs || !evt.hs.length) return false;
                            if (event.name == 'lose') {
                                for (var i in event.gaintag_map) {
                                    if (event.gaintag_map[i].contains('huaiyuanx')) return true;
                                }
                                return false;
                            }
                            return player.hasHistory('lose', function (evt) {
                                if (event != evt.getParent()) return false;
                                for (var i in evt.gaintag_map) {
                                    if (evt.gaintag_map[i].contains('huaiyuanx')) return true;
                                }
                                return false;
                            });
                        },
                        forced: true,
                        content: function () {
                            'step 0'
                            var num = 0;
                            if (trigger.name == 'lose') {
                                for (var i in trigger.gaintag_map) {
                                    if (trigger.gaintag_map[i].contains('huaiyuanx')) num++;
                                };
                            }
                            else player.getHistory('lose', function (evt) {
                                if (trigger != evt.getParent()) return false;
                                for (var i in evt.gaintag_map) {
                                    if (evt.gaintag_map[i].contains('huaiyuanx')) num++;
                                }
                                return false;
                            });
                            event.count = num;
                            'step 1'
                            event.count--;
                            player.chooseTarget(true, '请选择【怀远】的目标', '令一名角色执行一项：⒈其的手牌上限+1。⒉其的攻击范围+1。⒊其摸一张牌。').set('ai', function (target) {
                                var player = _status.event.player, att = get.attitude(player, target);
                                if (att <= 0) return 0;
                                if (target.hasValueTarget({ name: 'sha' }, false) && !target.hasValueTarget({ name: 'sha' })) att *= 2.2;
                                if (target.needsToDiscard()) att *= 1.3;
                                return att * Math.sqrt(Math.max(1, 4 - target.countCards('h')));
                            });
                            'step 2'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.line(target, 'green');
                                var str = get.translation(target)
                                player.chooseControl().set('choiceList', [
                                    '令' + str + '的手牌上限+1',
                                    '令' + str + '的攻击范围+1',
                                    '令' + str + '摸一张牌',
                                ]).set('ai', function () {
                                    var player = _status.event.player, target = _status.event.getParent().target; if (target.hasValueTarget({ name: 'sha' }, false) && !target.hasValueTarget({ name: 'sha' })) return 1;
                                    if (target.needsToDiscard()) return 0;
                                    return 2;
                                });
                            }
                            else event.finish();
                            'step 3'
                            if (result.index == 2) target.draw();
                            else {
                                target.addSkill('huaiyuan_effect' + result.index);
                                target.addMark('huaiyuan_effect' + result.index, 1, false);
                                game.log(target, '的', '#g' + ['手牌上限', '攻击范围'][result.index], '+1')
                                game.delayx();
                            }
                            if (event.count > 0) event.goto(1);
                        },
                        group: ["huaiyuan_init", "huaiyuan_die"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "phaseBefore",
                                    player: "enterGame",
                                },
                                forced: true,
                                locked: false,
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0) && player.countCards('h') > 0;
                                },
                                content: function () {
                                    var hs = player.getCards('h');
                                    if (hs.length) player.addGaintag(hs, 'huaiyuanx');
                                },
                                sub: true,
                            },
                            die: {
                                trigger: {
                                    player: "die",
                                },
                                direct: true,
                                forceDie: true,
                                skillAnimation: true,
                                animationColor: "water",
                                filter: function (event, player) {
                                    return player.hasMark('huaiyuan_effect0') || player.hasMark('huaiyuan_effect1');
                                },
                                content: function () {
                                    'step 0'
                                    var str = '令一名其他角色', num1 = player.countMark('huaiyuan_effect0'), num2 = player.countMark('huaiyuan_effect1');
                                    if (num1 > 0) {
                                        str += '手牌上限+';
                                        str += num1;
                                        if (num2 > 0) str += '且';
                                    }
                                    if (num2 > 0) {
                                        str += '攻击范围+';
                                        str += num2;
                                    }
                                    player.chooseTarget(lib.filter.notMe, get.prompt('huaiyuan'), str).set('forceDie', true).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target) + 114514;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('huaiyuan_die', target);
                                        var num1 = player.countMark('huaiyuan_effect0'), num2 = player.countMark('huaiyuan_effect1');
                                        if (num1 > 0) {
                                            target.addSkill('huaiyuan_effect0');
                                            target.addMark('huaiyuan_effect0', num1, false);
                                        }
                                        if (num2 > 0) {
                                            target.addSkill('huaiyuan_effect1');
                                            target.addMark('huaiyuan_effect1', num2, false);
                                        }
                                        game.delayx();
                                    }
                                },
                                sub: true,
                            },
                            "effect0": {
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('huaiyuan_effect0');
                                    },
                                },
                                marktext: "上限+",
                                intro: {
                                    content: "手牌上限+#",
                                },
                                sub: true,
                            },
                            "effect1": {
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    attackRange: function (player, num) {
                                        return num + player.countMark('huaiyuan_effect1');
                                    },
                                },
                                marktext: "距离+",
                                intro: {
                                    content: "攻击范围+#",
                                },
                                sub: true,
                            },
                        },
                    }

                    //界郭图 急攻
                    lib.skill.rejigong = {
                        audio: 2,
                        direct: true,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        content: function () {
                            'step 0'
                            player.chooseControl('一张', '两张', '三张', 'cancel2').set('prompt', get.prompt2('rejigong')).set('ai', () => '三张');
                            'step 1'
                            if (result.control != 'cancel2') {
                                player.logSkill('rejigong');
                                player.addTempSkill('rejigong2');
                                player.addTempSkill('rejigong_mark');
                                player.addTempSkill('rejigong_mark2');
                                player.draw(1 + result.index);
                            }
                        },
                        subSkill: {
                            mark2: { mark: true, marktext: "急攻 0", intro: {}, sub: true, },
                            mark: {
                                intro: {
                                    content: "你的手牌上限为#",
                                },
                                trigger: {
                                    source: "damageSource",
                                },
                                init: function (player) { player.storage.rejigong_mark = 0; },
                                onremove: function (player) {
                                    player.unmarkSkill('rejigong_mark');
                                    delete player.storage.rejigong_mark;
                                },
                                audio: false,
                                forced: true,
                                content: function () {
                                    player.unmarkSkill('rejigong_mark2')
                                    player.addMark('rejigong_mark', trigger.num);

                                },
                                sub: true,
                            },
                        },
                    }
                    //钟繇 活墨
                    lib.skill.huomo_a = { marktext: '活墨', intro: { name: '活墨', content: 'mark', }, onremove: function (player) { player.removeMark('huomo_a1'); delete player.storage.huomo_a1; player.storage.huomo_a; }, }
                    lib.skill.huomo_use = {
                        enable: 'chooseToUse',
                        hiddenCard: function (player, name) {
                            return (['sha', 'shan', 'tao', 'jiu'].contains(name) && (!player.storage.huomo || !player.storage.huomo[name]) && player.hasCard(function (card) {
                                return get.color(card) == 'black' && get.type(card) != 'basic';
                            }, 'he'));
                        },
                        filter: function (event, player) {
                            if (!player.storage.huomo) player.storage.huomo = {};
                            if ((!player.storage.huomo.sha && event.filterCard({ name: 'sha' }, player, event)) ||
                                (!player.storage.huomo.jiu && event.filterCard({ name: 'jiu' }, player, event)) ||
                                (!player.storage.huomo.shan && event.filterCard({ name: 'shan' }, player, event)) ||
                                (!player.storage.huomo.tao && event.filterCard({ name: 'tao' }, player, event))) {
                                return player.hasCard(function (card) {
                                    return get.color(card) == 'black' && get.type(card) != 'basic';
                                }, 'he');
                            }
                            return false;
                        },
                        chooseButton: {
                            dialog: function (event, player) {
                                var list = [];
                                if (!player.storage.huomo.sha && event.filterCard({ name: 'sha' }, player, event)) {
                                    list.push(['基本', '', 'sha']);
                                    for (var j of lib.inpile_nature) list.push(['基本', '', 'sha', j]);
                                }
                                if (!player.storage.huomo.tao && event.filterCard({ name: 'tao' }, player, event)) {
                                    list.push(['基本', '', 'tao']);
                                }
                                if (!player.storage.huomo.shan && event.filterCard({ name: 'shan' }, player, event)) {
                                    list.push(['基本', '', 'shan']);
                                }
                                if (!player.storage.huomo.jiu && event.filterCard({ name: 'jiu' }, player, event)) {
                                    list.push(['基本', '', 'jiu']);
                                }
                                return ui.create.dialog('活墨', [list, 'vcard'], 'hidden');
                            },
                            check: function (button) {
                                var player = _status.event.player;
                                var card = { name: button.link[2], nature: button.link[3] };
                                if (game.hasPlayer(function (current) {
                                    return player.canUse(card, current) && get.effect(current, card, player, player) > 0;
                                })) {
                                    switch (button.link[2]) {
                                        case 'tao': return 5;
                                        case 'jiu': return 3.01;
                                        case 'shan': return 3.01;
                                        case 'sha':
                                            if (button.link[3] == 'fire') return 2.95;
                                            else if (button.link[3] == 'fire') return 2.92;
                                            else return 2.9;
                                    }
                                }
                                return 0;
                            },
                            backup: function (links, player) {
                                return {
                                    check: function (card) {
                                        return 1 / Math.max(0.1, get.value(card));
                                    },
                                    filterCard: function (card) {
                                        return get.type(card) != 'basic' && get.color(card) == 'black';
                                    },
                                    viewAs: {
                                        name: links[0][2],
                                        nature: links[0][3],
                                        suit: 'none',
                                        number: null,
                                        isCard: true,
                                    },
                                    position: 'he',
                                    popname: true,
                                    ignoreMod: true,
                                    precontent: function () {
                                        'step 0'
                                        player.logSkill('huomo');
                                        var card = event.result.cards[0];
                                        event.card = card;
                                        player.$throw(card, 1000);
                                        game.log(player, '将', card, '置于牌堆顶');
                                        event.result.card = { name: event.result.card.name, nature: event.result.card.nature };
                                        event.result.cards = [];
                                        player.lose(card, ui.cardPile, 'visible', 'insert');
                                        if (!player.storage.huomo_a1) player.storage.huomo_a1 = '';
                                        var cc = get.translation(event.result.card);
                                        var num = '';
                                        if (player.storage.huomo_a1.indexOf(cc) == -1) player.storage.huomo_a1 += cc;
                                        if (player.storage.huomo_a1.indexOf('杀') != -1) num += '杀';
                                        //    if(player.storage.huomo_a1.indexOf('火杀')!=-1)num+='火杀';
                                        //     if(player.storage.huomo_a1.indexOf('雷杀')!=-1)num+='雷杀';
                                        if (player.storage.huomo_a1.indexOf('桃') != -1) num += '桃';
                                        if (player.storage.huomo_a1.indexOf('闪') != -1) num += '闪';
                                        if (player.storage.huomo_a1.indexOf('酒') != -1) num += '酒';
                                        player.storage.huomo_a = '';
                                        player.addTempSkill("huomo_a");
                                        player.addMark("huomo_a", num);
                                        'step 1'
                                        game.delay();
                                    },
                                }
                            },
                            prompt: function (links, player) {
                                return '将一张黑色非基本牌置于牌堆顶并视为使用一张' + get.translation(links[0][3] || '') + get.translation(links[0][2]);
                            }
                        },
                        ai: {
                            order: function () {
                                var player = _status.event.player;
                                var event = _status.event;
                                if (!player.storage.huomo.jiu && event.filterCard({ name: 'jiu' }, player, event) && get.effect(player, { name: 'jiu' }) > 0) {
                                    return 3.1;
                                }
                                return 2.9;
                            },
                            respondSha: true,
                            fireAttack: true,
                            respondShan: true,
                            skillTagFilter: function (player, tag, arg) {
                                if (tag == 'fireAttack') return true;
                                if (player.hasCard(function (card) {
                                    return get.color(card) == 'black' && get.type(card) != 'basic';
                                }, 'he')) {
                                    if (!player.storage.huomo) player.storage.huomo = {};
                                    if (tag == 'respondSha') {
                                        if (arg != 'use') return false;
                                        if (player.storage.huomo.sha) return false;
                                    }
                                    else if (tag == 'respondShan') {
                                        if (player.storage.huomo.shan) return false;
                                    }
                                    else {
                                        if (player.storage.huomo.tao && player.storage.huomo.jiu) return false;
                                    }
                                }
                                else {
                                    return false;
                                }
                            },
                            result: {
                                player: 1
                            }
                        }
                    }

                    //谋黄忠 烈弓			
                    lib.skill.sbliegong = {
                        audio: 2,
                        mod: {
                            cardnature: function (card, player) {
                                if (!player.getEquip(1) && get.name(card, player) == 'sha') return false;
                            },
                        },
                        trigger: {
                            player: "useCardToPlayered",
                        },
                        filter: function (event, player) {
                            return !event.getParent()._sbliegong_player && event.targets.length == 1 && event.card.name == 'sha' && player.getStorage('sbliegong').length > 0;
                        },
                        "prompt2": function (event, player) {
                            var str = '', storage = player.getStorage('sbliegong');
                            if (storage.length > 1) {
                                str += ('展示牌堆顶的' + get.cnNumber(storage.length - 1) + '张牌并增加伤害；且');
                            }
                            str += ('令' + get.translation(event.target) + '不能使用花色为');
                            for (var i = 0; i < storage.length; i++) {
                                str += get.translation(storage[i]);
                            }
                            str += ('的牌响应' + get.translation(event.card));
                            return str;
                        },
                        logTarget: "target",
                        check: function (event, player) {
                            var target = event.target;
                            if (get.attitude(player, target) > 0) return false;
                            if (target.hasSkillTag('filterDamage', null, {
                                player: player,
                                card: event.card,
                            })) return false;
                            var storage = player.getStorage('sbliegong');
                            if (storage.length >= 4) return true;
                            if (storage.length < 3) return false;
                            if (target.hasShan()) return storage.contains('heart') && storage.contains('diamond');
                            return true;
                        },
                        content: function () {
                            var storage = player.getStorage('sbliegong').slice(0);
                            var num = storage.length - 1;
                            var evt = trigger.getParent();
                            if (num > 0) {
                                if (typeof evt.baseDamage != 'number') evt.baseDamage = 1;
                                var cards = get.cards(num);
                                player.showCards(cards.slice(0), get.translation(player) + '发动了【烈弓】');
                                while (cards.length > 0) {
                                    var card = cards.pop();
                                    if (storage.contains(get.suit(card, false))) evt.baseDamage++;
                                    ui.cardPile.insertBefore(card, ui.cardPile.firstChild);
                                }
                                game.updateRoundNumber();
                            }
                            evt._sbliegong_player = player;
                            player.addTempSkill('sbliegong_clear');
                            var target = trigger.target;
                            target.addTempSkill('sbliegong_block');
                            if (!target.storage.sbliegong_block) target.storage.sbliegong_block = [];
                            target.storage.sbliegong_block.push([evt.card, storage]);
                            //   player.unmarkSkill('sbliegong_mark');
                        },
                        ai: {
                            threaten: 3.5,
                            "directHit_ai": true,
                            halfneg: true,
                            skillTagFilter: function (player, tag, arg) {
                                if (arg && arg.card && arg.card.name == 'sha') {
                                    var storage = player.getStorage('sbliegong');
                                    if (storage.length < 3 || !storage.contains('heart') || !storage.contains('diamond')) return false;
                                    var target = arg.target;
                                    if (target.hasSkill('bagua_skill') || target.hasSkill('bazhen') || target.hasSkill('rw_bagua_skill')) return false;
                                    return true;
                                }
                                return false;
                            },
                        },

                        group: "sbliegong_count",
                        subSkill: {
                            mark: { intro: {}, sub: true, },
                            clear: {
                                trigger: {
                                    player: "useCardAfter",
                                },
                                forced: true,
                                charlotte: true,
                                popup: false,
                                filter: function (event, player) {
                                    return event._sbliegong_player == player;
                                },
                                content: function () {
                                    player.unmarkSkill('sbliegong');
                                    player.unmarkSkill('sbliegong_mark');
                                    player.storage.sbliegong = [];
                                },
                                sub: true,
                            },
                            block: {
                                mod: {
                                    cardEnabled: function (card, player) {
                                        if (!player.storage.sbliegong_block) return;
                                        var suit = get.suit(card);
                                        if (suit == 'none') return;
                                        var evt = _status.event;
                                        if (evt.name != 'chooseToUse') evt = evt.getParent('chooseToUse');
                                        if (!evt || !evt.respondTo || evt.respondTo[1].name != 'sha') return;
                                        for (var i of player.storage.sbliegong_block) {
                                            if (i[1].contains(suit)) return false;
                                        }
                                    },
                                },
                                trigger: {
                                    player: ["damageBefore", "damageCancelled", "damageZero"],
                                    target: ["shaMiss", "useCardToExcluded", "useCardToEnd"],
                                    global: ["useCardEnd"],
                                },
                                forced: true,
                                firstDo: true,
                                charlotte: true,
                                onremove: true,
                                filter: function (event, player) {
                                    if (!event.card || !player.storage.sbliegong_block) return false;
                                    for (var i of player.storage.sbliegong_block) {
                                        if (i[0] == event.card) return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    var storage = player.storage.sbliegong_block;
                                    for (var i = 0; i < storage.length; i++) {
                                        if (storage[i][0] == trigger.card) {
                                            storage.splice(i--, 1);
                                        }
                                    }
                                    if (!storage.length) player.removeSkill('sbliegong_block');
                                },
                                sub: true,
                            },
                            count: {
                                trigger: {
                                    player: "useCard",
                                    target: "useCardToTargeted",
                                },
                                silent: true,
                                forced: true,
                                filter: function (event, player, name) {
                                    if (name != 'useCard' && player == event.player) return false;
                                    var suit = get.suit(event.card);
                                    if (!lib.suit.contains(suit)) return false;
                                    if (player.storage.sbliegong && player.storage.sbliegong.contains(suit)) return false;
                                    return true;
                                },
                                content: function () {
                                    player.markAuto('sbliegong', [get.suit(trigger.card)]);
                                    if (!player.storage.sbliegong) player.storage.sbliegong = [];
                                    var str = [];
                                    if (player.storage.sbliegong.contains('heart')) str += '♥️️';
                                    if (player.storage.sbliegong.contains('diamond')) str += '♦️️';
                                    if (player.storage.sbliegong.contains('spade')) str += '♠️️';
                                    if (player.storage.sbliegong.contains('club')) str += '♣️️';
                                    player.storage.sbliegongx = str;
                                    player.storage.sbliegong_mark = '';
                                    player.addMark("sbliegong_mark", player.storage.sbliegongx);
                                },
                                sub: true,
                            },
                        },
                    }
                });
            }
            if (config.jinengxiugai) {
                lib.translate.discretesidi_info = '当你使用除延时锦囊牌外的牌结算结束后，可以选择一名未指定“司敌”目标的其他角色，并为其指定一名“司敌”目标角色（仅你可见）。当其使用第一张除延时锦囊牌外的牌仅指定“司敌”目标为唯一目标时（否则清除你为其指定的“司敌”目标角色），若目标：为你，你摸一张牌；不为你，你选择一项：1.取消之，然后若此时场上没有角色处于濒死状态，你对其造成1点伤害；2.你摸两张牌。然后清除你为其指定的“司敌”目标角色。'
                lib.translate.qiaosi_info = '出牌阶段限一次，你可以表演“水转百戏图”来赢取相应的牌，然后你选择一项：1.弃置等量的牌；2.将等量的牌交给一名其他角色。'
                lib.skill.wengua = {
                    audio: 2,
                    group: ["wengua5"],
                }
                lib.skill.wengua5 = {
                    trigger: {
                        global: "phaseZhunbeiBegin",
                    },
                    forced: true,
                    audio: false,
                    content: function () {
                        trigger.player.addTempSkill('wengua2');
                    },
                }
                // lib.skill.zuoxing={
                // enable:"phaseUse",
                // usable:1,
                // filter:function(event,player){    
                // for(var i of lib.inpile){
                // if(get.type(i)=='trick'&&event.filterCard({name:i,isCard:true},player,event)) return true;            
                // if(player.storage.zuoxing.maxHp==1) return false;
                // }
                // return false;        
                // },
                // chooseButton:{
                // dialog:function(event,player){
                // var list=[];
                // for(var i of lib.inpile){
                // if(get.type(i)=='trick'&&event.filterCard({name:i,isCard:true},player,event)) list.push(['锦囊','',i]);
                // }
                // return ui.create.dialog('佐幸',[list,'vcard']);
                // },
                // check:function(button){
                // return _status.event.player.getUseValue({name:button.link[2],isCard:true});
                // },
                // backup:function(links,player){
                // return {
                // viewAs:{
                // name:links[0][2],
                // isCard:true,
                // },                
                // filterCard:()=>false,
                // selectCard:-1,
                // popname:true,
                // precontent:function(){
                // player.logSkill('zuoxing');
                // player.storage.zuoxing.loseMaxHp();
                // //delete event.result.skill;
                // },
                // }
                // },
                // prompt:function(links,player){
                // return '请选择'+get.translation(links[0][2])+'的目标';
                // },
                // },
                // ai:{
                // order:1,
                // result:{
                // player:1,
                // },
                // },
                // }

                // lib.translate.zuoxing_info='出牌阶段限一次，若神郭嘉存活且体力上限大于1，则你可以令其减1点体力上限，视为你使用一张普通锦囊牌。'
            }
            if (config.zhijiechifa) {
                //修改苦肉时机
                lib.skill.kurou = {
                    audio: 2,
                    enable: "phaseUse",
                    direct: true,
                    content: function () {
                        player.logSkill('kurou');
                        player.loseHp(1);
                        player.draw(2);
                    },
                    ai: {
                        basic: {
                            order: 1,
                        },
                        result: {
                            player: function (player) {
                                if (player.countCards('h') >= player.hp - 1) return -1;
                                if (player.hp < 3) return -1;
                                return 1;
                            },
                        },
                    },
                }
                //修改重铸时机
                lib.skill._chongzhu = {
                    enable: 'phaseUse',
                    logv: false,
                    visible: true,
                    direct: true,
                    prompt: '将要重铸的牌置入弃牌堆并摸一张牌',
                    filter: function (event, player) {
                        return player.hasCard(function (card) {
                            return lib.skill._chongzhu.filterCard(card, player);
                        });
                    },
                    filterCard: function (card, player) {
                        var mod = game.checkMod(card, player, 'unchanged', 'cardChongzhuable', player);
                        if (mod != 'unchanged') return mod;
                        var info = get.info(card);
                        if (typeof info.chongzhu == 'function') {
                            return info.chongzhu(event, player);
                        }
                        return info.chongzhu;
                    },
                    prepare: function (cards, player) {
                        player.$throw(cards, 1000);
                        game.log(player, '将', cards, '置入了弃牌堆');
                    },
                    check: function (card) {
                        return 1;
                    },
                    discard: false,
                    loseTo: 'discardPile',
                    delay: 0.5,
                    content: function () {
                        "step 0"
                        if (lib.config.mode == 'stone' && _status.mode == 'deck' &&
                            !player.isMin() && get.type(cards[0]).indexOf('stone') == 0) {
                            var list = get.stonecard(1, player.career);
                            if (list.length) {
                                player.gain(game.createCard(list.randomGet()), 'draw');
                            }
                            else {
                                player.draw({ drawDeck: 1 })
                            }
                        }
                        else if (get.subtype(cards[0]) == 'spell_gold') {
                            var list = get.libCard(function (info) {
                                return info.subtype == 'spell_silver';
                            });
                            if (list.length) {
                                player.gain(game.createCard(list.randomGet()), 'draw');
                            }
                            else {
                                player.draw();
                            }
                        }
                        else if (get.subtype(cards[0]) == 'spell_silver') {
                            var list = get.libCard(function (info) {
                                return info.subtype == 'spell_bronze';
                            });
                            if (list.length) {
                                player.gain(game.createCard(list.randomGet()), 'draw');
                            }
                            else {
                                player.draw();
                            }
                        }
                        else {
                            player.draw();
                        }
                    },
                    ai: {
                        basic: {
                            order: 6
                        },
                        result: {
                            player: 1,
                        },
                    }
                }
            }

            // 弧度转换为角度
            radiansToDegrees = function (radians) {
                const degrees = radians % (2 * Math.PI);
                return degrees * 180 / Math.PI;
            };
            // //拖拽功能
            // dragtuozhuai = function (m) {
          // //   var drag=document.querySelector(m);
                // //按下时执行
                // m.onmouseover = function(e){
                // //记录鼠标的x，y坐标
                // var oldX = e.offsetX,
                // oldY = e.offsetY
                    // //在window里执行移动
                    // window.onmousemove = function(){
                    // m.style.left = e.clientX - oldX + "px";
                    // m.style.top = e.clientY - oldY + "px";
                    // };
                // };
                // //松开时执行
                // m.onmouseup = function(){
                    // m.onmouseover = null;
                // };
            // };
            lib.translate.heart='♥️';
            lib.translate.diamond='♦️';
            lib.translate.spade='♠️️';
            lib.translate.club='♣️️';
            lib.card.zhengsu_leijin = { fullskin: true }
            lib.card.zhengsu_mingzhi = { fullskin: true }
            lib.card.zhengsu_bianzhen = { fullskin: true }
            //名称重置
            //张仲景
            lib.translate.zhangzhongjing = '张仲景';
            lib.translate.old_zhangzhongjing = '旧张仲景';
            //蔡文姬
            lib.translate.caiwenji = '蔡文姬';
            lib.translate.re_caiwenji = '界蔡文姬';
            lib.translate.ol_caiwenji = 'ol蔡文姬';
            lib.translate.sp_caiwenji = 'sp蔡文姬';
            lib.translate.WEI_sp_caiwenji = '欢乐蔡文姬';
            lib.translate.WEI_sp_caiwenji_ab = '蔡文姬';
            //严白虎
            lib.translate.yanbaihu = '严白虎';
            //甄姬
            lib.translate.zhenji = '甄姬';
            lib.translate.re_zhenji = '界甄姬';
            lib.translate.shen_zhenji = '神甄姬';
            lib.translate.diy_zhenji = '甄姬';
            //伏皇后
            lib.translate.fuhuanghou = '伏皇后';
            lib.translate.re_fuhuanghou = '新杀伏皇后';
            lib.translate.xin_fuhuanghou = '界伏皇后';
            lib.translate.sp_fuhuanghou = 'sp伏皇后';
            lib.translate.old_fuhuanghou = '旧伏皇后';
            //吉平
            lib.translate.sp_jiben = 'sp吉平';
            lib.translate.dc_jiben = '吉平';
            //步练师
            lib.translate.dc_bulianshi = '新杀步练师';
            lib.translate.re_bulianshi = '界步练师';
            //星武将
            lib.translate.yj_zhanghe = "星张郃";
            lib.translate.yj_xuhuang = "星徐晃";
            lib.translate.yj_ganning = "星甘宁";
            lib.translate.yj_huangzhong = "星黄忠";
            lib.translate.yj_zhangliao = "星张辽";
            //花鬘
            lib.translate.sp_huaman = "花鬘";
            lib.translate.huaman = "新杀花鬘";
            //鲍三娘
            lib.translate.re_baosanniang = "鲍三娘";
            lib.translate.baosanniang = "ol鲍三娘";
            lib.translate.xin_baosanniang = "新杀鲍三娘";
            //骆统
            lib.translate.dc_luotong = "新杀骆统";
            //sp武将
            lib.translate.sp_caoren = 'sp曹仁';
            lib.translate.jsp_guanyu = 'sp关羽';
            lib.translate.sp_jiangwei = 'sp姜维';
            lib.translate.sp_jiaxu = 'sp贾诩';
            lib.translate.sp_pangde = 'sp庞德';
            lib.translate.sp_sunshangxiang = 'sp孙尚香';  
            lib.translate.sp_pangtong = 'sp庞统';
            lib.translate.sp_diaochan = 'sp貂蝉';
            lib.translate.sp_dongzhuo = 'sp董卓';
            lib.translate.sp_fuhuanghou = 'sp伏皇后';
            lib.translate.sp_fuwan = 'sp伏完';
            lib.translate.jsp_huangyueying = 'sp黄月英';
            lib.translate.sp_machao = 'sp马超';
            lib.translate.sp_menghuo = 'sp孟获';
            lib.translate.sp_taishici = 'sp太史慈';
            lib.translate.sp_yuanshu = 'sp袁术';
            lib.translate.sp_zhanghe = 'sp张郃';
            lib.translate.sp_zhangliao = 'sp张辽';
            lib.translate.sp_zhaoyun = 'sp赵云';
            lib.translate.sp_ol_zhanghe = 'sp张郃';

        }, precontent: function () {
        }, config: {
            jinengxiugai: {
                name: '技能修改和技能描述修改',
                init: true,
                intro: "修改部分武将技能和描述，同步手杀，重启生效。",
            },
            biaojixiugai: {
                name: '标记修改(含国战)',
                init: true,
                intro: "修改部分武将标记，同步手杀，重启生效。",
            },
            xunizhuangbeipai: {
                name: '虚拟装备牌',
                init: true,
                intro: "虚拟装备牌(尚未完善，持续更新中)。",
            },
            zhijiechifa: {
                name: '时机修改',
                init: true,
                intro: "修改部分武将时机，同步手杀，重启生效。",
            },
            doudizhu_guanqiuxiaoguo: {
                name: '入场特效',
                init: true,
                intro: "斗地主光球，入场官阶，入场国标重启生效。",
            },
            huajiatexiao: {
                name: '其他美化',
                init: true,
                intro: "仁库，整肃，护甲特效及音效，重启生效。",
            },
            guozhanmeihua: {
                name: '国战美化',
                init: true,
                intro: "关于国战的一些美化，如建国，军令，标记等，重启生效。",
            },
            shoushajishatexiao: {
                name: '全局特效',
                init: false,
                intro: "击杀特效，癫狂无双等，重启生效。",
            },
            jishatexiao: {
                name: '击杀特效',
                init: false,
                intro: "击杀特效，重启生效。",
                item:{
                    shousha: '手杀击杀特效',
                    shizhounian: '十周年击杀特效',
                },
            },
            shiyongkapaitixiao: {
                name: '使用卡牌特效',
                init: false,
                intro: "杀闪桃酒等，重启生效。",
            },
            youxishengfu: {
                name: '游戏胜负特效',
                init: "off",
                item: {
                    "identity": "十周年结算",
                    "mobileMode": "手杀结算",
                    "off": "关闭",
                },
                intro: "胜利以及失败的特效，十周年结算特效仅适用于身份模式",
            },
            daojianfu: {
                name: '命中特效',
                init: "off",
                item: {
                    "dao": "刀",
                    "jian": "剑",
                    "fuzi": "斧子",
                    "xx": "关闭",
                },
                intro: "命中特效及音效，重新生效",
            },
            ervermaihua: {
                name: '2v2布局美化',
                init: true,
                intro: "重启生效。",
            },
            xinshadoudizhu: {
                name: '兵临城下斗地主修改',
                init: false,
                intro: "不建议手杀ui下开启，兵临城下界面美化。",
            },

            xlfbmoshi: {
                name: '血量翻倍模式',
                init: false,
                intro: "所有模式生效，体力上限翻倍，重启生效。",
            },
            mpfbmoshi: {
                name: '摸牌翻倍模式',
                init: false,
                intro: "所有模式生效，摸牌阶段多摸2张牌，重启生效。",
            },
            zhujizhongwang: {
                name: '主亡忠继模式',
                init: false,
                intro: "身份模式生效，主公死了由忠臣继承，重启生效。",
            },
        }, help: {}, package: {
            character: {
                character: {
                },
                translate: {
                },
            },
            card: {
                card: {
                },
                translate: {
                },
                list: [],
            },
            skill: {
                skill: {
                },
                translate: {
                },
            },
            intro: "********************************************************<b><br><font color=\"#FF9000\">修改了一些技能标记和特效，建议配合 无名补丁 使用<br><font color=\"#00FFFF\">修改了一些技能和时机，同步手杀<br><span style='color:gold'>增加了手杀斗地主的光球效果<br>优化了国战美化，2V2美化，仁库整肃分离，全局特效<br><font color=\"#FFFFFF\">感谢以下大佬们的帮助和素材...<br><font color=\"#98FB98\"><img style=width:50px;border-radius:100%; src=" + lib.assetURL + "extension/标记补充/mingxie/zhenglao.jpg></img>蒸佬<img style=width:50px;border-radius:100%; src=" + lib.assetURL + "extension/标记补充/mingxie/luobo.jpg></img>萝卜<img style=width:50px;border-radius:100%; src=" + lib.assetURL + "extension/标记补充/mingxie/mingyue.jpg></img>明月栖木<img style=width:50px;border-radius:100%; src=" + lib.assetURL + "extension/标记补充/mingxie/wanzhou.jpg></img>晚舟<br><img style=width:50px;border-radius:100%; src=" + lib.assetURL + "extension/标记补充/mingxie/yaoyao.jpg></img>瑶瑶混日子</b><br><font color=\"#FFFFFF\">********************************************************<b><br><font color=\"#FF9000\">饺子个人增效版v2.1<b><br><font color=\"#FF9000\">增加大量卡牌使用特效，详见说明文档</b><br><font color=\"#FFFFFF\">********************************************************<br><font color=\"#00FFCC\"><b>欢迎大家进群聊天唠嗑<br><img style=width:200px; src=" + lib.assetURL + "extension/标记补充/mingxie/chaoshiqun.jpg></img>",
            author: "<img style=width:50px;border-radius:100%; src=" + lib.assetURL + "extension/标记补充/mingxie/xigua.jpg></img>   <b><samp id='西瓜'><small><strong>西瓜</strong></small></samp></body><style>#西瓜{animation:xiguabiaoqian 20s linear 1.5s infinite;font-family:shousha;font-size:40px;text-align: center; color: #FFFFCC;text-shadow:-1.3px 0px 2.2px #000, 0px -1.3px 2.2px #000, 1.3px 0px 2.2px #000 ,0px 1.3px 2.2px #000;}@keyframes xiguabiaoqian{0% {color:#99FF00;opacity:1;}9%{opacity:0;}18%{color: #FF0000;opacity:1;}27%{opacity:0;}36% {color:#0000FF;opacity:1;}45%{opacity:0;}54%{color: #FFFF99;opacity:1;}63%{opacity:0;}72%{color:#FF6600;opacity:1;}81%{opacity:0;}90%{color: #FF0000;opacity:1;}99%{opacity:0;}}</style>",
            diskURL: "",
            forumURL: "",
            version: "1.0",
        }, files: { "character": [], "card": [], "skill": [] }
    }
})